
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006588  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fa8  08006710  08006710  00016710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096b8  080096b8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080096b8  080096b8  000196b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096c0  080096c0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096c0  080096c0  000196c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096c4  080096c4  000196c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080096c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0000024c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140a5  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003369  00000000  00000000  000340e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  00037458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001100  00000000  00000000  000386f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c0a  00000000  00000000  000397f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018d33  00000000  00000000  0005d402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf85a  00000000  00000000  00076135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014598f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ba4  00000000  00000000  001459e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080066f8 	.word	0x080066f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080066f8 	.word	0x080066f8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2108      	movs	r1, #8
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <button_init+0x14>)
 80004e6:	f003 f811 	bl	800350c <HAL_GPIO_WritePin>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40020c00 	.word	0x40020c00

080004f4 <button_Scan>:

void button_Scan(){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2108      	movs	r1, #8
 80004fe:	482f      	ldr	r0, [pc, #188]	; (80005bc <button_Scan+0xc8>)
 8000500:	f003 f804 	bl	800350c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000504:	2201      	movs	r2, #1
 8000506:	2108      	movs	r1, #8
 8000508:	482c      	ldr	r0, [pc, #176]	; (80005bc <button_Scan+0xc8>)
 800050a:	f002 ffff 	bl	800350c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800050e:	230a      	movs	r3, #10
 8000510:	2202      	movs	r2, #2
 8000512:	492b      	ldr	r1, [pc, #172]	; (80005c0 <button_Scan+0xcc>)
 8000514:	482b      	ldr	r0, [pc, #172]	; (80005c4 <button_Scan+0xd0>)
 8000516:	f004 ff4a 	bl	80053ae <HAL_SPI_Receive>
	  int button_index = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800051e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000522:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	e03f      	b.n	80005aa <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b00      	cmp	r3, #0
 800052e:	db06      	blt.n	800053e <button_Scan+0x4a>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b03      	cmp	r3, #3
 8000534:	dc03      	bgt.n	800053e <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3304      	adds	r3, #4
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	e018      	b.n	8000570 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b03      	cmp	r3, #3
 8000542:	dd07      	ble.n	8000554 <button_Scan+0x60>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b07      	cmp	r3, #7
 8000548:	dc04      	bgt.n	8000554 <button_Scan+0x60>
			  button_index = 7 - i;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f1c3 0307 	rsb	r3, r3, #7
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	e00d      	b.n	8000570 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b07      	cmp	r3, #7
 8000558:	dd06      	ble.n	8000568 <button_Scan+0x74>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0b      	cmp	r3, #11
 800055e:	dc03      	bgt.n	8000568 <button_Scan+0x74>
			  button_index = i + 4;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3304      	adds	r3, #4
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	e003      	b.n	8000570 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f1c3 0317 	rsb	r3, r3, #23
 800056e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <button_Scan+0xcc>)
 8000572:	881a      	ldrh	r2, [r3, #0]
 8000574:	897b      	ldrh	r3, [r7, #10]
 8000576:	4013      	ands	r3, r2
 8000578:	b29b      	uxth	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	d005      	beq.n	800058a <button_Scan+0x96>
 800057e:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2100      	movs	r1, #0
 8000584:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000588:	e009      	b.n	800059e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800058a:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <button_Scan+0xd4>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000592:	3301      	adds	r3, #1
 8000594:	b299      	uxth	r1, r3
 8000596:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <button_Scan+0xd4>)
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800059e:	897b      	ldrh	r3, [r7, #10]
 80005a0:	085b      	lsrs	r3, r3, #1
 80005a2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3301      	adds	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b0f      	cmp	r3, #15
 80005ae:	ddbc      	ble.n	800052a <button_Scan+0x36>
	  }
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40020c00 	.word	0x40020c00
 80005c0:	20000050 	.word	0x20000050
 80005c4:	200001bc 	.word	0x200001bc
 80005c8:	20000030 	.word	0x20000030

080005cc <ds3231_init>:
uint8_t ds3231_alarm_hour;
uint8_t ds3231_alarm_min;
// uint8_t ds3231_alarm_sec;

void ds3231_init()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); // second,	0011 0000
 80005d0:	201e      	movs	r0, #30
 80005d2:	f002 fc09 	bl	8002de8 <DEC2BCD>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	4b23      	ldr	r3, [pc, #140]	; (8000668 <ds3231_init+0x9c>)
 80005dc:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); // minute,	0010 0010
 80005de:	2016      	movs	r0, #22
 80005e0:	f002 fc02 	bl	8002de8 <DEC2BCD>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <ds3231_init+0x9c>)
 80005ea:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); // hour,		0010 0001
 80005ec:	2015      	movs	r0, #21
 80005ee:	f002 fbfb 	bl	8002de8 <DEC2BCD>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <ds3231_init+0x9c>)
 80005f8:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);	// day,		0000 0110
 80005fa:	2006      	movs	r0, #6
 80005fc:	f002 fbf4 	bl	8002de8 <DEC2BCD>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <ds3231_init+0x9c>)
 8000606:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); // date,		0001 0101
 8000608:	200f      	movs	r0, #15
 800060a:	f002 fbed 	bl	8002de8 <DEC2BCD>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <ds3231_init+0x9c>)
 8000614:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);	// month,	0000 1001
 8000616:	2009      	movs	r0, #9
 8000618:	f002 fbe6 	bl	8002de8 <DEC2BCD>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <ds3231_init+0x9c>)
 8000622:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); // year,		0010 0011
 8000624:	2017      	movs	r0, #23
 8000626:	f002 fbdf 	bl	8002de8 <DEC2BCD>
 800062a:	4603      	mov	r3, r0
 800062c:	461a      	mov	r2, r3
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <ds3231_init+0x9c>)
 8000630:	719a      	strb	r2, [r3, #6]

	ds3231_alarm_buf[0] = DEC2BCD(0);
 8000632:	2000      	movs	r0, #0
 8000634:	f002 fbd8 	bl	8002de8 <DEC2BCD>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <ds3231_init+0xa0>)
 800063e:	701a      	strb	r2, [r3, #0]
	ds3231_alarm_buf[1] = DEC2BCD(0);
 8000640:	2000      	movs	r0, #0
 8000642:	f002 fbd1 	bl	8002de8 <DEC2BCD>
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <ds3231_init+0xa0>)
 800064c:	705a      	strb	r2, [r3, #1]
	// ds3231_alarm_buf[2] = DEC2BCD(0);
	if (HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK)
 800064e:	2332      	movs	r3, #50	; 0x32
 8000650:	2203      	movs	r2, #3
 8000652:	21d0      	movs	r1, #208	; 0xd0
 8000654:	4806      	ldr	r0, [pc, #24]	; (8000670 <ds3231_init+0xa4>)
 8000656:	f003 fbd7 	bl	8003e08 <HAL_I2C_IsDeviceReady>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d000      	beq.n	8000662 <ds3231_init+0x96>
	{
		while (1)
 8000660:	e7fe      	b.n	8000660 <ds3231_init+0x94>
			;
	};
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000054 	.word	0x20000054
 800066c:	2000005c 	.word	0x2000005c
 8000670:	20000154 	.word	0x20000154

08000674 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af04      	add	r7, sp, #16
 800067a:	4603      	mov	r3, r0
 800067c:	460a      	mov	r2, r1
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	4613      	mov	r3, r2
 8000682:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000684:	79bb      	ldrb	r3, [r7, #6]
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fbae 	bl	8002de8 <DEC2BCD>
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	b29a      	uxth	r2, r3
 8000694:	230a      	movs	r3, #10
 8000696:	9302      	str	r3, [sp, #8]
 8000698:	2301      	movs	r3, #1
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	f107 030f 	add.w	r3, r7, #15
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2301      	movs	r3, #1
 80006a4:	21d0      	movs	r1, #208	; 0xd0
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <ds3231_Write+0x40>)
 80006a8:	f003 f88e 	bl	80037c8 <HAL_I2C_Mem_Write>
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000154 	.word	0x20000154

080006b8 <ds3231_ReadTime>:

void ds3231_ReadTime()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80006be:	230a      	movs	r3, #10
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	2307      	movs	r3, #7
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <ds3231_ReadTime+0xa4>)
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2301      	movs	r3, #1
 80006cc:	2200      	movs	r2, #0
 80006ce:	21d0      	movs	r1, #208	; 0xd0
 80006d0:	4823      	ldr	r0, [pc, #140]	; (8000760 <ds3231_ReadTime+0xa8>)
 80006d2:	f003 f973 	bl	80039bc <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <ds3231_ReadTime+0xa4>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fb6a 	bl	8002db4 <BCD2DEC>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <ds3231_ReadTime+0xac>)
 80006e6:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <ds3231_ReadTime+0xa4>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 fb61 	bl	8002db4 <BCD2DEC>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <ds3231_ReadTime+0xb0>)
 80006f8:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <ds3231_ReadTime+0xa4>)
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fb58 	bl	8002db4 <BCD2DEC>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <ds3231_ReadTime+0xb4>)
 800070a:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <ds3231_ReadTime+0xa4>)
 800070e:	78db      	ldrb	r3, [r3, #3]
 8000710:	4618      	mov	r0, r3
 8000712:	f002 fb4f 	bl	8002db4 <BCD2DEC>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <ds3231_ReadTime+0xb8>)
 800071c:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <ds3231_ReadTime+0xa4>)
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fb46 	bl	8002db4 <BCD2DEC>
 8000728:	4603      	mov	r3, r0
 800072a:	461a      	mov	r2, r3
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <ds3231_ReadTime+0xbc>)
 800072e:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <ds3231_ReadTime+0xa4>)
 8000732:	795b      	ldrb	r3, [r3, #5]
 8000734:	4618      	mov	r0, r3
 8000736:	f002 fb3d 	bl	8002db4 <BCD2DEC>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <ds3231_ReadTime+0xc0>)
 8000740:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <ds3231_ReadTime+0xa4>)
 8000744:	799b      	ldrb	r3, [r3, #6]
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fb34 	bl	8002db4 <BCD2DEC>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <ds3231_ReadTime+0xc4>)
 8000752:	701a      	strb	r2, [r3, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000054 	.word	0x20000054
 8000760:	20000154 	.word	0x20000154
 8000764:	20000061 	.word	0x20000061
 8000768:	20000060 	.word	0x20000060
 800076c:	2000005f 	.word	0x2000005f
 8000770:	20000063 	.word	0x20000063
 8000774:	20000062 	.word	0x20000062
 8000778:	20000064 	.word	0x20000064
 800077c:	20000065 	.word	0x20000065

08000780 <ds3231_ReadAlarm>:

void ds3231_ReadAlarm(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x08, I2C_MEMADD_SIZE_8BIT, ds3231_alarm_buf, 2, 10);
 8000786:	230a      	movs	r3, #10
 8000788:	9302      	str	r3, [sp, #8]
 800078a:	2302      	movs	r3, #2
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <ds3231_ReadAlarm+0x48>)
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	2208      	movs	r2, #8
 8000796:	21d0      	movs	r1, #208	; 0xd0
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <ds3231_ReadAlarm+0x4c>)
 800079a:	f003 f90f 	bl	80039bc <HAL_I2C_Mem_Read>
	// ds3231_alarm_sec = BCD2DEC(ds3231_alarm_buf[0]);
	ds3231_alarm_min = BCD2DEC(ds3231_alarm_buf[0]);
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <ds3231_ReadAlarm+0x48>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fb06 	bl	8002db4 <BCD2DEC>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <ds3231_ReadAlarm+0x50>)
 80007ae:	701a      	strb	r2, [r3, #0]
	ds3231_alarm_hour = BCD2DEC(ds3231_alarm_buf[1]);
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <ds3231_ReadAlarm+0x48>)
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fafd 	bl	8002db4 <BCD2DEC>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <ds3231_ReadAlarm+0x54>)
 80007c0:	701a      	strb	r2, [r3, #0]
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000005c 	.word	0x2000005c
 80007cc:	20000154 	.word	0x20000154
 80007d0:	20000067 	.word	0x20000067
 80007d4:	20000066 	.word	0x20000066

080007d8 <fsm_clock>:
 *      Author: quoct
 */

#include "fsm.h"
void fsm_clock()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af04      	add	r7, sp, #16
    if (mode == MODE1)
 80007de:	4b8b      	ldr	r3, [pc, #556]	; (8000a0c <fsm_clock+0x234>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d10f      	bne.n	8000806 <fsm_clock+0x2e>
    {
        switch (statusNORMAL_1)
 80007e6:	4b8a      	ldr	r3, [pc, #552]	; (8000a10 <fsm_clock+0x238>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d002      	beq.n	80007f4 <fsm_clock+0x1c>
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d004      	beq.n	80007fc <fsm_clock+0x24>
        case NORMAL:
            ds3231_ReadTime();
            displayTime();
            break;
        default:
            break;
 80007f2:	e009      	b.n	8000808 <fsm_clock+0x30>
            statusNORMAL_1 = NORMAL;
 80007f4:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <fsm_clock+0x238>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	601a      	str	r2, [r3, #0]
            break;
 80007fa:	e005      	b.n	8000808 <fsm_clock+0x30>
            ds3231_ReadTime();
 80007fc:	f7ff ff5c 	bl	80006b8 <ds3231_ReadTime>
            displayTime();
 8000800:	f001 f85c 	bl	80018bc <displayTime>
            break;
 8000804:	e000      	b.n	8000808 <fsm_clock+0x30>
        }
    }
 8000806:	bf00      	nop
    if (mode == MODE2)
 8000808:	4b80      	ldr	r3, [pc, #512]	; (8000a0c <fsm_clock+0x234>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d149      	bne.n	80008a4 <fsm_clock+0xcc>
    {
        switch (statusHOUR_1)
 8000810:	4b80      	ldr	r3, [pc, #512]	; (8000a14 <fsm_clock+0x23c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <fsm_clock+0x46>
 8000818:	2b01      	cmp	r3, #1
 800081a:	d004      	beq.n	8000826 <fsm_clock+0x4e>
            break;
        case NORMAL:
            blinky(HOUR);
            break;
        default:
            break;
 800081c:	e007      	b.n	800082e <fsm_clock+0x56>
            statusHOUR_1 = NORMAL;
 800081e:	4b7d      	ldr	r3, [pc, #500]	; (8000a14 <fsm_clock+0x23c>)
 8000820:	2201      	movs	r2, #1
 8000822:	601a      	str	r2, [r3, #0]
            break;
 8000824:	e003      	b.n	800082e <fsm_clock+0x56>
            blinky(HOUR);
 8000826:	2001      	movs	r0, #1
 8000828:	f000 fe82 	bl	8001530 <blinky>
            break;
 800082c:	bf00      	nop
        }
        switch (statusHOUR_2)
 800082e:	4b7a      	ldr	r3, [pc, #488]	; (8000a18 <fsm_clock+0x240>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <fsm_clock+0x64>
 8000836:	2b01      	cmp	r3, #1
 8000838:	d004      	beq.n	8000844 <fsm_clock+0x6c>
                if (counterHour >= 24)
                    counterHour = 0;
            }
            break;
        default:
            break;
 800083a:	e020      	b.n	800087e <fsm_clock+0xa6>
            statusHOUR_2 = NORMAL;
 800083c:	4b76      	ldr	r3, [pc, #472]	; (8000a18 <fsm_clock+0x240>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
            break;
 8000842:	e01c      	b.n	800087e <fsm_clock+0xa6>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8000844:	4b75      	ldr	r3, [pc, #468]	; (8000a1c <fsm_clock+0x244>)
 8000846:	88db      	ldrh	r3, [r3, #6]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d00a      	beq.n	8000862 <fsm_clock+0x8a>
 800084c:	4b73      	ldr	r3, [pc, #460]	; (8000a1c <fsm_clock+0x244>)
 800084e:	88db      	ldrh	r3, [r3, #6]
 8000850:	2b28      	cmp	r3, #40	; 0x28
 8000852:	d913      	bls.n	800087c <fsm_clock+0xa4>
 8000854:	4b71      	ldr	r3, [pc, #452]	; (8000a1c <fsm_clock+0x244>)
 8000856:	88db      	ldrh	r3, [r3, #6]
 8000858:	f003 0303 	and.w	r3, r3, #3
 800085c:	b29b      	uxth	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d10c      	bne.n	800087c <fsm_clock+0xa4>
                counterHour++;
 8000862:	4b6f      	ldr	r3, [pc, #444]	; (8000a20 <fsm_clock+0x248>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3301      	adds	r3, #1
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b6d      	ldr	r3, [pc, #436]	; (8000a20 <fsm_clock+0x248>)
 800086c:	701a      	strb	r2, [r3, #0]
                if (counterHour >= 24)
 800086e:	4b6c      	ldr	r3, [pc, #432]	; (8000a20 <fsm_clock+0x248>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b17      	cmp	r3, #23
 8000874:	d902      	bls.n	800087c <fsm_clock+0xa4>
                    counterHour = 0;
 8000876:	4b6a      	ldr	r3, [pc, #424]	; (8000a20 <fsm_clock+0x248>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
            break;
 800087c:	bf00      	nop
        }
        switch (statusHOUR_3)
 800087e:	4b69      	ldr	r3, [pc, #420]	; (8000a24 <fsm_clock+0x24c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d002      	beq.n	800088c <fsm_clock+0xb4>
 8000886:	2b01      	cmp	r3, #1
 8000888:	d004      	beq.n	8000894 <fsm_clock+0xbc>
            {
                saveTime[0] = 1;
            }
            break;
        default:
            break;
 800088a:	e00e      	b.n	80008aa <fsm_clock+0xd2>
            statusHOUR_3 = NORMAL;
 800088c:	4b65      	ldr	r3, [pc, #404]	; (8000a24 <fsm_clock+0x24c>)
 800088e:	2201      	movs	r2, #1
 8000890:	601a      	str	r2, [r3, #0]
            break;
 8000892:	e00a      	b.n	80008aa <fsm_clock+0xd2>
            if (button_count[12] == 1)
 8000894:	4b61      	ldr	r3, [pc, #388]	; (8000a1c <fsm_clock+0x244>)
 8000896:	8b1b      	ldrh	r3, [r3, #24]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d105      	bne.n	80008a8 <fsm_clock+0xd0>
                saveTime[0] = 1;
 800089c:	4b62      	ldr	r3, [pc, #392]	; (8000a28 <fsm_clock+0x250>)
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
            break;
 80008a2:	e001      	b.n	80008a8 <fsm_clock+0xd0>
        }
    }
 80008a4:	bf00      	nop
 80008a6:	e000      	b.n	80008aa <fsm_clock+0xd2>
            break;
 80008a8:	bf00      	nop
    if (mode == MODE3)
 80008aa:	4b58      	ldr	r3, [pc, #352]	; (8000a0c <fsm_clock+0x234>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d149      	bne.n	8000946 <fsm_clock+0x16e>
    {
        switch (statusMIN_1)
 80008b2:	4b5e      	ldr	r3, [pc, #376]	; (8000a2c <fsm_clock+0x254>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <fsm_clock+0xe8>
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d004      	beq.n	80008c8 <fsm_clock+0xf0>
            break;
        case NORMAL:
            blinky(MIN);
            break;
        default:
            break;
 80008be:	e007      	b.n	80008d0 <fsm_clock+0xf8>
            statusMIN_1 = NORMAL;
 80008c0:	4b5a      	ldr	r3, [pc, #360]	; (8000a2c <fsm_clock+0x254>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	601a      	str	r2, [r3, #0]
            break;
 80008c6:	e003      	b.n	80008d0 <fsm_clock+0xf8>
            blinky(MIN);
 80008c8:	2002      	movs	r0, #2
 80008ca:	f000 fe31 	bl	8001530 <blinky>
            break;
 80008ce:	bf00      	nop
        }
        switch (statusMIN_2)
 80008d0:	4b57      	ldr	r3, [pc, #348]	; (8000a30 <fsm_clock+0x258>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <fsm_clock+0x106>
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d004      	beq.n	80008e6 <fsm_clock+0x10e>
                if (counterMin >= 60)
                    counterMin = 0;
            }
            break;
        default:
            break;
 80008dc:	e020      	b.n	8000920 <fsm_clock+0x148>
            statusMIN_2 = NORMAL;
 80008de:	4b54      	ldr	r3, [pc, #336]	; (8000a30 <fsm_clock+0x258>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	601a      	str	r2, [r3, #0]
            break;
 80008e4:	e01c      	b.n	8000920 <fsm_clock+0x148>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 80008e6:	4b4d      	ldr	r3, [pc, #308]	; (8000a1c <fsm_clock+0x244>)
 80008e8:	88db      	ldrh	r3, [r3, #6]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d00a      	beq.n	8000904 <fsm_clock+0x12c>
 80008ee:	4b4b      	ldr	r3, [pc, #300]	; (8000a1c <fsm_clock+0x244>)
 80008f0:	88db      	ldrh	r3, [r3, #6]
 80008f2:	2b28      	cmp	r3, #40	; 0x28
 80008f4:	d913      	bls.n	800091e <fsm_clock+0x146>
 80008f6:	4b49      	ldr	r3, [pc, #292]	; (8000a1c <fsm_clock+0x244>)
 80008f8:	88db      	ldrh	r3, [r3, #6]
 80008fa:	f003 0303 	and.w	r3, r3, #3
 80008fe:	b29b      	uxth	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d10c      	bne.n	800091e <fsm_clock+0x146>
                counterMin++;
 8000904:	4b4b      	ldr	r3, [pc, #300]	; (8000a34 <fsm_clock+0x25c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	3301      	adds	r3, #1
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b49      	ldr	r3, [pc, #292]	; (8000a34 <fsm_clock+0x25c>)
 800090e:	701a      	strb	r2, [r3, #0]
                if (counterMin >= 60)
 8000910:	4b48      	ldr	r3, [pc, #288]	; (8000a34 <fsm_clock+0x25c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b3b      	cmp	r3, #59	; 0x3b
 8000916:	d902      	bls.n	800091e <fsm_clock+0x146>
                    counterMin = 0;
 8000918:	4b46      	ldr	r3, [pc, #280]	; (8000a34 <fsm_clock+0x25c>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
            break;
 800091e:	bf00      	nop
        }
        switch (statusMIN_3)
 8000920:	4b45      	ldr	r3, [pc, #276]	; (8000a38 <fsm_clock+0x260>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d002      	beq.n	800092e <fsm_clock+0x156>
 8000928:	2b01      	cmp	r3, #1
 800092a:	d004      	beq.n	8000936 <fsm_clock+0x15e>
            {
                saveTime[1] = 1;
            }
            break;
        default:
            break;
 800092c:	e00e      	b.n	800094c <fsm_clock+0x174>
            statusMIN_3 = NORMAL;
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <fsm_clock+0x260>)
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]
            break;
 8000934:	e00a      	b.n	800094c <fsm_clock+0x174>
            if (button_count[12] == 1)
 8000936:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <fsm_clock+0x244>)
 8000938:	8b1b      	ldrh	r3, [r3, #24]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d105      	bne.n	800094a <fsm_clock+0x172>
                saveTime[1] = 1;
 800093e:	4b3a      	ldr	r3, [pc, #232]	; (8000a28 <fsm_clock+0x250>)
 8000940:	2201      	movs	r2, #1
 8000942:	705a      	strb	r2, [r3, #1]
            break;
 8000944:	e001      	b.n	800094a <fsm_clock+0x172>
        }
    }
 8000946:	bf00      	nop
 8000948:	e000      	b.n	800094c <fsm_clock+0x174>
            break;
 800094a:	bf00      	nop
    if (mode == MODE4)
 800094c:	4b2f      	ldr	r3, [pc, #188]	; (8000a0c <fsm_clock+0x234>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b04      	cmp	r3, #4
 8000952:	d149      	bne.n	80009e8 <fsm_clock+0x210>
    {
        switch (statusSEC_1)
 8000954:	4b39      	ldr	r3, [pc, #228]	; (8000a3c <fsm_clock+0x264>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d002      	beq.n	8000962 <fsm_clock+0x18a>
 800095c:	2b01      	cmp	r3, #1
 800095e:	d004      	beq.n	800096a <fsm_clock+0x192>
            break;
        case NORMAL:
            blinky(SEC);
            break;
        default:
            break;
 8000960:	e007      	b.n	8000972 <fsm_clock+0x19a>
            statusSEC_1 = NORMAL;
 8000962:	4b36      	ldr	r3, [pc, #216]	; (8000a3c <fsm_clock+0x264>)
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
            break;
 8000968:	e003      	b.n	8000972 <fsm_clock+0x19a>
            blinky(SEC);
 800096a:	2003      	movs	r0, #3
 800096c:	f000 fde0 	bl	8001530 <blinky>
            break;
 8000970:	bf00      	nop
        }
        switch (statusSEC_2)
 8000972:	4b33      	ldr	r3, [pc, #204]	; (8000a40 <fsm_clock+0x268>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d002      	beq.n	8000980 <fsm_clock+0x1a8>
 800097a:	2b01      	cmp	r3, #1
 800097c:	d004      	beq.n	8000988 <fsm_clock+0x1b0>
                if (counterSec >= 60)
                    counterSec = 0;
            }
            break;
        default:
            break;
 800097e:	e020      	b.n	80009c2 <fsm_clock+0x1ea>
            statusSEC_2 = NORMAL;
 8000980:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <fsm_clock+0x268>)
 8000982:	2201      	movs	r2, #1
 8000984:	601a      	str	r2, [r3, #0]
            break;
 8000986:	e01c      	b.n	80009c2 <fsm_clock+0x1ea>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <fsm_clock+0x244>)
 800098a:	88db      	ldrh	r3, [r3, #6]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d00a      	beq.n	80009a6 <fsm_clock+0x1ce>
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <fsm_clock+0x244>)
 8000992:	88db      	ldrh	r3, [r3, #6]
 8000994:	2b28      	cmp	r3, #40	; 0x28
 8000996:	d913      	bls.n	80009c0 <fsm_clock+0x1e8>
 8000998:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <fsm_clock+0x244>)
 800099a:	88db      	ldrh	r3, [r3, #6]
 800099c:	f003 0303 	and.w	r3, r3, #3
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10c      	bne.n	80009c0 <fsm_clock+0x1e8>
                counterSec++;
 80009a6:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <fsm_clock+0x26c>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <fsm_clock+0x26c>)
 80009b0:	701a      	strb	r2, [r3, #0]
                if (counterSec >= 60)
 80009b2:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <fsm_clock+0x26c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b3b      	cmp	r3, #59	; 0x3b
 80009b8:	d902      	bls.n	80009c0 <fsm_clock+0x1e8>
                    counterSec = 0;
 80009ba:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <fsm_clock+0x26c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
            break;
 80009c0:	bf00      	nop
        }
        switch (statusSEC_3)
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <fsm_clock+0x270>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d002      	beq.n	80009d0 <fsm_clock+0x1f8>
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d004      	beq.n	80009d8 <fsm_clock+0x200>
            {
                saveTime[2] = 1;
            }
            break;
        default:
            break;
 80009ce:	e00e      	b.n	80009ee <fsm_clock+0x216>
            statusSEC_3 = NORMAL;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <fsm_clock+0x270>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	601a      	str	r2, [r3, #0]
            break;
 80009d6:	e00a      	b.n	80009ee <fsm_clock+0x216>
            if (button_count[12] == 1)
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <fsm_clock+0x244>)
 80009da:	8b1b      	ldrh	r3, [r3, #24]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d105      	bne.n	80009ec <fsm_clock+0x214>
                saveTime[2] = 1;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <fsm_clock+0x250>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	709a      	strb	r2, [r3, #2]
            break;
 80009e6:	e001      	b.n	80009ec <fsm_clock+0x214>
        }
    }
 80009e8:	bf00      	nop
 80009ea:	e000      	b.n	80009ee <fsm_clock+0x216>
            break;
 80009ec:	bf00      	nop
    if (mode == MODE5)
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <fsm_clock+0x234>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b05      	cmp	r3, #5
 80009f4:	d16b      	bne.n	8000ace <fsm_clock+0x2f6>
    {
        switch (statusDAY_1)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <fsm_clock+0x274>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <fsm_clock+0x22c>
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d026      	beq.n	8000a50 <fsm_clock+0x278>
            break;
        case NORMAL:
            blinky(DAY);
            break;
        default:
            break;
 8000a02:	e029      	b.n	8000a58 <fsm_clock+0x280>
            statusDAY_1 = NORMAL;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <fsm_clock+0x274>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	601a      	str	r2, [r3, #0]
            break;
 8000a0a:	e025      	b.n	8000a58 <fsm_clock+0x280>
 8000a0c:	20000134 	.word	0x20000134
 8000a10:	200000bc 	.word	0x200000bc
 8000a14:	200000dc 	.word	0x200000dc
 8000a18:	200000e0 	.word	0x200000e0
 8000a1c:	20000030 	.word	0x20000030
 8000a20:	2000013e 	.word	0x2000013e
 8000a24:	200000e4 	.word	0x200000e4
 8000a28:	2000014c 	.word	0x2000014c
 8000a2c:	200000d0 	.word	0x200000d0
 8000a30:	200000d4 	.word	0x200000d4
 8000a34:	2000013d 	.word	0x2000013d
 8000a38:	200000d8 	.word	0x200000d8
 8000a3c:	200000c4 	.word	0x200000c4
 8000a40:	200000c8 	.word	0x200000c8
 8000a44:	2000013c 	.word	0x2000013c
 8000a48:	200000cc 	.word	0x200000cc
 8000a4c:	200000e8 	.word	0x200000e8
            blinky(DAY);
 8000a50:	2004      	movs	r0, #4
 8000a52:	f000 fd6d 	bl	8001530 <blinky>
            break;
 8000a56:	bf00      	nop
        }
        switch (statusDAY_2)
 8000a58:	4b7e      	ldr	r3, [pc, #504]	; (8000c54 <fsm_clock+0x47c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d002      	beq.n	8000a66 <fsm_clock+0x28e>
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d004      	beq.n	8000a6e <fsm_clock+0x296>
                if (counterDay >= 8)
                    counterDay = 1;
            }
            break;
        default:
            break;
 8000a64:	e020      	b.n	8000aa8 <fsm_clock+0x2d0>
            statusDAY_2 = NORMAL;
 8000a66:	4b7b      	ldr	r3, [pc, #492]	; (8000c54 <fsm_clock+0x47c>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	601a      	str	r2, [r3, #0]
            break;
 8000a6c:	e01c      	b.n	8000aa8 <fsm_clock+0x2d0>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8000a6e:	4b7a      	ldr	r3, [pc, #488]	; (8000c58 <fsm_clock+0x480>)
 8000a70:	88db      	ldrh	r3, [r3, #6]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d00a      	beq.n	8000a8c <fsm_clock+0x2b4>
 8000a76:	4b78      	ldr	r3, [pc, #480]	; (8000c58 <fsm_clock+0x480>)
 8000a78:	88db      	ldrh	r3, [r3, #6]
 8000a7a:	2b28      	cmp	r3, #40	; 0x28
 8000a7c:	d913      	bls.n	8000aa6 <fsm_clock+0x2ce>
 8000a7e:	4b76      	ldr	r3, [pc, #472]	; (8000c58 <fsm_clock+0x480>)
 8000a80:	88db      	ldrh	r3, [r3, #6]
 8000a82:	f003 0303 	and.w	r3, r3, #3
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d10c      	bne.n	8000aa6 <fsm_clock+0x2ce>
                counterDay++;
 8000a8c:	4b73      	ldr	r3, [pc, #460]	; (8000c5c <fsm_clock+0x484>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b71      	ldr	r3, [pc, #452]	; (8000c5c <fsm_clock+0x484>)
 8000a96:	701a      	strb	r2, [r3, #0]
                if (counterDay >= 8)
 8000a98:	4b70      	ldr	r3, [pc, #448]	; (8000c5c <fsm_clock+0x484>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b07      	cmp	r3, #7
 8000a9e:	d902      	bls.n	8000aa6 <fsm_clock+0x2ce>
                    counterDay = 1;
 8000aa0:	4b6e      	ldr	r3, [pc, #440]	; (8000c5c <fsm_clock+0x484>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
            break;
 8000aa6:	bf00      	nop
        }
        switch (statusDAY_3)
 8000aa8:	4b6d      	ldr	r3, [pc, #436]	; (8000c60 <fsm_clock+0x488>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d002      	beq.n	8000ab6 <fsm_clock+0x2de>
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d004      	beq.n	8000abe <fsm_clock+0x2e6>
            {
               saveTime[3] = 1;
            }
            break;
        default:
            break;
 8000ab4:	e00e      	b.n	8000ad4 <fsm_clock+0x2fc>
            statusDAY_3 = NORMAL;
 8000ab6:	4b6a      	ldr	r3, [pc, #424]	; (8000c60 <fsm_clock+0x488>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	601a      	str	r2, [r3, #0]
            break;
 8000abc:	e00a      	b.n	8000ad4 <fsm_clock+0x2fc>
            if (button_count[12] == 1)
 8000abe:	4b66      	ldr	r3, [pc, #408]	; (8000c58 <fsm_clock+0x480>)
 8000ac0:	8b1b      	ldrh	r3, [r3, #24]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d105      	bne.n	8000ad2 <fsm_clock+0x2fa>
               saveTime[3] = 1;
 8000ac6:	4b67      	ldr	r3, [pc, #412]	; (8000c64 <fsm_clock+0x48c>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	70da      	strb	r2, [r3, #3]
            break;
 8000acc:	e001      	b.n	8000ad2 <fsm_clock+0x2fa>
        }
    }
 8000ace:	bf00      	nop
 8000ad0:	e000      	b.n	8000ad4 <fsm_clock+0x2fc>
            break;
 8000ad2:	bf00      	nop
    if (mode == MODE6)
 8000ad4:	4b64      	ldr	r3, [pc, #400]	; (8000c68 <fsm_clock+0x490>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b06      	cmp	r3, #6
 8000ada:	d149      	bne.n	8000b70 <fsm_clock+0x398>
    {
        switch (statusDATE_1)
 8000adc:	4b63      	ldr	r3, [pc, #396]	; (8000c6c <fsm_clock+0x494>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <fsm_clock+0x312>
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d004      	beq.n	8000af2 <fsm_clock+0x31a>
            break;
        case NORMAL:
            blinky(DATE);
            break;
        default:
            break;
 8000ae8:	e007      	b.n	8000afa <fsm_clock+0x322>
            statusDATE_1 = NORMAL;
 8000aea:	4b60      	ldr	r3, [pc, #384]	; (8000c6c <fsm_clock+0x494>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	601a      	str	r2, [r3, #0]
            break;
 8000af0:	e003      	b.n	8000afa <fsm_clock+0x322>
            blinky(DATE);
 8000af2:	2005      	movs	r0, #5
 8000af4:	f000 fd1c 	bl	8001530 <blinky>
            break;
 8000af8:	bf00      	nop
        }
        switch (statusDATE_2)
 8000afa:	4b5d      	ldr	r3, [pc, #372]	; (8000c70 <fsm_clock+0x498>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d002      	beq.n	8000b08 <fsm_clock+0x330>
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d004      	beq.n	8000b10 <fsm_clock+0x338>
                if (counterDate >= 32)
                    counterDate = 1;
            }
            break;
        default:
            break;
 8000b06:	e020      	b.n	8000b4a <fsm_clock+0x372>
            statusDATE_2 = NORMAL;
 8000b08:	4b59      	ldr	r3, [pc, #356]	; (8000c70 <fsm_clock+0x498>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]
            break;
 8000b0e:	e01c      	b.n	8000b4a <fsm_clock+0x372>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8000b10:	4b51      	ldr	r3, [pc, #324]	; (8000c58 <fsm_clock+0x480>)
 8000b12:	88db      	ldrh	r3, [r3, #6]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d00a      	beq.n	8000b2e <fsm_clock+0x356>
 8000b18:	4b4f      	ldr	r3, [pc, #316]	; (8000c58 <fsm_clock+0x480>)
 8000b1a:	88db      	ldrh	r3, [r3, #6]
 8000b1c:	2b28      	cmp	r3, #40	; 0x28
 8000b1e:	d913      	bls.n	8000b48 <fsm_clock+0x370>
 8000b20:	4b4d      	ldr	r3, [pc, #308]	; (8000c58 <fsm_clock+0x480>)
 8000b22:	88db      	ldrh	r3, [r3, #6]
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10c      	bne.n	8000b48 <fsm_clock+0x370>
                counterDate++;
 8000b2e:	4b51      	ldr	r3, [pc, #324]	; (8000c74 <fsm_clock+0x49c>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b4f      	ldr	r3, [pc, #316]	; (8000c74 <fsm_clock+0x49c>)
 8000b38:	701a      	strb	r2, [r3, #0]
                if (counterDate >= 32)
 8000b3a:	4b4e      	ldr	r3, [pc, #312]	; (8000c74 <fsm_clock+0x49c>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b1f      	cmp	r3, #31
 8000b40:	d902      	bls.n	8000b48 <fsm_clock+0x370>
                    counterDate = 1;
 8000b42:	4b4c      	ldr	r3, [pc, #304]	; (8000c74 <fsm_clock+0x49c>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
            break;
 8000b48:	bf00      	nop
        }
        switch (statusDATE_3)
 8000b4a:	4b4b      	ldr	r3, [pc, #300]	; (8000c78 <fsm_clock+0x4a0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <fsm_clock+0x380>
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d004      	beq.n	8000b60 <fsm_clock+0x388>
            {
                saveTime[4] = 1;
            }
            break;
        default:
            break;
 8000b56:	e00e      	b.n	8000b76 <fsm_clock+0x39e>
            statusDATE_3 = NORMAL;
 8000b58:	4b47      	ldr	r3, [pc, #284]	; (8000c78 <fsm_clock+0x4a0>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
            break;
 8000b5e:	e00a      	b.n	8000b76 <fsm_clock+0x39e>
            if (button_count[12] == 1)
 8000b60:	4b3d      	ldr	r3, [pc, #244]	; (8000c58 <fsm_clock+0x480>)
 8000b62:	8b1b      	ldrh	r3, [r3, #24]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d105      	bne.n	8000b74 <fsm_clock+0x39c>
                saveTime[4] = 1;
 8000b68:	4b3e      	ldr	r3, [pc, #248]	; (8000c64 <fsm_clock+0x48c>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	711a      	strb	r2, [r3, #4]
            break;
 8000b6e:	e001      	b.n	8000b74 <fsm_clock+0x39c>
        }
    }
 8000b70:	bf00      	nop
 8000b72:	e000      	b.n	8000b76 <fsm_clock+0x39e>
            break;
 8000b74:	bf00      	nop
    if (mode == MODE7)
 8000b76:	4b3c      	ldr	r3, [pc, #240]	; (8000c68 <fsm_clock+0x490>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b07      	cmp	r3, #7
 8000b7c:	d149      	bne.n	8000c12 <fsm_clock+0x43a>
    {
        switch (statusMONTH_1)
 8000b7e:	4b3f      	ldr	r3, [pc, #252]	; (8000c7c <fsm_clock+0x4a4>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d002      	beq.n	8000b8c <fsm_clock+0x3b4>
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d004      	beq.n	8000b94 <fsm_clock+0x3bc>
            break;
        case NORMAL:
            blinky(MONTH);
            break;
        default:
            break;
 8000b8a:	e007      	b.n	8000b9c <fsm_clock+0x3c4>
            statusMONTH_1 = NORMAL;
 8000b8c:	4b3b      	ldr	r3, [pc, #236]	; (8000c7c <fsm_clock+0x4a4>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	601a      	str	r2, [r3, #0]
            break;
 8000b92:	e003      	b.n	8000b9c <fsm_clock+0x3c4>
            blinky(MONTH);
 8000b94:	2006      	movs	r0, #6
 8000b96:	f000 fccb 	bl	8001530 <blinky>
            break;
 8000b9a:	bf00      	nop
        }
        switch (statusMONTH_2)
 8000b9c:	4b38      	ldr	r3, [pc, #224]	; (8000c80 <fsm_clock+0x4a8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <fsm_clock+0x3d2>
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d004      	beq.n	8000bb2 <fsm_clock+0x3da>
                if (counterMonth >= 13)
                    counterMonth = 1;
            }
            break;
        default:
            break;
 8000ba8:	e020      	b.n	8000bec <fsm_clock+0x414>
            statusMONTH_2 = NORMAL;
 8000baa:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <fsm_clock+0x4a8>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	601a      	str	r2, [r3, #0]
            break;
 8000bb0:	e01c      	b.n	8000bec <fsm_clock+0x414>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <fsm_clock+0x480>)
 8000bb4:	88db      	ldrh	r3, [r3, #6]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d00a      	beq.n	8000bd0 <fsm_clock+0x3f8>
 8000bba:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <fsm_clock+0x480>)
 8000bbc:	88db      	ldrh	r3, [r3, #6]
 8000bbe:	2b28      	cmp	r3, #40	; 0x28
 8000bc0:	d913      	bls.n	8000bea <fsm_clock+0x412>
 8000bc2:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <fsm_clock+0x480>)
 8000bc4:	88db      	ldrh	r3, [r3, #6]
 8000bc6:	f003 0303 	and.w	r3, r3, #3
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10c      	bne.n	8000bea <fsm_clock+0x412>
                counterMonth++;
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <fsm_clock+0x4ac>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <fsm_clock+0x4ac>)
 8000bda:	701a      	strb	r2, [r3, #0]
                if (counterMonth >= 13)
 8000bdc:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <fsm_clock+0x4ac>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b0c      	cmp	r3, #12
 8000be2:	d902      	bls.n	8000bea <fsm_clock+0x412>
                    counterMonth = 1;
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <fsm_clock+0x4ac>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
            break;
 8000bea:	bf00      	nop
        }
        switch (statusMONTH_3)
 8000bec:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <fsm_clock+0x4b0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <fsm_clock+0x422>
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d004      	beq.n	8000c02 <fsm_clock+0x42a>
            {
                saveTime[5] = 1;
            }
            break;
        default:
            break;
 8000bf8:	e00e      	b.n	8000c18 <fsm_clock+0x440>
            statusMONTH_3 = NORMAL;
 8000bfa:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <fsm_clock+0x4b0>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	601a      	str	r2, [r3, #0]
            break;
 8000c00:	e00a      	b.n	8000c18 <fsm_clock+0x440>
            if (button_count[12] == 1)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <fsm_clock+0x480>)
 8000c04:	8b1b      	ldrh	r3, [r3, #24]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d105      	bne.n	8000c16 <fsm_clock+0x43e>
                saveTime[5] = 1;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <fsm_clock+0x48c>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	715a      	strb	r2, [r3, #5]
            break;
 8000c10:	e001      	b.n	8000c16 <fsm_clock+0x43e>
        }
    }
 8000c12:	bf00      	nop
 8000c14:	e000      	b.n	8000c18 <fsm_clock+0x440>
            break;
 8000c16:	bf00      	nop
    if (mode == MODE8)
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <fsm_clock+0x490>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b08      	cmp	r3, #8
 8000c1e:	d169      	bne.n	8000cf4 <fsm_clock+0x51c>
    {
        switch (statusYEAR_1)
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <fsm_clock+0x4b4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d002      	beq.n	8000c2e <fsm_clock+0x456>
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d004      	beq.n	8000c36 <fsm_clock+0x45e>
            break;
        case NORMAL:
            blinky(YEAR);
            break;
        default:
            break;
 8000c2c:	e007      	b.n	8000c3e <fsm_clock+0x466>
            statusYEAR_1 = NORMAL;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <fsm_clock+0x4b4>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	601a      	str	r2, [r3, #0]
            break;
 8000c34:	e003      	b.n	8000c3e <fsm_clock+0x466>
            blinky(YEAR);
 8000c36:	2007      	movs	r0, #7
 8000c38:	f000 fc7a 	bl	8001530 <blinky>
            break;
 8000c3c:	bf00      	nop
        }
        switch (statusYEAR_2)
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <fsm_clock+0x4b8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <fsm_clock+0x474>
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d024      	beq.n	8000c94 <fsm_clock+0x4bc>
                if (counterYear >= 100)
                    counterYear = 0;
            }
            break;
        default:
            break;
 8000c4a:	e040      	b.n	8000cce <fsm_clock+0x4f6>
            statusYEAR_2 = NORMAL;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <fsm_clock+0x4b8>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	601a      	str	r2, [r3, #0]
            break;
 8000c52:	e03c      	b.n	8000cce <fsm_clock+0x4f6>
 8000c54:	200000ec 	.word	0x200000ec
 8000c58:	20000030 	.word	0x20000030
 8000c5c:	2000013f 	.word	0x2000013f
 8000c60:	200000f0 	.word	0x200000f0
 8000c64:	2000014c 	.word	0x2000014c
 8000c68:	20000134 	.word	0x20000134
 8000c6c:	200000f4 	.word	0x200000f4
 8000c70:	200000f8 	.word	0x200000f8
 8000c74:	20000140 	.word	0x20000140
 8000c78:	200000fc 	.word	0x200000fc
 8000c7c:	20000100 	.word	0x20000100
 8000c80:	20000104 	.word	0x20000104
 8000c84:	20000141 	.word	0x20000141
 8000c88:	20000108 	.word	0x20000108
 8000c8c:	2000010c 	.word	0x2000010c
 8000c90:	20000110 	.word	0x20000110
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8000c94:	4b88      	ldr	r3, [pc, #544]	; (8000eb8 <fsm_clock+0x6e0>)
 8000c96:	88db      	ldrh	r3, [r3, #6]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d00a      	beq.n	8000cb2 <fsm_clock+0x4da>
 8000c9c:	4b86      	ldr	r3, [pc, #536]	; (8000eb8 <fsm_clock+0x6e0>)
 8000c9e:	88db      	ldrh	r3, [r3, #6]
 8000ca0:	2b28      	cmp	r3, #40	; 0x28
 8000ca2:	d913      	bls.n	8000ccc <fsm_clock+0x4f4>
 8000ca4:	4b84      	ldr	r3, [pc, #528]	; (8000eb8 <fsm_clock+0x6e0>)
 8000ca6:	88db      	ldrh	r3, [r3, #6]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10c      	bne.n	8000ccc <fsm_clock+0x4f4>
                counterYear++;
 8000cb2:	4b82      	ldr	r3, [pc, #520]	; (8000ebc <fsm_clock+0x6e4>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b80      	ldr	r3, [pc, #512]	; (8000ebc <fsm_clock+0x6e4>)
 8000cbc:	701a      	strb	r2, [r3, #0]
                if (counterYear >= 100)
 8000cbe:	4b7f      	ldr	r3, [pc, #508]	; (8000ebc <fsm_clock+0x6e4>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b63      	cmp	r3, #99	; 0x63
 8000cc4:	d902      	bls.n	8000ccc <fsm_clock+0x4f4>
                    counterYear = 0;
 8000cc6:	4b7d      	ldr	r3, [pc, #500]	; (8000ebc <fsm_clock+0x6e4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
            break;
 8000ccc:	bf00      	nop
        }
        switch (statusYEAR_3)
 8000cce:	4b7c      	ldr	r3, [pc, #496]	; (8000ec0 <fsm_clock+0x6e8>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <fsm_clock+0x504>
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d004      	beq.n	8000ce4 <fsm_clock+0x50c>
            {
                saveTime[6] = 1;
            }
            break;
        default:
            break;
 8000cda:	e00e      	b.n	8000cfa <fsm_clock+0x522>
            statusYEAR_3 = NORMAL;
 8000cdc:	4b78      	ldr	r3, [pc, #480]	; (8000ec0 <fsm_clock+0x6e8>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]
            break;
 8000ce2:	e00a      	b.n	8000cfa <fsm_clock+0x522>
            if (button_count[12] == 1)
 8000ce4:	4b74      	ldr	r3, [pc, #464]	; (8000eb8 <fsm_clock+0x6e0>)
 8000ce6:	8b1b      	ldrh	r3, [r3, #24]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d105      	bne.n	8000cf8 <fsm_clock+0x520>
                saveTime[6] = 1;
 8000cec:	4b75      	ldr	r3, [pc, #468]	; (8000ec4 <fsm_clock+0x6ec>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	719a      	strb	r2, [r3, #6]
            break;
 8000cf2:	e001      	b.n	8000cf8 <fsm_clock+0x520>
        }
    }
 8000cf4:	bf00      	nop
 8000cf6:	e000      	b.n	8000cfa <fsm_clock+0x522>
            break;
 8000cf8:	bf00      	nop

    switch (mode)
 8000cfa:	4b73      	ldr	r3, [pc, #460]	; (8000ec8 <fsm_clock+0x6f0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	f200 80c5 	bhi.w	8000e90 <fsm_clock+0x6b8>
 8000d06:	a201      	add	r2, pc, #4	; (adr r2, 8000d0c <fsm_clock+0x534>)
 8000d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0c:	08000d2d 	.word	0x08000d2d
 8000d10:	08000d43 	.word	0x08000d43
 8000d14:	08000d73 	.word	0x08000d73
 8000d18:	08000da3 	.word	0x08000da3
 8000d1c:	08000dd1 	.word	0x08000dd1
 8000d20:	08000dff 	.word	0x08000dff
 8000d24:	08000e2d 	.word	0x08000e2d
 8000d28:	08000e5b 	.word	0x08000e5b
    {
    case MODE1:
        if (button_count[0] == 1)
 8000d2c:	4b62      	ldr	r3, [pc, #392]	; (8000eb8 <fsm_clock+0x6e0>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	f040 80af 	bne.w	8000e94 <fsm_clock+0x6bc>
        {
            mode = MODE2;
 8000d36:	4b64      	ldr	r3, [pc, #400]	; (8000ec8 <fsm_clock+0x6f0>)
 8000d38:	2202      	movs	r2, #2
 8000d3a:	601a      	str	r2, [r3, #0]
            init_counter();
 8000d3c:	f000 fba0 	bl	8001480 <init_counter>
        }
        break;
 8000d40:	e0a8      	b.n	8000e94 <fsm_clock+0x6bc>

    case MODE2:
        if (button_count[0] == 1)
 8000d42:	4b5d      	ldr	r3, [pc, #372]	; (8000eb8 <fsm_clock+0x6e0>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	f040 80a6 	bne.w	8000e98 <fsm_clock+0x6c0>
        {
            mode = MODE3;
 8000d4c:	4b5e      	ldr	r3, [pc, #376]	; (8000ec8 <fsm_clock+0x6f0>)
 8000d4e:	2203      	movs	r2, #3
 8000d50:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(70, 100, counterHour, 2, GREEN, BLACK, 24);
 8000d52:	4b5e      	ldr	r3, [pc, #376]	; (8000ecc <fsm_clock+0x6f4>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	2318      	movs	r3, #24
 8000d5a:	9302      	str	r3, [sp, #8]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	9301      	str	r3, [sp, #4]
 8000d60:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2302      	movs	r3, #2
 8000d68:	2164      	movs	r1, #100	; 0x64
 8000d6a:	2046      	movs	r0, #70	; 0x46
 8000d6c:	f001 fa86 	bl	800227c <lcd_ShowIntNum>
        }
        break;
 8000d70:	e092      	b.n	8000e98 <fsm_clock+0x6c0>
    case MODE3:
        if (button_count[0] == 1)
 8000d72:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <fsm_clock+0x6e0>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	f040 8090 	bne.w	8000e9c <fsm_clock+0x6c4>
        {
            mode = MODE4;
 8000d7c:	4b52      	ldr	r3, [pc, #328]	; (8000ec8 <fsm_clock+0x6f0>)
 8000d7e:	2204      	movs	r2, #4
 8000d80:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(110, 100, counterMin, 2, GREEN, BLACK, 24);
 8000d82:	4b53      	ldr	r3, [pc, #332]	; (8000ed0 <fsm_clock+0x6f8>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	2318      	movs	r3, #24
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2302      	movs	r3, #2
 8000d98:	2164      	movs	r1, #100	; 0x64
 8000d9a:	206e      	movs	r0, #110	; 0x6e
 8000d9c:	f001 fa6e 	bl	800227c <lcd_ShowIntNum>
        }
        break;
 8000da0:	e07c      	b.n	8000e9c <fsm_clock+0x6c4>
    case MODE4:
        if (button_count[0] == 1)
 8000da2:	4b45      	ldr	r3, [pc, #276]	; (8000eb8 <fsm_clock+0x6e0>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d17a      	bne.n	8000ea0 <fsm_clock+0x6c8>
        {
            mode = MODE5;
 8000daa:	4b47      	ldr	r3, [pc, #284]	; (8000ec8 <fsm_clock+0x6f0>)
 8000dac:	2205      	movs	r2, #5
 8000dae:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(150, 100, counterSec, 2, GREEN, BLACK, 24);
 8000db0:	4b48      	ldr	r3, [pc, #288]	; (8000ed4 <fsm_clock+0x6fc>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	2318      	movs	r3, #24
 8000db8:	9302      	str	r3, [sp, #8]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	9301      	str	r3, [sp, #4]
 8000dbe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	2164      	movs	r1, #100	; 0x64
 8000dc8:	2096      	movs	r0, #150	; 0x96
 8000dca:	f001 fa57 	bl	800227c <lcd_ShowIntNum>
        }
        break;
 8000dce:	e067      	b.n	8000ea0 <fsm_clock+0x6c8>
    case MODE5:
        if (button_count[0] == 1)
 8000dd0:	4b39      	ldr	r3, [pc, #228]	; (8000eb8 <fsm_clock+0x6e0>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d165      	bne.n	8000ea4 <fsm_clock+0x6cc>
        {
            mode = MODE6;
 8000dd8:	4b3b      	ldr	r3, [pc, #236]	; (8000ec8 <fsm_clock+0x6f0>)
 8000dda:	2206      	movs	r2, #6
 8000ddc:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(20, 130, counterDay, 2, YELLOW, BLACK, 24);
 8000dde:	4b3e      	ldr	r3, [pc, #248]	; (8000ed8 <fsm_clock+0x700>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	2318      	movs	r3, #24
 8000de6:	9302      	str	r3, [sp, #8]
 8000de8:	2300      	movs	r3, #0
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2302      	movs	r3, #2
 8000df4:	2182      	movs	r1, #130	; 0x82
 8000df6:	2014      	movs	r0, #20
 8000df8:	f001 fa40 	bl	800227c <lcd_ShowIntNum>
        }
        break;
 8000dfc:	e052      	b.n	8000ea4 <fsm_clock+0x6cc>
    case MODE6:
        if (button_count[0] == 1)
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <fsm_clock+0x6e0>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d150      	bne.n	8000ea8 <fsm_clock+0x6d0>
        {
            mode = MODE7;
 8000e06:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <fsm_clock+0x6f0>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(70, 130, counterDate, 2, YELLOW, BLACK, 24);
 8000e0c:	4b33      	ldr	r3, [pc, #204]	; (8000edc <fsm_clock+0x704>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	2318      	movs	r3, #24
 8000e14:	9302      	str	r3, [sp, #8]
 8000e16:	2300      	movs	r3, #0
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2302      	movs	r3, #2
 8000e22:	2182      	movs	r1, #130	; 0x82
 8000e24:	2046      	movs	r0, #70	; 0x46
 8000e26:	f001 fa29 	bl	800227c <lcd_ShowIntNum>
        }
        break;
 8000e2a:	e03d      	b.n	8000ea8 <fsm_clock+0x6d0>
    case MODE7:
        if (button_count[0] == 1)
 8000e2c:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <fsm_clock+0x6e0>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d13b      	bne.n	8000eac <fsm_clock+0x6d4>
        {
            mode = MODE8;
 8000e34:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <fsm_clock+0x6f0>)
 8000e36:	2208      	movs	r2, #8
 8000e38:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(110, 130, counterMonth, 2, YELLOW, BLACK, 24);
 8000e3a:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <fsm_clock+0x708>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	2318      	movs	r3, #24
 8000e42:	9302      	str	r3, [sp, #8]
 8000e44:	2300      	movs	r3, #0
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	2302      	movs	r3, #2
 8000e50:	2182      	movs	r1, #130	; 0x82
 8000e52:	206e      	movs	r0, #110	; 0x6e
 8000e54:	f001 fa12 	bl	800227c <lcd_ShowIntNum>
        }
        break;
 8000e58:	e028      	b.n	8000eac <fsm_clock+0x6d4>
    case MODE8:
        if (button_count[0] == 1)
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <fsm_clock+0x6e0>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d126      	bne.n	8000eb0 <fsm_clock+0x6d8>
        {
            writeSaveTime();
 8000e62:	f000 fe4f 	bl	8001b04 <writeSaveTime>
            mode = MODE1;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <fsm_clock+0x6f0>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(150, 130, counterYear, 2, YELLOW, BLACK, 24);
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <fsm_clock+0x6e4>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	2318      	movs	r3, #24
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	2300      	movs	r3, #0
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2302      	movs	r3, #2
 8000e82:	2182      	movs	r1, #130	; 0x82
 8000e84:	2096      	movs	r0, #150	; 0x96
 8000e86:	f001 f9f9 	bl	800227c <lcd_ShowIntNum>
            resetSaveTime();
 8000e8a:	f000 fe21 	bl	8001ad0 <resetSaveTime>
        }
        break;
 8000e8e:	e00f      	b.n	8000eb0 <fsm_clock+0x6d8>
    default:
        break;
 8000e90:	bf00      	nop
 8000e92:	e00e      	b.n	8000eb2 <fsm_clock+0x6da>
        break;
 8000e94:	bf00      	nop
 8000e96:	e00c      	b.n	8000eb2 <fsm_clock+0x6da>
        break;
 8000e98:	bf00      	nop
 8000e9a:	e00a      	b.n	8000eb2 <fsm_clock+0x6da>
        break;
 8000e9c:	bf00      	nop
 8000e9e:	e008      	b.n	8000eb2 <fsm_clock+0x6da>
        break;
 8000ea0:	bf00      	nop
 8000ea2:	e006      	b.n	8000eb2 <fsm_clock+0x6da>
        break;
 8000ea4:	bf00      	nop
 8000ea6:	e004      	b.n	8000eb2 <fsm_clock+0x6da>
        break;
 8000ea8:	bf00      	nop
 8000eaa:	e002      	b.n	8000eb2 <fsm_clock+0x6da>
        break;
 8000eac:	bf00      	nop
 8000eae:	e000      	b.n	8000eb2 <fsm_clock+0x6da>
        break;
 8000eb0:	bf00      	nop
    }
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000030 	.word	0x20000030
 8000ebc:	20000142 	.word	0x20000142
 8000ec0:	20000114 	.word	0x20000114
 8000ec4:	2000014c 	.word	0x2000014c
 8000ec8:	20000134 	.word	0x20000134
 8000ecc:	2000013e 	.word	0x2000013e
 8000ed0:	2000013d 	.word	0x2000013d
 8000ed4:	2000013c 	.word	0x2000013c
 8000ed8:	2000013f 	.word	0x2000013f
 8000edc:	20000140 	.word	0x20000140
 8000ee0:	20000141 	.word	0x20000141

08000ee4 <fsm_alarm>:
 *  Created on: Nov 15, 2023
 *      Author: quoct
 */
#include "fsm_alarm.h"
void fsm_alarm(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af04      	add	r7, sp, #16
    if (mode_alarm == ALARM_MODE1)
 8000eea:	4b92      	ldr	r3, [pc, #584]	; (8001134 <fsm_alarm+0x250>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b0a      	cmp	r3, #10
 8000ef0:	d12a      	bne.n	8000f48 <fsm_alarm+0x64>
    {
        switch (statusNORMAL_ALARM)
 8000ef2:	4b91      	ldr	r3, [pc, #580]	; (8001138 <fsm_alarm+0x254>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <fsm_alarm+0x1c>
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d004      	beq.n	8000f08 <fsm_alarm+0x24>
            if(ds3231_alarm_hour == ds3231_hours && ds3231_alarm_min == ds3231_min){
                alert();
            }
            break;
        default:
            break;
 8000efe:	e026      	b.n	8000f4e <fsm_alarm+0x6a>
            statusNORMAL_ALARM = NORMAL;
 8000f00:	4b8d      	ldr	r3, [pc, #564]	; (8001138 <fsm_alarm+0x254>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
            break;
 8000f06:	e022      	b.n	8000f4e <fsm_alarm+0x6a>
            lcd_StrCenter(0, 180, "ALARM(HH:MM)", BLUE, WHITE, 16, 1);
 8000f08:	2301      	movs	r3, #1
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	231f      	movs	r3, #31
 8000f18:	4a88      	ldr	r2, [pc, #544]	; (800113c <fsm_alarm+0x258>)
 8000f1a:	21b4      	movs	r1, #180	; 0xb4
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f001 fc13 	bl	8002748 <lcd_StrCenter>
            ds3231_ReadAlarm();
 8000f22:	f7ff fc2d 	bl	8000780 <ds3231_ReadAlarm>
            displayAlarm();
 8000f26:	f000 fd67 	bl	80019f8 <displayAlarm>
            if(ds3231_alarm_hour == ds3231_hours && ds3231_alarm_min == ds3231_min){
 8000f2a:	4b85      	ldr	r3, [pc, #532]	; (8001140 <fsm_alarm+0x25c>)
 8000f2c:	781a      	ldrb	r2, [r3, #0]
 8000f2e:	4b85      	ldr	r3, [pc, #532]	; (8001144 <fsm_alarm+0x260>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d10a      	bne.n	8000f4c <fsm_alarm+0x68>
 8000f36:	4b84      	ldr	r3, [pc, #528]	; (8001148 <fsm_alarm+0x264>)
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	4b84      	ldr	r3, [pc, #528]	; (800114c <fsm_alarm+0x268>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d104      	bne.n	8000f4c <fsm_alarm+0x68>
                alert();
 8000f42:	f000 fd8b 	bl	8001a5c <alert>
            break;
 8000f46:	e001      	b.n	8000f4c <fsm_alarm+0x68>
        }
    }
 8000f48:	bf00      	nop
 8000f4a:	e000      	b.n	8000f4e <fsm_alarm+0x6a>
            break;
 8000f4c:	bf00      	nop
    if (mode_alarm == ALARM_MODE2)
 8000f4e:	4b79      	ldr	r3, [pc, #484]	; (8001134 <fsm_alarm+0x250>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b0b      	cmp	r3, #11
 8000f54:	d14c      	bne.n	8000ff0 <fsm_alarm+0x10c>
    {
        switch (statusHOUR_ALARM_1)
 8000f56:	4b7e      	ldr	r3, [pc, #504]	; (8001150 <fsm_alarm+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <fsm_alarm+0x80>
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d004      	beq.n	8000f6c <fsm_alarm+0x88>
            break;
        case NORMAL:
            blinkyAlarm(HOUR_A);
            break;
        default:
            break;
 8000f62:	e007      	b.n	8000f74 <fsm_alarm+0x90>
            statusHOUR_ALARM_1 = NORMAL;
 8000f64:	4b7a      	ldr	r3, [pc, #488]	; (8001150 <fsm_alarm+0x26c>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
            break;
 8000f6a:	e003      	b.n	8000f74 <fsm_alarm+0x90>
            blinkyAlarm(HOUR_A);
 8000f6c:	200a      	movs	r0, #10
 8000f6e:	f000 fc27 	bl	80017c0 <blinkyAlarm>
            break;
 8000f72:	bf00      	nop
        }
        switch (statusHOUR_ALARM_2)
 8000f74:	4b77      	ldr	r3, [pc, #476]	; (8001154 <fsm_alarm+0x270>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <fsm_alarm+0x9e>
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d004      	beq.n	8000f8a <fsm_alarm+0xa6>
                if (counterHour_Alarm >= 24)
                    counterHour_Alarm = 0;
            }
            break;
        default:
            break;
 8000f80:	e020      	b.n	8000fc4 <fsm_alarm+0xe0>
            statusHOUR_ALARM_2 = NORMAL;
 8000f82:	4b74      	ldr	r3, [pc, #464]	; (8001154 <fsm_alarm+0x270>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]
            break;
 8000f88:	e01c      	b.n	8000fc4 <fsm_alarm+0xe0>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8000f8a:	4b73      	ldr	r3, [pc, #460]	; (8001158 <fsm_alarm+0x274>)
 8000f8c:	88db      	ldrh	r3, [r3, #6]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d00a      	beq.n	8000fa8 <fsm_alarm+0xc4>
 8000f92:	4b71      	ldr	r3, [pc, #452]	; (8001158 <fsm_alarm+0x274>)
 8000f94:	88db      	ldrh	r3, [r3, #6]
 8000f96:	2b28      	cmp	r3, #40	; 0x28
 8000f98:	d913      	bls.n	8000fc2 <fsm_alarm+0xde>
 8000f9a:	4b6f      	ldr	r3, [pc, #444]	; (8001158 <fsm_alarm+0x274>)
 8000f9c:	88db      	ldrh	r3, [r3, #6]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10c      	bne.n	8000fc2 <fsm_alarm+0xde>
                counterHour_Alarm++;
 8000fa8:	4b6c      	ldr	r3, [pc, #432]	; (800115c <fsm_alarm+0x278>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b6a      	ldr	r3, [pc, #424]	; (800115c <fsm_alarm+0x278>)
 8000fb2:	701a      	strb	r2, [r3, #0]
                if (counterHour_Alarm >= 24)
 8000fb4:	4b69      	ldr	r3, [pc, #420]	; (800115c <fsm_alarm+0x278>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b17      	cmp	r3, #23
 8000fba:	d902      	bls.n	8000fc2 <fsm_alarm+0xde>
                    counterHour_Alarm = 0;
 8000fbc:	4b67      	ldr	r3, [pc, #412]	; (800115c <fsm_alarm+0x278>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
            break;
 8000fc2:	bf00      	nop
        }
        switch (statusHOUR_ALARM_3)
 8000fc4:	4b66      	ldr	r3, [pc, #408]	; (8001160 <fsm_alarm+0x27c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <fsm_alarm+0xee>
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d004      	beq.n	8000fda <fsm_alarm+0xf6>
            {
                ds3231_Write(ADDRESS_HOUR_ALARM, counterHour_Alarm);
            }
            break;
        default:
            break;
 8000fd0:	e011      	b.n	8000ff6 <fsm_alarm+0x112>
            statusHOUR_ALARM_3 = NORMAL;
 8000fd2:	4b63      	ldr	r3, [pc, #396]	; (8001160 <fsm_alarm+0x27c>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
            break;
 8000fd8:	e00d      	b.n	8000ff6 <fsm_alarm+0x112>
            if (button_count[12] == 1)
 8000fda:	4b5f      	ldr	r3, [pc, #380]	; (8001158 <fsm_alarm+0x274>)
 8000fdc:	8b1b      	ldrh	r3, [r3, #24]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d108      	bne.n	8000ff4 <fsm_alarm+0x110>
                ds3231_Write(ADDRESS_HOUR_ALARM, counterHour_Alarm);
 8000fe2:	4b5e      	ldr	r3, [pc, #376]	; (800115c <fsm_alarm+0x278>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	2009      	movs	r0, #9
 8000fea:	f7ff fb43 	bl	8000674 <ds3231_Write>
            break;
 8000fee:	e001      	b.n	8000ff4 <fsm_alarm+0x110>
        }
    }
 8000ff0:	bf00      	nop
 8000ff2:	e000      	b.n	8000ff6 <fsm_alarm+0x112>
            break;
 8000ff4:	bf00      	nop
    if (mode_alarm == ALARM_MODE3)
 8000ff6:	4b4f      	ldr	r3, [pc, #316]	; (8001134 <fsm_alarm+0x250>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b0c      	cmp	r3, #12
 8000ffc:	d14c      	bne.n	8001098 <fsm_alarm+0x1b4>
    {
        switch (statusMIN_ALARM_1)
 8000ffe:	4b59      	ldr	r3, [pc, #356]	; (8001164 <fsm_alarm+0x280>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <fsm_alarm+0x128>
 8001006:	2b01      	cmp	r3, #1
 8001008:	d004      	beq.n	8001014 <fsm_alarm+0x130>
            break;
        case NORMAL:
            blinkyAlarm(MIN_A);
            break;
        default:
            break;
 800100a:	e007      	b.n	800101c <fsm_alarm+0x138>
            statusMIN_ALARM_1 = NORMAL;
 800100c:	4b55      	ldr	r3, [pc, #340]	; (8001164 <fsm_alarm+0x280>)
 800100e:	2201      	movs	r2, #1
 8001010:	601a      	str	r2, [r3, #0]
            break;
 8001012:	e003      	b.n	800101c <fsm_alarm+0x138>
            blinkyAlarm(MIN_A);
 8001014:	200b      	movs	r0, #11
 8001016:	f000 fbd3 	bl	80017c0 <blinkyAlarm>
            break;
 800101a:	bf00      	nop
        }
        switch (statusMIN_ALARM_2)
 800101c:	4b52      	ldr	r3, [pc, #328]	; (8001168 <fsm_alarm+0x284>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <fsm_alarm+0x146>
 8001024:	2b01      	cmp	r3, #1
 8001026:	d004      	beq.n	8001032 <fsm_alarm+0x14e>
                if (counterMin_Alarm >= 60)
                    counterMin_Alarm = 0;
            }
            break;
        default:
            break;
 8001028:	e020      	b.n	800106c <fsm_alarm+0x188>
            statusMIN_ALARM_2 = NORMAL;
 800102a:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <fsm_alarm+0x284>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
            break;
 8001030:	e01c      	b.n	800106c <fsm_alarm+0x188>
            if (button_count[3] == 1 || (button_count[3] > 40 && button_count[3] % 4 == 0))
 8001032:	4b49      	ldr	r3, [pc, #292]	; (8001158 <fsm_alarm+0x274>)
 8001034:	88db      	ldrh	r3, [r3, #6]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d00a      	beq.n	8001050 <fsm_alarm+0x16c>
 800103a:	4b47      	ldr	r3, [pc, #284]	; (8001158 <fsm_alarm+0x274>)
 800103c:	88db      	ldrh	r3, [r3, #6]
 800103e:	2b28      	cmp	r3, #40	; 0x28
 8001040:	d913      	bls.n	800106a <fsm_alarm+0x186>
 8001042:	4b45      	ldr	r3, [pc, #276]	; (8001158 <fsm_alarm+0x274>)
 8001044:	88db      	ldrh	r3, [r3, #6]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	b29b      	uxth	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10c      	bne.n	800106a <fsm_alarm+0x186>
                counterMin_Alarm++;
 8001050:	4b46      	ldr	r3, [pc, #280]	; (800116c <fsm_alarm+0x288>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b44      	ldr	r3, [pc, #272]	; (800116c <fsm_alarm+0x288>)
 800105a:	701a      	strb	r2, [r3, #0]
                if (counterMin_Alarm >= 60)
 800105c:	4b43      	ldr	r3, [pc, #268]	; (800116c <fsm_alarm+0x288>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b3b      	cmp	r3, #59	; 0x3b
 8001062:	d902      	bls.n	800106a <fsm_alarm+0x186>
                    counterMin_Alarm = 0;
 8001064:	4b41      	ldr	r3, [pc, #260]	; (800116c <fsm_alarm+0x288>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
            break;
 800106a:	bf00      	nop
        }
        switch (statusMIN_ALARM_3)
 800106c:	4b40      	ldr	r3, [pc, #256]	; (8001170 <fsm_alarm+0x28c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <fsm_alarm+0x196>
 8001074:	2b01      	cmp	r3, #1
 8001076:	d004      	beq.n	8001082 <fsm_alarm+0x19e>
            {
                ds3231_Write(ADDRESS_MIN_ALARM, counterMin_Alarm);
            }
            break;
        default:
            break;
 8001078:	e011      	b.n	800109e <fsm_alarm+0x1ba>
            statusMIN_ALARM_3 = NORMAL;
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <fsm_alarm+0x28c>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]
            break;
 8001080:	e00d      	b.n	800109e <fsm_alarm+0x1ba>
            if (button_count[12] == 1)
 8001082:	4b35      	ldr	r3, [pc, #212]	; (8001158 <fsm_alarm+0x274>)
 8001084:	8b1b      	ldrh	r3, [r3, #24]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d108      	bne.n	800109c <fsm_alarm+0x1b8>
                ds3231_Write(ADDRESS_MIN_ALARM, counterMin_Alarm);
 800108a:	4b38      	ldr	r3, [pc, #224]	; (800116c <fsm_alarm+0x288>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	4619      	mov	r1, r3
 8001090:	2008      	movs	r0, #8
 8001092:	f7ff faef 	bl	8000674 <ds3231_Write>
            break;
 8001096:	e001      	b.n	800109c <fsm_alarm+0x1b8>
        }
    }
 8001098:	bf00      	nop
 800109a:	e000      	b.n	800109e <fsm_alarm+0x1ba>
            break;
 800109c:	bf00      	nop

    switch (mode_alarm)
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <fsm_alarm+0x250>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b0c      	cmp	r3, #12
 80010a4:	d026      	beq.n	80010f4 <fsm_alarm+0x210>
 80010a6:	2b0c      	cmp	r3, #12
 80010a8:	dc3a      	bgt.n	8001120 <fsm_alarm+0x23c>
 80010aa:	2b0a      	cmp	r3, #10
 80010ac:	d002      	beq.n	80010b4 <fsm_alarm+0x1d0>
 80010ae:	2b0b      	cmp	r3, #11
 80010b0:	d00a      	beq.n	80010c8 <fsm_alarm+0x1e4>
            mode_alarm = ALARM_MODE1;
            lcd_ShowIntNum(110, 200, counterMin_Alarm, 2, BLUE, BLACK, 24);
        }
        break;
    default:
        break;
 80010b2:	e035      	b.n	8001120 <fsm_alarm+0x23c>
        if (button_count[4] == 1)
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <fsm_alarm+0x274>)
 80010b6:	891b      	ldrh	r3, [r3, #8]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d133      	bne.n	8001124 <fsm_alarm+0x240>
            mode_alarm = ALARM_MODE2;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <fsm_alarm+0x250>)
 80010be:	220b      	movs	r2, #11
 80010c0:	601a      	str	r2, [r3, #0]
            init_counter_alarm();
 80010c2:	f000 fa1d 	bl	8001500 <init_counter_alarm>
        break;
 80010c6:	e02d      	b.n	8001124 <fsm_alarm+0x240>
        if (button_count[4] == 1)
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <fsm_alarm+0x274>)
 80010ca:	891b      	ldrh	r3, [r3, #8]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d12b      	bne.n	8001128 <fsm_alarm+0x244>
            mode_alarm = ALARM_MODE3;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <fsm_alarm+0x250>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(70, 200, counterHour_Alarm, 2, BLUE, BLACK, 24);
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <fsm_alarm+0x278>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	2318      	movs	r3, #24
 80010de:	9302      	str	r3, [sp, #8]
 80010e0:	2300      	movs	r3, #0
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	231f      	movs	r3, #31
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2302      	movs	r3, #2
 80010ea:	21c8      	movs	r1, #200	; 0xc8
 80010ec:	2046      	movs	r0, #70	; 0x46
 80010ee:	f001 f8c5 	bl	800227c <lcd_ShowIntNum>
        break;
 80010f2:	e019      	b.n	8001128 <fsm_alarm+0x244>
        if (button_count[4] == 1)
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <fsm_alarm+0x274>)
 80010f6:	891b      	ldrh	r3, [r3, #8]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d117      	bne.n	800112c <fsm_alarm+0x248>
            mode_alarm = ALARM_MODE1;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <fsm_alarm+0x250>)
 80010fe:	220a      	movs	r2, #10
 8001100:	601a      	str	r2, [r3, #0]
            lcd_ShowIntNum(110, 200, counterMin_Alarm, 2, BLUE, BLACK, 24);
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <fsm_alarm+0x288>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b29a      	uxth	r2, r3
 8001108:	2318      	movs	r3, #24
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	2300      	movs	r3, #0
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	231f      	movs	r3, #31
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2302      	movs	r3, #2
 8001116:	21c8      	movs	r1, #200	; 0xc8
 8001118:	206e      	movs	r0, #110	; 0x6e
 800111a:	f001 f8af 	bl	800227c <lcd_ShowIntNum>
        break;
 800111e:	e005      	b.n	800112c <fsm_alarm+0x248>
        break;
 8001120:	bf00      	nop
 8001122:	e004      	b.n	800112e <fsm_alarm+0x24a>
        break;
 8001124:	bf00      	nop
 8001126:	e002      	b.n	800112e <fsm_alarm+0x24a>
        break;
 8001128:	bf00      	nop
 800112a:	e000      	b.n	800112e <fsm_alarm+0x24a>
        break;
 800112c:	bf00      	nop
    }
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000138 	.word	0x20000138
 8001138:	20000118 	.word	0x20000118
 800113c:	08006710 	.word	0x08006710
 8001140:	20000066 	.word	0x20000066
 8001144:	2000005f 	.word	0x2000005f
 8001148:	20000067 	.word	0x20000067
 800114c:	20000060 	.word	0x20000060
 8001150:	2000011c 	.word	0x2000011c
 8001154:	20000120 	.word	0x20000120
 8001158:	20000030 	.word	0x20000030
 800115c:	20000143 	.word	0x20000143
 8001160:	20000124 	.word	0x20000124
 8001164:	20000128 	.word	0x20000128
 8001168:	2000012c 	.word	0x2000012c
 800116c:	20000144 	.word	0x20000144
 8001170:	20000130 	.word	0x20000130

08001174 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	; 0x38
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800118e:	463b      	mov	r3, r7
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
 800119c:	615a      	str	r2, [r3, #20]
 800119e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80011a0:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <MX_FSMC_Init+0xec>)
 80011a2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80011a6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <MX_FSMC_Init+0xec>)
 80011aa:	4a2e      	ldr	r2, [pc, #184]	; (8001264 <MX_FSMC_Init+0xf0>)
 80011ac:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80011ae:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <MX_FSMC_Init+0xec>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80011b4:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <MX_FSMC_Init+0xec>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80011ba:	4b29      	ldr	r3, [pc, #164]	; (8001260 <MX_FSMC_Init+0xec>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <MX_FSMC_Init+0xec>)
 80011c2:	2210      	movs	r2, #16
 80011c4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <MX_FSMC_Init+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <MX_FSMC_Init+0xec>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <MX_FSMC_Init+0xec>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <MX_FSMC_Init+0xec>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <MX_FSMC_Init+0xec>)
 80011e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <MX_FSMC_Init+0xec>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <MX_FSMC_Init+0xec>)
 80011ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_FSMC_Init+0xec>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <MX_FSMC_Init+0xec>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <MX_FSMC_Init+0xec>)
 8001202:	2200      	movs	r2, #0
 8001204:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001206:	230f      	movs	r3, #15
 8001208:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800120a:	230f      	movs	r3, #15
 800120c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800120e:	233c      	movs	r3, #60	; 0x3c
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001216:	2310      	movs	r3, #16
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800121a:	2311      	movs	r3, #17
 800121c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800121e:	2300      	movs	r3, #0
 8001220:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001222:	2308      	movs	r3, #8
 8001224:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001226:	230f      	movs	r3, #15
 8001228:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800122a:	2309      	movs	r3, #9
 800122c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001232:	2310      	movs	r3, #16
 8001234:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001236:	2311      	movs	r3, #17
 8001238:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800123e:	463a      	mov	r2, r7
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <MX_FSMC_Init+0xec>)
 8001248:	f004 fc94 	bl	8005b74 <HAL_SRAM_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001252:	f001 fbfb 	bl	8002a4c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001256:	bf00      	nop
 8001258:	3738      	adds	r7, #56	; 0x38
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000068 	.word	0x20000068
 8001264:	a0000104 	.word	0xa0000104

08001268 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <HAL_FSMC_MspInit+0x88>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d131      	bne.n	80012e8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_FSMC_MspInit+0x88>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_FSMC_MspInit+0x8c>)
 8001290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001292:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <HAL_FSMC_MspInit+0x8c>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6393      	str	r3, [r2, #56]	; 0x38
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_FSMC_MspInit+0x8c>)
 800129c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80012a6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80012aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012b8:	230c      	movs	r3, #12
 80012ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <HAL_FSMC_MspInit+0x90>)
 80012c2:	f001 ff87 	bl	80031d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80012c6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80012ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012d8:	230c      	movs	r3, #12
 80012da:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4806      	ldr	r0, [pc, #24]	; (80012fc <HAL_FSMC_MspInit+0x94>)
 80012e2:	f001 ff77 	bl	80031d4 <HAL_GPIO_Init>
 80012e6:	e000      	b.n	80012ea <HAL_FSMC_MspInit+0x82>
    return;
 80012e8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200000b8 	.word	0x200000b8
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40020c00 	.word	0x40020c00

08001300 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001308:	f7ff ffae 	bl	8001268 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <init_value>:
uint8_t counter_alert2 = 0;

uint8_t saveTime[7] = {0};

void init_value(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
    mode = MODE1;
 8001318:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <init_value+0xe0>)
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]
    mode_alarm = ALARM_MODE1;
 800131e:	4b36      	ldr	r3, [pc, #216]	; (80013f8 <init_value+0xe4>)
 8001320:	220a      	movs	r2, #10
 8001322:	601a      	str	r2, [r3, #0]

    statusNORMAL_1 = INIT;
 8001324:	4b35      	ldr	r3, [pc, #212]	; (80013fc <init_value+0xe8>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
    statusNORMAL_2 = INIT;
 800132a:	4b35      	ldr	r3, [pc, #212]	; (8001400 <init_value+0xec>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
    statusSEC_1 = INIT;
 8001330:	4b34      	ldr	r3, [pc, #208]	; (8001404 <init_value+0xf0>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
    statusSEC_2 = INIT;
 8001336:	4b34      	ldr	r3, [pc, #208]	; (8001408 <init_value+0xf4>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
    statusSEC_3 = INIT;
 800133c:	4b33      	ldr	r3, [pc, #204]	; (800140c <init_value+0xf8>)
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]

    statusMIN_1 = INIT;
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <init_value+0xfc>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
    statusMIN_2 = INIT;
 8001348:	4b32      	ldr	r3, [pc, #200]	; (8001414 <init_value+0x100>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
    statusMIN_3 = INIT;
 800134e:	4b32      	ldr	r3, [pc, #200]	; (8001418 <init_value+0x104>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]

    statusHOUR_1 = INIT;
 8001354:	4b31      	ldr	r3, [pc, #196]	; (800141c <init_value+0x108>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
    statusHOUR_2 = INIT;
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <init_value+0x10c>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
    statusHOUR_3 = INIT;
 8001360:	4b30      	ldr	r3, [pc, #192]	; (8001424 <init_value+0x110>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

    statusDAY_1 = INIT;
 8001366:	4b30      	ldr	r3, [pc, #192]	; (8001428 <init_value+0x114>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
    statusDAY_2 = INIT;
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <init_value+0x118>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
    statusDAY_3 = INIT;
 8001372:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <init_value+0x11c>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]

    statusDATE_1 = INIT;
 8001378:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <init_value+0x120>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
    statusDATE_2 = INIT;
 800137e:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <init_value+0x124>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
    statusDATE_3 = INIT;
 8001384:	4b2d      	ldr	r3, [pc, #180]	; (800143c <init_value+0x128>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]

    statusMONTH_1 = INIT;
 800138a:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <init_value+0x12c>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
    statusMONTH_2 = INIT;
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <init_value+0x130>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
    statusMONTH_3 = INIT;
 8001396:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <init_value+0x134>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

    statusYEAR_1 = INIT;
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <init_value+0x138>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
    statusYEAR_2 = INIT;
 80013a2:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <init_value+0x13c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
    statusYEAR_3 = INIT;
 80013a8:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <init_value+0x140>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]

    statusHOUR_ALARM_1 = INIT;
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <init_value+0x144>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
    statusHOUR_ALARM_2 = INIT;
 80013b4:	4b29      	ldr	r3, [pc, #164]	; (800145c <init_value+0x148>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
    statusHOUR_ALARM_3 = INIT;
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <init_value+0x14c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

    statusMIN_ALARM_1 = INIT;
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <init_value+0x150>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
    statusMIN_ALARM_2 = INIT;
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <init_value+0x154>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
    statusMIN_ALARM_3 = INIT;
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <init_value+0x158>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]

    // statusSEC_ALARM_1 = INIT;
    // statusSEC_ALARM_2 = INIT;
    // statusSEC_ALARM_3 = INIT;

    counter_blink1 = INIT;
 80013d2:	4b27      	ldr	r3, [pc, #156]	; (8001470 <init_value+0x15c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
    counter_blink2 = INIT;
 80013d8:	4b26      	ldr	r3, [pc, #152]	; (8001474 <init_value+0x160>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]

    counter_alert1 = INIT;
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <init_value+0x164>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
    counter_alert2 = INIT;
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <init_value+0x168>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	20000134 	.word	0x20000134
 80013f8:	20000138 	.word	0x20000138
 80013fc:	200000bc 	.word	0x200000bc
 8001400:	200000c0 	.word	0x200000c0
 8001404:	200000c4 	.word	0x200000c4
 8001408:	200000c8 	.word	0x200000c8
 800140c:	200000cc 	.word	0x200000cc
 8001410:	200000d0 	.word	0x200000d0
 8001414:	200000d4 	.word	0x200000d4
 8001418:	200000d8 	.word	0x200000d8
 800141c:	200000dc 	.word	0x200000dc
 8001420:	200000e0 	.word	0x200000e0
 8001424:	200000e4 	.word	0x200000e4
 8001428:	200000e8 	.word	0x200000e8
 800142c:	200000ec 	.word	0x200000ec
 8001430:	200000f0 	.word	0x200000f0
 8001434:	200000f4 	.word	0x200000f4
 8001438:	200000f8 	.word	0x200000f8
 800143c:	200000fc 	.word	0x200000fc
 8001440:	20000100 	.word	0x20000100
 8001444:	20000104 	.word	0x20000104
 8001448:	20000108 	.word	0x20000108
 800144c:	2000010c 	.word	0x2000010c
 8001450:	20000110 	.word	0x20000110
 8001454:	20000114 	.word	0x20000114
 8001458:	2000011c 	.word	0x2000011c
 800145c:	20000120 	.word	0x20000120
 8001460:	20000124 	.word	0x20000124
 8001464:	20000128 	.word	0x20000128
 8001468:	2000012c 	.word	0x2000012c
 800146c:	20000130 	.word	0x20000130
 8001470:	20000145 	.word	0x20000145
 8001474:	20000146 	.word	0x20000146
 8001478:	20000147 	.word	0x20000147
 800147c:	20000148 	.word	0x20000148

08001480 <init_counter>:

void init_counter(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
    counterSec = ds3231_sec;
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <init_counter+0x48>)
 8001486:	781a      	ldrb	r2, [r3, #0]
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <init_counter+0x4c>)
 800148a:	701a      	strb	r2, [r3, #0]
    counterMin = ds3231_min;
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <init_counter+0x50>)
 800148e:	781a      	ldrb	r2, [r3, #0]
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <init_counter+0x54>)
 8001492:	701a      	strb	r2, [r3, #0]
    counterHour = ds3231_hours;
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <init_counter+0x58>)
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <init_counter+0x5c>)
 800149a:	701a      	strb	r2, [r3, #0]
    counterDay = ds3231_day;
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <init_counter+0x60>)
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <init_counter+0x64>)
 80014a2:	701a      	strb	r2, [r3, #0]
    counterDate = ds3231_date;
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <init_counter+0x68>)
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <init_counter+0x6c>)
 80014aa:	701a      	strb	r2, [r3, #0]
    counterMonth = ds3231_month;
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <init_counter+0x70>)
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <init_counter+0x74>)
 80014b2:	701a      	strb	r2, [r3, #0]
    counterYear = ds3231_year;
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <init_counter+0x78>)
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <init_counter+0x7c>)
 80014ba:	701a      	strb	r2, [r3, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000061 	.word	0x20000061
 80014cc:	2000013c 	.word	0x2000013c
 80014d0:	20000060 	.word	0x20000060
 80014d4:	2000013d 	.word	0x2000013d
 80014d8:	2000005f 	.word	0x2000005f
 80014dc:	2000013e 	.word	0x2000013e
 80014e0:	20000063 	.word	0x20000063
 80014e4:	2000013f 	.word	0x2000013f
 80014e8:	20000062 	.word	0x20000062
 80014ec:	20000140 	.word	0x20000140
 80014f0:	20000064 	.word	0x20000064
 80014f4:	20000141 	.word	0x20000141
 80014f8:	20000065 	.word	0x20000065
 80014fc:	20000142 	.word	0x20000142

08001500 <init_counter_alarm>:

void init_counter_alarm(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
    counterHour_Alarm = ds3231_alarm_hour;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <init_counter_alarm+0x20>)
 8001506:	781a      	ldrb	r2, [r3, #0]
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <init_counter_alarm+0x24>)
 800150a:	701a      	strb	r2, [r3, #0]
    counterMin_Alarm = ds3231_alarm_min;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <init_counter_alarm+0x28>)
 800150e:	781a      	ldrb	r2, [r3, #0]
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <init_counter_alarm+0x2c>)
 8001512:	701a      	strb	r2, [r3, #0]
    // counterSec_Alarm = ds3231_alarm_sec;
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000066 	.word	0x20000066
 8001524:	20000143 	.word	0x20000143
 8001528:	20000067 	.word	0x20000067
 800152c:	20000144 	.word	0x20000144

08001530 <blinky>:

void blinky(int unit)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af04      	add	r7, sp, #16
 8001536:	6078      	str	r0, [r7, #4]

    counter_blink1 = (counter_blink1 + 1) % 5;
 8001538:	4b97      	ldr	r3, [pc, #604]	; (8001798 <blinky+0x268>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	4b97      	ldr	r3, [pc, #604]	; (800179c <blinky+0x26c>)
 8001540:	fb83 1302 	smull	r1, r3, r3, r2
 8001544:	1059      	asrs	r1, r3, #1
 8001546:	17d3      	asrs	r3, r2, #31
 8001548:	1ac9      	subs	r1, r1, r3
 800154a:	460b      	mov	r3, r1
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	1ad1      	subs	r1, r2, r3
 8001552:	b2ca      	uxtb	r2, r1
 8001554:	4b90      	ldr	r3, [pc, #576]	; (8001798 <blinky+0x268>)
 8001556:	701a      	strb	r2, [r3, #0]
    counter_blink2 = (counter_blink2 + 1) % 10;
 8001558:	4b91      	ldr	r3, [pc, #580]	; (80017a0 <blinky+0x270>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	4b8f      	ldr	r3, [pc, #572]	; (800179c <blinky+0x26c>)
 8001560:	fb83 1302 	smull	r1, r3, r3, r2
 8001564:	1099      	asrs	r1, r3, #2
 8001566:	17d3      	asrs	r3, r2, #31
 8001568:	1ac9      	subs	r1, r1, r3
 800156a:	460b      	mov	r3, r1
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	1ad1      	subs	r1, r2, r3
 8001574:	b2ca      	uxtb	r2, r1
 8001576:	4b8a      	ldr	r3, [pc, #552]	; (80017a0 <blinky+0x270>)
 8001578:	701a      	strb	r2, [r3, #0]
    if (unit == HOUR)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d122      	bne.n	80015c6 <blinky+0x96>
    {
        if (counter_blink1 == 0)
 8001580:	4b85      	ldr	r3, [pc, #532]	; (8001798 <blinky+0x268>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10e      	bne.n	80015a6 <blinky+0x76>
        {
            lcd_ShowIntNum(70, 100, counterHour, 2, GREEN, BLACK, 24);
 8001588:	4b86      	ldr	r3, [pc, #536]	; (80017a4 <blinky+0x274>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b29a      	uxth	r2, r3
 800158e:	2318      	movs	r3, #24
 8001590:	9302      	str	r3, [sp, #8]
 8001592:	2300      	movs	r3, #0
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2302      	movs	r3, #2
 800159e:	2164      	movs	r1, #100	; 0x64
 80015a0:	2046      	movs	r0, #70	; 0x46
 80015a2:	f000 fe6b 	bl	800227c <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 80015a6:	4b7e      	ldr	r3, [pc, #504]	; (80017a0 <blinky+0x270>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10b      	bne.n	80015c6 <blinky+0x96>
        {
            lcd_ShowIntNum(70, 100, 0, 2, BLACK, BLACK, 24);
 80015ae:	2318      	movs	r3, #24
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	2300      	movs	r3, #0
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	2300      	movs	r3, #0
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2302      	movs	r3, #2
 80015bc:	2200      	movs	r2, #0
 80015be:	2164      	movs	r1, #100	; 0x64
 80015c0:	2046      	movs	r0, #70	; 0x46
 80015c2:	f000 fe5b 	bl	800227c <lcd_ShowIntNum>
            // lcd_Fill(70, 100, 80, 100, BLACK);
        }
    }
    if (unit == MIN)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d122      	bne.n	8001612 <blinky+0xe2>
    {
        if (counter_blink1 == 0)
 80015cc:	4b72      	ldr	r3, [pc, #456]	; (8001798 <blinky+0x268>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10e      	bne.n	80015f2 <blinky+0xc2>
        {
            lcd_ShowIntNum(110, 100, counterMin, 2, GREEN, BLACK, 24);
 80015d4:	4b74      	ldr	r3, [pc, #464]	; (80017a8 <blinky+0x278>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	2318      	movs	r3, #24
 80015dc:	9302      	str	r3, [sp, #8]
 80015de:	2300      	movs	r3, #0
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2302      	movs	r3, #2
 80015ea:	2164      	movs	r1, #100	; 0x64
 80015ec:	206e      	movs	r0, #110	; 0x6e
 80015ee:	f000 fe45 	bl	800227c <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 80015f2:	4b6b      	ldr	r3, [pc, #428]	; (80017a0 <blinky+0x270>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10b      	bne.n	8001612 <blinky+0xe2>
        {
            lcd_ShowIntNum(110, 100, 0, 2, BLACK, BLACK, 24);
 80015fa:	2318      	movs	r3, #24
 80015fc:	9302      	str	r3, [sp, #8]
 80015fe:	2300      	movs	r3, #0
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	2300      	movs	r3, #0
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2302      	movs	r3, #2
 8001608:	2200      	movs	r2, #0
 800160a:	2164      	movs	r1, #100	; 0x64
 800160c:	206e      	movs	r0, #110	; 0x6e
 800160e:	f000 fe35 	bl	800227c <lcd_ShowIntNum>
        }
    }
    if (unit == SEC)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d122      	bne.n	800165e <blinky+0x12e>
    {
        if (counter_blink1 == 0)
 8001618:	4b5f      	ldr	r3, [pc, #380]	; (8001798 <blinky+0x268>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10e      	bne.n	800163e <blinky+0x10e>
        {
            lcd_ShowIntNum(150, 100, counterSec, 2, GREEN, BLACK, 24);
 8001620:	4b62      	ldr	r3, [pc, #392]	; (80017ac <blinky+0x27c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b29a      	uxth	r2, r3
 8001626:	2318      	movs	r3, #24
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	2300      	movs	r3, #0
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2302      	movs	r3, #2
 8001636:	2164      	movs	r1, #100	; 0x64
 8001638:	2096      	movs	r0, #150	; 0x96
 800163a:	f000 fe1f 	bl	800227c <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 800163e:	4b58      	ldr	r3, [pc, #352]	; (80017a0 <blinky+0x270>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10b      	bne.n	800165e <blinky+0x12e>
        {
            lcd_ShowIntNum(150, 100, 0, 2, BLACK, BLACK, 24);
 8001646:	2318      	movs	r3, #24
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	2300      	movs	r3, #0
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	2300      	movs	r3, #0
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2302      	movs	r3, #2
 8001654:	2200      	movs	r2, #0
 8001656:	2164      	movs	r1, #100	; 0x64
 8001658:	2096      	movs	r0, #150	; 0x96
 800165a:	f000 fe0f 	bl	800227c <lcd_ShowIntNum>
        }
    }
    if (unit == DAY)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b04      	cmp	r3, #4
 8001662:	d122      	bne.n	80016aa <blinky+0x17a>
    {
        if (counter_blink1 == 0)
 8001664:	4b4c      	ldr	r3, [pc, #304]	; (8001798 <blinky+0x268>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10e      	bne.n	800168a <blinky+0x15a>
        {
            lcd_ShowIntNum(20, 130, counterDay, 2, YELLOW, BLACK, 24);
 800166c:	4b50      	ldr	r3, [pc, #320]	; (80017b0 <blinky+0x280>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b29a      	uxth	r2, r3
 8001672:	2318      	movs	r3, #24
 8001674:	9302      	str	r3, [sp, #8]
 8001676:	2300      	movs	r3, #0
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2302      	movs	r3, #2
 8001682:	2182      	movs	r1, #130	; 0x82
 8001684:	2014      	movs	r0, #20
 8001686:	f000 fdf9 	bl	800227c <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 800168a:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <blinky+0x270>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10b      	bne.n	80016aa <blinky+0x17a>
        {
            lcd_ShowIntNum(20, 130, 0, 2, BLACK, BLACK, 24);
 8001692:	2318      	movs	r3, #24
 8001694:	9302      	str	r3, [sp, #8]
 8001696:	2300      	movs	r3, #0
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	2300      	movs	r3, #0
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2302      	movs	r3, #2
 80016a0:	2200      	movs	r2, #0
 80016a2:	2182      	movs	r1, #130	; 0x82
 80016a4:	2014      	movs	r0, #20
 80016a6:	f000 fde9 	bl	800227c <lcd_ShowIntNum>
        }
    }
    if (unit == DATE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d122      	bne.n	80016f6 <blinky+0x1c6>
    {
        if (counter_blink1 == 0)
 80016b0:	4b39      	ldr	r3, [pc, #228]	; (8001798 <blinky+0x268>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10e      	bne.n	80016d6 <blinky+0x1a6>
        {
            lcd_ShowIntNum(70, 130, counterDate, 2, YELLOW, BLACK, 24);
 80016b8:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <blinky+0x284>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b29a      	uxth	r2, r3
 80016be:	2318      	movs	r3, #24
 80016c0:	9302      	str	r3, [sp, #8]
 80016c2:	2300      	movs	r3, #0
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2302      	movs	r3, #2
 80016ce:	2182      	movs	r1, #130	; 0x82
 80016d0:	2046      	movs	r0, #70	; 0x46
 80016d2:	f000 fdd3 	bl	800227c <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 80016d6:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <blinky+0x270>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10b      	bne.n	80016f6 <blinky+0x1c6>
        {
            lcd_ShowIntNum(70, 130, 0, 2, BLACK, BLACK, 24);
 80016de:	2318      	movs	r3, #24
 80016e0:	9302      	str	r3, [sp, #8]
 80016e2:	2300      	movs	r3, #0
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	2300      	movs	r3, #0
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2302      	movs	r3, #2
 80016ec:	2200      	movs	r2, #0
 80016ee:	2182      	movs	r1, #130	; 0x82
 80016f0:	2046      	movs	r0, #70	; 0x46
 80016f2:	f000 fdc3 	bl	800227c <lcd_ShowIntNum>
        }
    }
    if (unit == MONTH)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d122      	bne.n	8001742 <blinky+0x212>
    {
        if (counter_blink1 == 0)
 80016fc:	4b26      	ldr	r3, [pc, #152]	; (8001798 <blinky+0x268>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10e      	bne.n	8001722 <blinky+0x1f2>
        {
            lcd_ShowIntNum(110, 130, counterMonth, 2, YELLOW, BLACK, 24);
 8001704:	4b2c      	ldr	r3, [pc, #176]	; (80017b8 <blinky+0x288>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b29a      	uxth	r2, r3
 800170a:	2318      	movs	r3, #24
 800170c:	9302      	str	r3, [sp, #8]
 800170e:	2300      	movs	r3, #0
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2302      	movs	r3, #2
 800171a:	2182      	movs	r1, #130	; 0x82
 800171c:	206e      	movs	r0, #110	; 0x6e
 800171e:	f000 fdad 	bl	800227c <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <blinky+0x270>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10b      	bne.n	8001742 <blinky+0x212>
        {
            lcd_ShowIntNum(110, 130, 0, 2, BLACK, BLACK, 24);
 800172a:	2318      	movs	r3, #24
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	2300      	movs	r3, #0
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	2300      	movs	r3, #0
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2302      	movs	r3, #2
 8001738:	2200      	movs	r2, #0
 800173a:	2182      	movs	r1, #130	; 0x82
 800173c:	206e      	movs	r0, #110	; 0x6e
 800173e:	f000 fd9d 	bl	800227c <lcd_ShowIntNum>
        }
    }
    if (unit == YEAR)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b07      	cmp	r3, #7
 8001746:	d122      	bne.n	800178e <blinky+0x25e>
    {
        if (counter_blink1 == 0)
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <blinky+0x268>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10e      	bne.n	800176e <blinky+0x23e>
        {
            lcd_ShowIntNum(150, 130, counterYear, 2, YELLOW, BLACK, 24);
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <blinky+0x28c>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b29a      	uxth	r2, r3
 8001756:	2318      	movs	r3, #24
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	2300      	movs	r3, #0
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2302      	movs	r3, #2
 8001766:	2182      	movs	r1, #130	; 0x82
 8001768:	2096      	movs	r0, #150	; 0x96
 800176a:	f000 fd87 	bl	800227c <lcd_ShowIntNum>
        }
        if (counter_blink2 == 0)
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <blinky+0x270>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10b      	bne.n	800178e <blinky+0x25e>
        {
            lcd_ShowIntNum(150, 130, 0, 2, BLACK, BLACK, 24);
 8001776:	2318      	movs	r3, #24
 8001778:	9302      	str	r3, [sp, #8]
 800177a:	2300      	movs	r3, #0
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	2300      	movs	r3, #0
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2302      	movs	r3, #2
 8001784:	2200      	movs	r2, #0
 8001786:	2182      	movs	r1, #130	; 0x82
 8001788:	2096      	movs	r0, #150	; 0x96
 800178a:	f000 fd77 	bl	800227c <lcd_ShowIntNum>
    //     if (counter_blink2 == 0)
    //     {
    //         lcd_ShowIntNum(150, 200, 0, 2, BLUE, BLACK, 24);
    //     }
    // }
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000145 	.word	0x20000145
 800179c:	66666667 	.word	0x66666667
 80017a0:	20000146 	.word	0x20000146
 80017a4:	2000013e 	.word	0x2000013e
 80017a8:	2000013d 	.word	0x2000013d
 80017ac:	2000013c 	.word	0x2000013c
 80017b0:	2000013f 	.word	0x2000013f
 80017b4:	20000140 	.word	0x20000140
 80017b8:	20000141 	.word	0x20000141
 80017bc:	20000142 	.word	0x20000142

080017c0 <blinkyAlarm>:

void blinkyAlarm(int unit)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af04      	add	r7, sp, #16
 80017c6:	6078      	str	r0, [r7, #4]
    counter_alert1 = (counter_alert1 + 1) % 5;
 80017c8:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <blinkyAlarm+0xe8>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	4b37      	ldr	r3, [pc, #220]	; (80018ac <blinkyAlarm+0xec>)
 80017d0:	fb83 1302 	smull	r1, r3, r3, r2
 80017d4:	1059      	asrs	r1, r3, #1
 80017d6:	17d3      	asrs	r3, r2, #31
 80017d8:	1ac9      	subs	r1, r1, r3
 80017da:	460b      	mov	r3, r1
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	1ad1      	subs	r1, r2, r3
 80017e2:	b2ca      	uxtb	r2, r1
 80017e4:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <blinkyAlarm+0xe8>)
 80017e6:	701a      	strb	r2, [r3, #0]
    counter_alert2 = (counter_alert2 + 1) % 10;
 80017e8:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <blinkyAlarm+0xf0>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <blinkyAlarm+0xec>)
 80017f0:	fb83 1302 	smull	r1, r3, r3, r2
 80017f4:	1099      	asrs	r1, r3, #2
 80017f6:	17d3      	asrs	r3, r2, #31
 80017f8:	1ac9      	subs	r1, r1, r3
 80017fa:	460b      	mov	r3, r1
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	1ad1      	subs	r1, r2, r3
 8001804:	b2ca      	uxtb	r2, r1
 8001806:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <blinkyAlarm+0xf0>)
 8001808:	701a      	strb	r2, [r3, #0]
    if (unit == HOUR_A)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b0a      	cmp	r3, #10
 800180e:	d121      	bne.n	8001854 <blinkyAlarm+0x94>
    {
        if (counter_alert1 == 0)
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <blinkyAlarm+0xe8>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10d      	bne.n	8001834 <blinkyAlarm+0x74>
        {
            lcd_ShowIntNum(70, 200, counterHour_Alarm, 2, BLUE, BLACK, 24);
 8001818:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <blinkyAlarm+0xf4>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b29a      	uxth	r2, r3
 800181e:	2318      	movs	r3, #24
 8001820:	9302      	str	r3, [sp, #8]
 8001822:	2300      	movs	r3, #0
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	231f      	movs	r3, #31
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	2302      	movs	r3, #2
 800182c:	21c8      	movs	r1, #200	; 0xc8
 800182e:	2046      	movs	r0, #70	; 0x46
 8001830:	f000 fd24 	bl	800227c <lcd_ShowIntNum>
        }
        if (counter_alert2 == 0)
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <blinkyAlarm+0xf0>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10b      	bne.n	8001854 <blinkyAlarm+0x94>
        {
            lcd_ShowIntNum(70, 200, 0, 2, BLACK, BLACK, 24);
 800183c:	2318      	movs	r3, #24
 800183e:	9302      	str	r3, [sp, #8]
 8001840:	2300      	movs	r3, #0
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	2300      	movs	r3, #0
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2302      	movs	r3, #2
 800184a:	2200      	movs	r2, #0
 800184c:	21c8      	movs	r1, #200	; 0xc8
 800184e:	2046      	movs	r0, #70	; 0x46
 8001850:	f000 fd14 	bl	800227c <lcd_ShowIntNum>
        }
    }
    if (unit == MIN_A)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b0b      	cmp	r3, #11
 8001858:	d121      	bne.n	800189e <blinkyAlarm+0xde>
    {
        if (counter_alert1 == 0)
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <blinkyAlarm+0xe8>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10d      	bne.n	800187e <blinkyAlarm+0xbe>
        {
            lcd_ShowIntNum(110, 200, counterMin_Alarm, 2, BLUE, BLACK, 24);
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <blinkyAlarm+0xf8>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	b29a      	uxth	r2, r3
 8001868:	2318      	movs	r3, #24
 800186a:	9302      	str	r3, [sp, #8]
 800186c:	2300      	movs	r3, #0
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	231f      	movs	r3, #31
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2302      	movs	r3, #2
 8001876:	21c8      	movs	r1, #200	; 0xc8
 8001878:	206e      	movs	r0, #110	; 0x6e
 800187a:	f000 fcff 	bl	800227c <lcd_ShowIntNum>
        }
        if (counter_alert2 == 0)
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <blinkyAlarm+0xf0>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10b      	bne.n	800189e <blinkyAlarm+0xde>
        {
            lcd_ShowIntNum(110, 200, 0, 2, BLACK, BLACK, 24);
 8001886:	2318      	movs	r3, #24
 8001888:	9302      	str	r3, [sp, #8]
 800188a:	2300      	movs	r3, #0
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	2300      	movs	r3, #0
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2302      	movs	r3, #2
 8001894:	2200      	movs	r2, #0
 8001896:	21c8      	movs	r1, #200	; 0xc8
 8001898:	206e      	movs	r0, #110	; 0x6e
 800189a:	f000 fcef 	bl	800227c <lcd_ShowIntNum>
        }
    }
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000147 	.word	0x20000147
 80018ac:	66666667 	.word	0x66666667
 80018b0:	20000148 	.word	0x20000148
 80018b4:	20000143 	.word	0x20000143
 80018b8:	20000144 	.word	0x20000144

080018bc <displayTime>:

void displayTime()
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af04      	add	r7, sp, #16
    lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 80018c2:	4b36      	ldr	r3, [pc, #216]	; (800199c <displayTime+0xe0>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	2318      	movs	r3, #24
 80018ca:	9302      	str	r3, [sp, #8]
 80018cc:	2300      	movs	r3, #0
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2302      	movs	r3, #2
 80018d8:	2164      	movs	r1, #100	; 0x64
 80018da:	2046      	movs	r0, #70	; 0x46
 80018dc:	f000 fcce 	bl	800227c <lcd_ShowIntNum>
    lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80018e0:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <displayTime+0xe4>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	2318      	movs	r3, #24
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	2300      	movs	r3, #0
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2302      	movs	r3, #2
 80018f6:	2164      	movs	r1, #100	; 0x64
 80018f8:	206e      	movs	r0, #110	; 0x6e
 80018fa:	f000 fcbf 	bl	800227c <lcd_ShowIntNum>
    lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80018fe:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <displayTime+0xe8>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	b29a      	uxth	r2, r3
 8001904:	2318      	movs	r3, #24
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	2300      	movs	r3, #0
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2302      	movs	r3, #2
 8001914:	2164      	movs	r1, #100	; 0x64
 8001916:	2096      	movs	r0, #150	; 0x96
 8001918:	f000 fcb0 	bl	800227c <lcd_ShowIntNum>
    lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <displayTime+0xec>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b29a      	uxth	r2, r3
 8001922:	2318      	movs	r3, #24
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	2300      	movs	r3, #0
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2302      	movs	r3, #2
 8001932:	2182      	movs	r1, #130	; 0x82
 8001934:	2014      	movs	r0, #20
 8001936:	f000 fca1 	bl	800227c <lcd_ShowIntNum>
    lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <displayTime+0xf0>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b29a      	uxth	r2, r3
 8001940:	2318      	movs	r3, #24
 8001942:	9302      	str	r3, [sp, #8]
 8001944:	2300      	movs	r3, #0
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2302      	movs	r3, #2
 8001950:	2182      	movs	r1, #130	; 0x82
 8001952:	2046      	movs	r0, #70	; 0x46
 8001954:	f000 fc92 	bl	800227c <lcd_ShowIntNum>
    lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <displayTime+0xf4>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	b29a      	uxth	r2, r3
 800195e:	2318      	movs	r3, #24
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	2300      	movs	r3, #0
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2302      	movs	r3, #2
 800196e:	2182      	movs	r1, #130	; 0x82
 8001970:	206e      	movs	r0, #110	; 0x6e
 8001972:	f000 fc83 	bl	800227c <lcd_ShowIntNum>
    lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <displayTime+0xf8>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b29a      	uxth	r2, r3
 800197c:	2318      	movs	r3, #24
 800197e:	9302      	str	r3, [sp, #8]
 8001980:	2300      	movs	r3, #0
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2302      	movs	r3, #2
 800198c:	2182      	movs	r1, #130	; 0x82
 800198e:	2096      	movs	r0, #150	; 0x96
 8001990:	f000 fc74 	bl	800227c <lcd_ShowIntNum>
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2000005f 	.word	0x2000005f
 80019a0:	20000060 	.word	0x20000060
 80019a4:	20000061 	.word	0x20000061
 80019a8:	20000063 	.word	0x20000063
 80019ac:	20000062 	.word	0x20000062
 80019b0:	20000064 	.word	0x20000064
 80019b4:	20000065 	.word	0x20000065

080019b8 <updateTime>:

void updateTime()
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
    ds3231_Write(ADDRESS_YEAR, 23);
 80019bc:	2117      	movs	r1, #23
 80019be:	2006      	movs	r0, #6
 80019c0:	f7fe fe58 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_MONTH, 10);
 80019c4:	210a      	movs	r1, #10
 80019c6:	2005      	movs	r0, #5
 80019c8:	f7fe fe54 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_DATE, 15);
 80019cc:	210f      	movs	r1, #15
 80019ce:	2004      	movs	r0, #4
 80019d0:	f7fe fe50 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_DAY, 6);
 80019d4:	2106      	movs	r1, #6
 80019d6:	2003      	movs	r0, #3
 80019d8:	f7fe fe4c 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_HOUR, 15);
 80019dc:	210f      	movs	r1, #15
 80019de:	2002      	movs	r0, #2
 80019e0:	f7fe fe48 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_MIN, 30);
 80019e4:	211e      	movs	r1, #30
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7fe fe44 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_SEC, 35);
 80019ec:	2123      	movs	r1, #35	; 0x23
 80019ee:	2000      	movs	r0, #0
 80019f0:	f7fe fe40 	bl	8000674 <ds3231_Write>
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <displayAlarm>:

void displayAlarm(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af04      	add	r7, sp, #16
    lcd_ShowIntNum(70, 200, ds3231_alarm_hour, 2, BLUE, BLACK, 24);
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <displayAlarm+0x44>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	2318      	movs	r3, #24
 8001a06:	9302      	str	r3, [sp, #8]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	231f      	movs	r3, #31
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2302      	movs	r3, #2
 8001a12:	21c8      	movs	r1, #200	; 0xc8
 8001a14:	2046      	movs	r0, #70	; 0x46
 8001a16:	f000 fc31 	bl	800227c <lcd_ShowIntNum>
    lcd_ShowIntNum(110, 200, ds3231_alarm_min, 2, BLUE, BLACK, 24);
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <displayAlarm+0x48>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	2318      	movs	r3, #24
 8001a22:	9302      	str	r3, [sp, #8]
 8001a24:	2300      	movs	r3, #0
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	231f      	movs	r3, #31
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	21c8      	movs	r1, #200	; 0xc8
 8001a30:	206e      	movs	r0, #110	; 0x6e
 8001a32:	f000 fc23 	bl	800227c <lcd_ShowIntNum>
    // lcd_ShowIntNum(150, 200, ds3231_alarm_sec, 2, BLUE, BLACK, 24);
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000066 	.word	0x20000066
 8001a40:	20000067 	.word	0x20000067

08001a44 <updateAlarm>:

void updateAlarm(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
    ds3231_Write(ADDRESS_HOUR_ALARM, 0);
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2009      	movs	r0, #9
 8001a4c:	f7fe fe12 	bl	8000674 <ds3231_Write>
    ds3231_Write(ADDRESS_MIN_ALARM, 0);
 8001a50:	2100      	movs	r1, #0
 8001a52:	2008      	movs	r0, #8
 8001a54:	f7fe fe0e 	bl	8000674 <ds3231_Write>
    // ds3231_Write(ADDRESS_SEC_ALARM, 0);
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <alert>:

void alert(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
    counter_alert1 = (counter_alert1 + 1) % 5;
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <alert+0x68>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <alert+0x6c>)
 8001a68:	fb83 1302 	smull	r1, r3, r3, r2
 8001a6c:	1059      	asrs	r1, r3, #1
 8001a6e:	17d3      	asrs	r3, r2, #31
 8001a70:	1ac9      	subs	r1, r1, r3
 8001a72:	460b      	mov	r3, r1
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	1ad1      	subs	r1, r2, r3
 8001a7a:	b2ca      	uxtb	r2, r1
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <alert+0x68>)
 8001a7e:	701a      	strb	r2, [r3, #0]
    counter_alert2 = (counter_alert2 + 1) % 10;
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <alert+0x70>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <alert+0x6c>)
 8001a88:	fb83 1302 	smull	r1, r3, r3, r2
 8001a8c:	1099      	asrs	r1, r3, #2
 8001a8e:	17d3      	asrs	r3, r2, #31
 8001a90:	1ac9      	subs	r1, r1, r3
 8001a92:	460b      	mov	r3, r1
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	1ad1      	subs	r1, r2, r3
 8001a9c:	b2ca      	uxtb	r2, r1
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <alert+0x70>)
 8001aa0:	701a      	strb	r2, [r3, #0]
    if (counter_alert1 == 0)
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <alert+0x68>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d103      	bne.n	8001ab2 <alert+0x56>
    {
        lcd_Clear(RED);
 8001aaa:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001aae:	f000 faa7 	bl	8002000 <lcd_Clear>
    }
    if (counter_alert2 == 0)
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <alert+0x70>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <alert+0x64>
    {
        lcd_Clear(BLACK);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f000 faa0 	bl	8002000 <lcd_Clear>
    }
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000147 	.word	0x20000147
 8001ac8:	66666667 	.word	0x66666667
 8001acc:	20000148 	.word	0x20000148

08001ad0 <resetSaveTime>:

void resetSaveTime()
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
    for (int i = 0; i < 7; ++i)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	e007      	b.n	8001aec <resetSaveTime+0x1c>
    {
        saveTime[i] = 0;
 8001adc:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <resetSaveTime+0x30>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 7; ++i)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	ddf4      	ble.n	8001adc <resetSaveTime+0xc>
    }
}
 8001af2:	bf00      	nop
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	2000014c 	.word	0x2000014c

08001b04 <writeSaveTime>:

void writeSaveTime()
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
    if (saveTime[0] == 1 || (counterHour != ds3231_hours))
 8001b08:	4b38      	ldr	r3, [pc, #224]	; (8001bec <writeSaveTime+0xe8>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d005      	beq.n	8001b1c <writeSaveTime+0x18>
 8001b10:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <writeSaveTime+0xec>)
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <writeSaveTime+0xf0>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d005      	beq.n	8001b28 <writeSaveTime+0x24>
    {
        ds3231_Write(ADDRESS_HOUR, counterHour);
 8001b1c:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <writeSaveTime+0xec>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	2002      	movs	r0, #2
 8001b24:	f7fe fda6 	bl	8000674 <ds3231_Write>
    }
    if (saveTime[1] == 1 || (counterMin != ds3231_min))
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <writeSaveTime+0xe8>)
 8001b2a:	785b      	ldrb	r3, [r3, #1]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d005      	beq.n	8001b3c <writeSaveTime+0x38>
 8001b30:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <writeSaveTime+0xf4>)
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <writeSaveTime+0xf8>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d005      	beq.n	8001b48 <writeSaveTime+0x44>
    {
        ds3231_Write(ADDRESS_MIN, counterMin);
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <writeSaveTime+0xf4>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	2001      	movs	r0, #1
 8001b44:	f7fe fd96 	bl	8000674 <ds3231_Write>
    }
    if (saveTime[2] == 1 || (counterSec != ds3231_sec))
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <writeSaveTime+0xe8>)
 8001b4a:	789b      	ldrb	r3, [r3, #2]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d005      	beq.n	8001b5c <writeSaveTime+0x58>
 8001b50:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <writeSaveTime+0xfc>)
 8001b52:	781a      	ldrb	r2, [r3, #0]
 8001b54:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <writeSaveTime+0x100>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d005      	beq.n	8001b68 <writeSaveTime+0x64>
    {
        ds3231_Write(ADDRESS_SEC, counterSec);
 8001b5c:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <writeSaveTime+0xfc>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7fe fd86 	bl	8000674 <ds3231_Write>
    }
    if (saveTime[3] == 1 || (counterDay != ds3231_day))
 8001b68:	4b20      	ldr	r3, [pc, #128]	; (8001bec <writeSaveTime+0xe8>)
 8001b6a:	78db      	ldrb	r3, [r3, #3]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d005      	beq.n	8001b7c <writeSaveTime+0x78>
 8001b70:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <writeSaveTime+0x104>)
 8001b72:	781a      	ldrb	r2, [r3, #0]
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <writeSaveTime+0x108>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d005      	beq.n	8001b88 <writeSaveTime+0x84>
    {
        ds3231_Write(ADDRESS_DAY, counterDay);
 8001b7c:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <writeSaveTime+0x104>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	2003      	movs	r0, #3
 8001b84:	f7fe fd76 	bl	8000674 <ds3231_Write>
    }
    if (saveTime[4] == 1 || (counterDate != ds3231_date))
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <writeSaveTime+0xe8>)
 8001b8a:	791b      	ldrb	r3, [r3, #4]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d005      	beq.n	8001b9c <writeSaveTime+0x98>
 8001b90:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <writeSaveTime+0x10c>)
 8001b92:	781a      	ldrb	r2, [r3, #0]
 8001b94:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <writeSaveTime+0x110>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d005      	beq.n	8001ba8 <writeSaveTime+0xa4>
    {
        ds3231_Write(ADDRESS_DATE, counterDate);
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <writeSaveTime+0x10c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	2004      	movs	r0, #4
 8001ba4:	f7fe fd66 	bl	8000674 <ds3231_Write>
    }
    if (saveTime[5] == 1 || (counterMonth != ds3231_month))
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <writeSaveTime+0xe8>)
 8001baa:	795b      	ldrb	r3, [r3, #5]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d005      	beq.n	8001bbc <writeSaveTime+0xb8>
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <writeSaveTime+0x114>)
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <writeSaveTime+0x118>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d005      	beq.n	8001bc8 <writeSaveTime+0xc4>
    {
        ds3231_Write(ADDRESS_MONTH, counterMonth);
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <writeSaveTime+0x114>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	2005      	movs	r0, #5
 8001bc4:	f7fe fd56 	bl	8000674 <ds3231_Write>
    }
    if (saveTime[6] == 1 || (counterYear != ds3231_year))
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <writeSaveTime+0xe8>)
 8001bca:	799b      	ldrb	r3, [r3, #6]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d005      	beq.n	8001bdc <writeSaveTime+0xd8>
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <writeSaveTime+0x11c>)
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <writeSaveTime+0x120>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d005      	beq.n	8001be8 <writeSaveTime+0xe4>
    {
        ds3231_Write(ADDRESS_YEAR, counterYear);
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <writeSaveTime+0x11c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	2006      	movs	r0, #6
 8001be4:	f7fe fd46 	bl	8000674 <ds3231_Write>
    }
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2000014c 	.word	0x2000014c
 8001bf0:	2000013e 	.word	0x2000013e
 8001bf4:	2000005f 	.word	0x2000005f
 8001bf8:	2000013d 	.word	0x2000013d
 8001bfc:	20000060 	.word	0x20000060
 8001c00:	2000013c 	.word	0x2000013c
 8001c04:	20000061 	.word	0x20000061
 8001c08:	2000013f 	.word	0x2000013f
 8001c0c:	20000063 	.word	0x20000063
 8001c10:	20000140 	.word	0x20000140
 8001c14:	20000062 	.word	0x20000062
 8001c18:	20000141 	.word	0x20000141
 8001c1c:	20000064 	.word	0x20000064
 8001c20:	20000142 	.word	0x20000142
 8001c24:	20000065 	.word	0x20000065

08001c28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08c      	sub	sp, #48	; 0x30
 8001c2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	4b6f      	ldr	r3, [pc, #444]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a6e      	ldr	r2, [pc, #440]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001c48:	f043 0310 	orr.w	r3, r3, #16
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b6c      	ldr	r3, [pc, #432]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	61bb      	str	r3, [r7, #24]
 8001c58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a67      	ldr	r2, [pc, #412]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b65      	ldr	r3, [pc, #404]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	4b61      	ldr	r3, [pc, #388]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a60      	ldr	r2, [pc, #384]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b5e      	ldr	r3, [pc, #376]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b5a      	ldr	r3, [pc, #360]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a59      	ldr	r2, [pc, #356]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b57      	ldr	r3, [pc, #348]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a4b      	ldr	r2, [pc, #300]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	4b45      	ldr	r3, [pc, #276]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a44      	ldr	r2, [pc, #272]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <MX_GPIO_Init+0x1d8>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2170      	movs	r1, #112	; 0x70
 8001d06:	483f      	ldr	r0, [pc, #252]	; (8001e04 <MX_GPIO_Init+0x1dc>)
 8001d08:	f001 fc00 	bl	800350c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d12:	483d      	ldr	r0, [pc, #244]	; (8001e08 <MX_GPIO_Init+0x1e0>)
 8001d14:	f001 fbfa 	bl	800350c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2140      	movs	r1, #64	; 0x40
 8001d1c:	483b      	ldr	r0, [pc, #236]	; (8001e0c <MX_GPIO_Init+0x1e4>)
 8001d1e:	f001 fbf5 	bl	800350c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d28:	4839      	ldr	r0, [pc, #228]	; (8001e10 <MX_GPIO_Init+0x1e8>)
 8001d2a:	f001 fbef 	bl	800350c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2108      	movs	r1, #8
 8001d32:	4838      	ldr	r0, [pc, #224]	; (8001e14 <MX_GPIO_Init+0x1ec>)
 8001d34:	f001 fbea 	bl	800350c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001d38:	2370      	movs	r3, #112	; 0x70
 8001d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	482d      	ldr	r0, [pc, #180]	; (8001e04 <MX_GPIO_Init+0x1dc>)
 8001d50:	f001 fa40 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001d66:	f107 031c 	add.w	r3, r7, #28
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4826      	ldr	r0, [pc, #152]	; (8001e08 <MX_GPIO_Init+0x1e0>)
 8001d6e:	f001 fa31 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001d72:	23c0      	movs	r3, #192	; 0xc0
 8001d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	4822      	ldr	r0, [pc, #136]	; (8001e10 <MX_GPIO_Init+0x1e8>)
 8001d86:	f001 fa25 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001d8a:	2330      	movs	r3, #48	; 0x30
 8001d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d96:	f107 031c 	add.w	r3, r7, #28
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	481a      	ldr	r0, [pc, #104]	; (8001e08 <MX_GPIO_Init+0x1e0>)
 8001d9e:	f001 fa19 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001da2:	2340      	movs	r3, #64	; 0x40
 8001da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	4814      	ldr	r0, [pc, #80]	; (8001e0c <MX_GPIO_Init+0x1e4>)
 8001dba:	f001 fa0b 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480e      	ldr	r0, [pc, #56]	; (8001e10 <MX_GPIO_Init+0x1e8>)
 8001dd8:	f001 f9fc 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de0:	2301      	movs	r3, #1
 8001de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4619      	mov	r1, r3
 8001df2:	4808      	ldr	r0, [pc, #32]	; (8001e14 <MX_GPIO_Init+0x1ec>)
 8001df4:	f001 f9ee 	bl	80031d4 <HAL_GPIO_Init>

}
 8001df8:	bf00      	nop
 8001dfa:	3730      	adds	r7, #48	; 0x30
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40021800 	.word	0x40021800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020c00 	.word	0x40020c00

08001e18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <MX_I2C1_Init+0x50>)
 8001e1e:	4a13      	ldr	r2, [pc, #76]	; (8001e6c <MX_I2C1_Init+0x54>)
 8001e20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_I2C1_Init+0x50>)
 8001e24:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <MX_I2C1_Init+0x58>)
 8001e26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <MX_I2C1_Init+0x50>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_I2C1_Init+0x50>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_I2C1_Init+0x50>)
 8001e36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <MX_I2C1_Init+0x50>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_I2C1_Init+0x50>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <MX_I2C1_Init+0x50>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_I2C1_Init+0x50>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e54:	4804      	ldr	r0, [pc, #16]	; (8001e68 <MX_I2C1_Init+0x50>)
 8001e56:	f001 fb73 	bl	8003540 <HAL_I2C_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e60:	f000 fdf4 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000154 	.word	0x20000154
 8001e6c:	40005400 	.word	0x40005400
 8001e70:	000186a0 	.word	0x000186a0

08001e74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <HAL_I2C_MspInit+0x84>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d12b      	bne.n	8001eee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_I2C_MspInit+0x88>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a17      	ldr	r2, [pc, #92]	; (8001efc <HAL_I2C_MspInit+0x88>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_I2C_MspInit+0x88>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eb2:	23c0      	movs	r3, #192	; 0xc0
 8001eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb6:	2312      	movs	r3, #18
 8001eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	480c      	ldr	r0, [pc, #48]	; (8001f00 <HAL_I2C_MspInit+0x8c>)
 8001ece:	f001 f981 	bl	80031d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_I2C_MspInit+0x88>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a08      	ldr	r2, [pc, #32]	; (8001efc <HAL_I2C_MspInit+0x88>)
 8001edc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_I2C_MspInit+0x88>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	; 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40005400 	.word	0x40005400
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020400 	.word	0x40020400

08001f04 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <LCD_WR_REG+0x1c>)
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	8013      	strh	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	600ffffe 	.word	0x600ffffe

08001f24 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <LCD_WR_DATA+0x1c>)
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	8053      	strh	r3, [r2, #2]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	600ffffe 	.word	0x600ffffe

08001f44 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <LCD_RD_DATA+0x20>)
 8001f4c:	885b      	ldrh	r3, [r3, #2]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	b29b      	uxth	r3, r3
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	600ffffe 	.word	0x600ffffe

08001f68 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4604      	mov	r4, r0
 8001f70:	4608      	mov	r0, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	4623      	mov	r3, r4
 8001f78:	80fb      	strh	r3, [r7, #6]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80bb      	strh	r3, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	807b      	strh	r3, [r7, #2]
 8001f82:	4613      	mov	r3, r2
 8001f84:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001f86:	202a      	movs	r0, #42	; 0x2a
 8001f88:	f7ff ffbc 	bl	8001f04 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ffc6 	bl	8001f24 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ffc0 	bl	8001f24 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ffba 	bl	8001f24 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ffb4 	bl	8001f24 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001fbc:	202b      	movs	r0, #43	; 0x2b
 8001fbe:	f7ff ffa1 	bl	8001f04 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001fc2:	88bb      	ldrh	r3, [r7, #4]
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ffab 	bl	8001f24 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001fce:	88bb      	ldrh	r3, [r7, #4]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ffa5 	bl	8001f24 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001fda:	883b      	ldrh	r3, [r7, #0]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff9f 	bl	8001f24 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001fe6:	883b      	ldrh	r3, [r7, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff99 	bl	8001f24 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001ff2:	202c      	movs	r0, #44	; 0x2c
 8001ff4:	f7ff ff86 	bl	8001f04 <LCD_WR_REG>
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd90      	pop	{r4, r7, pc}

08002000 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	b29b      	uxth	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <lcd_Clear+0x70>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <lcd_Clear+0x70>)
 8002024:	885b      	ldrh	r3, [r3, #2]
 8002026:	3b01      	subs	r3, #1
 8002028:	b29b      	uxth	r3, r3
 800202a:	2100      	movs	r1, #0
 800202c:	2000      	movs	r0, #0
 800202e:	f7ff ff9b 	bl	8001f68 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8002032:	2300      	movs	r3, #0
 8002034:	81fb      	strh	r3, [r7, #14]
 8002036:	e011      	b.n	800205c <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8002038:	2300      	movs	r3, #0
 800203a:	81bb      	strh	r3, [r7, #12]
 800203c:	e006      	b.n	800204c <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff6f 	bl	8001f24 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8002046:	89bb      	ldrh	r3, [r7, #12]
 8002048:	3301      	adds	r3, #1
 800204a:	81bb      	strh	r3, [r7, #12]
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <lcd_Clear+0x70>)
 800204e:	885b      	ldrh	r3, [r3, #2]
 8002050:	89ba      	ldrh	r2, [r7, #12]
 8002052:	429a      	cmp	r2, r3
 8002054:	d3f3      	bcc.n	800203e <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8002056:	89fb      	ldrh	r3, [r7, #14]
 8002058:	3301      	adds	r3, #1
 800205a:	81fb      	strh	r3, [r7, #14]
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <lcd_Clear+0x70>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	89fa      	ldrh	r2, [r7, #14]
 8002062:	429a      	cmp	r2, r3
 8002064:	d3e8      	bcc.n	8002038 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200001a8 	.word	0x200001a8

08002074 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	80fb      	strh	r3, [r7, #6]
 800207e:	460b      	mov	r3, r1
 8002080:	80bb      	strh	r3, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8002086:	88bb      	ldrh	r3, [r7, #4]
 8002088:	88fa      	ldrh	r2, [r7, #6]
 800208a:	88b9      	ldrh	r1, [r7, #4]
 800208c:	88f8      	ldrh	r0, [r7, #6]
 800208e:	f7ff ff6b 	bl	8001f68 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff45 	bl	8001f24 <LCD_WR_DATA>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4604      	mov	r4, r0
 80020ac:	4608      	mov	r0, r1
 80020ae:	4611      	mov	r1, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4623      	mov	r3, r4
 80020b4:	80fb      	strh	r3, [r7, #6]
 80020b6:	4603      	mov	r3, r0
 80020b8:	80bb      	strh	r3, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	70fb      	strb	r3, [r7, #3]
 80020be:	4613      	mov	r3, r2
 80020c0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80020ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020ce:	085b      	lsrs	r3, r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	08db      	lsrs	r3, r3, #3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	fb12 f303 	smulbb	r3, r2, r3
 80020fa:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	3b20      	subs	r3, #32
 8002100:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	b29a      	uxth	r2, r3
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	4413      	add	r3, r2
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29c      	uxth	r4, r3
 8002110:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002114:	b29a      	uxth	r2, r3
 8002116:	88bb      	ldrh	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	b29b      	uxth	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b29b      	uxth	r3, r3
 8002120:	88b9      	ldrh	r1, [r7, #4]
 8002122:	88f8      	ldrh	r0, [r7, #6]
 8002124:	4622      	mov	r2, r4
 8002126:	f7ff ff1f 	bl	8001f68 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800212a:	2300      	movs	r3, #0
 800212c:	827b      	strh	r3, [r7, #18]
 800212e:	e07a      	b.n	8002226 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8002130:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002134:	2b0c      	cmp	r3, #12
 8002136:	d028      	beq.n	800218a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8002138:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800213c:	2b10      	cmp	r3, #16
 800213e:	d108      	bne.n	8002152 <lcd_ShowChar+0xae>
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	8a7b      	ldrh	r3, [r7, #18]
 8002144:	493c      	ldr	r1, [pc, #240]	; (8002238 <lcd_ShowChar+0x194>)
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	440a      	add	r2, r1
 800214a:	4413      	add	r3, r2
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	75fb      	strb	r3, [r7, #23]
 8002150:	e01b      	b.n	800218a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8002152:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002156:	2b18      	cmp	r3, #24
 8002158:	d10b      	bne.n	8002172 <lcd_ShowChar+0xce>
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	8a79      	ldrh	r1, [r7, #18]
 800215e:	4837      	ldr	r0, [pc, #220]	; (800223c <lcd_ShowChar+0x198>)
 8002160:	4613      	mov	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4413      	add	r3, r2
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	4403      	add	r3, r0
 800216a:	440b      	add	r3, r1
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	75fb      	strb	r3, [r7, #23]
 8002170:	e00b      	b.n	800218a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8002172:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002176:	2b20      	cmp	r3, #32
 8002178:	d15a      	bne.n	8002230 <lcd_ShowChar+0x18c>
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	8a7b      	ldrh	r3, [r7, #18]
 800217e:	4930      	ldr	r1, [pc, #192]	; (8002240 <lcd_ShowChar+0x19c>)
 8002180:	0192      	lsls	r2, r2, #6
 8002182:	440a      	add	r2, r1
 8002184:	4413      	add	r3, r2
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800218a:	2300      	movs	r3, #0
 800218c:	75bb      	strb	r3, [r7, #22]
 800218e:	e044      	b.n	800221a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8002190:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002194:	2b00      	cmp	r3, #0
 8002196:	d120      	bne.n	80021da <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8002198:	7dfa      	ldrb	r2, [r7, #23]
 800219a:	7dbb      	ldrb	r3, [r7, #22]
 800219c:	fa42 f303 	asr.w	r3, r2, r3
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d004      	beq.n	80021b2 <lcd_ShowChar+0x10e>
 80021a8:	883b      	ldrh	r3, [r7, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff feba 	bl	8001f24 <LCD_WR_DATA>
 80021b0:	e003      	b.n	80021ba <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80021b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff feb5 	bl	8001f24 <LCD_WR_DATA>
				m++;
 80021ba:	7d7b      	ldrb	r3, [r7, #21]
 80021bc:	3301      	adds	r3, #1
 80021be:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80021c0:	7d7b      	ldrb	r3, [r7, #21]
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80021c8:	fb01 f202 	mul.w	r2, r1, r2
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d11f      	bne.n	8002214 <lcd_ShowChar+0x170>
				{
					m=0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	757b      	strb	r3, [r7, #21]
					break;
 80021d8:	e022      	b.n	8002220 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80021da:	7dfa      	ldrb	r2, [r7, #23]
 80021dc:	7dbb      	ldrb	r3, [r7, #22]
 80021de:	fa42 f303 	asr.w	r3, r2, r3
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <lcd_ShowChar+0x152>
 80021ea:	883a      	ldrh	r2, [r7, #0]
 80021ec:	88b9      	ldrh	r1, [r7, #4]
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff3f 	bl	8002074 <lcd_DrawPoint>
				x++;
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	3301      	adds	r3, #1
 80021fa:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	8a3b      	ldrh	r3, [r7, #16]
 8002200:	1ad2      	subs	r2, r2, r3
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	429a      	cmp	r2, r3
 8002206:	d105      	bne.n	8002214 <lcd_ShowChar+0x170>
				{
					x=x0;
 8002208:	8a3b      	ldrh	r3, [r7, #16]
 800220a:	80fb      	strh	r3, [r7, #6]
					y++;
 800220c:	88bb      	ldrh	r3, [r7, #4]
 800220e:	3301      	adds	r3, #1
 8002210:	80bb      	strh	r3, [r7, #4]
					break;
 8002212:	e005      	b.n	8002220 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002214:	7dbb      	ldrb	r3, [r7, #22]
 8002216:	3301      	adds	r3, #1
 8002218:	75bb      	strb	r3, [r7, #22]
 800221a:	7dbb      	ldrb	r3, [r7, #22]
 800221c:	2b07      	cmp	r3, #7
 800221e:	d9b7      	bls.n	8002190 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002220:	8a7b      	ldrh	r3, [r7, #18]
 8002222:	3301      	adds	r3, #1
 8002224:	827b      	strh	r3, [r7, #18]
 8002226:	8a7a      	ldrh	r2, [r7, #18]
 8002228:	89bb      	ldrh	r3, [r7, #12]
 800222a:	429a      	cmp	r2, r3
 800222c:	d380      	bcc.n	8002130 <lcd_ShowChar+0x8c>
 800222e:	e000      	b.n	8002232 <lcd_ShowChar+0x18e>
		else return;
 8002230:	bf00      	nop
				}
			}
		}
	}
}
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	bd90      	pop	{r4, r7, pc}
 8002238:	08006720 	.word	0x08006720
 800223c:	08006d10 	.word	0x08006d10
 8002240:	08007ee0 	.word	0x08007ee0

08002244 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	460a      	mov	r2, r1
 800224e:	71fb      	strb	r3, [r7, #7]
 8002250:	4613      	mov	r3, r2
 8002252:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002254:	2301      	movs	r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8002258:	e004      	b.n	8002264 <mypow+0x20>
 800225a:	79fa      	ldrb	r2, [r7, #7]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	79bb      	ldrb	r3, [r7, #6]
 8002266:	1e5a      	subs	r2, r3, #1
 8002268:	71ba      	strb	r2, [r7, #6]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f5      	bne.n	800225a <mypow+0x16>
	return result;
 800226e:	68fb      	ldr	r3, [r7, #12]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 800227c:	b590      	push	{r4, r7, lr}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af04      	add	r7, sp, #16
 8002282:	4604      	mov	r4, r0
 8002284:	4608      	mov	r0, r1
 8002286:	4611      	mov	r1, r2
 8002288:	461a      	mov	r2, r3
 800228a:	4623      	mov	r3, r4
 800228c:	80fb      	strh	r3, [r7, #6]
 800228e:	4603      	mov	r3, r0
 8002290:	80bb      	strh	r3, [r7, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	807b      	strh	r3, [r7, #2]
 8002296:	4613      	mov	r3, r2
 8002298:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800229a:	2300      	movs	r3, #0
 800229c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 800229e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022a2:	085b      	lsrs	r3, r3, #1
 80022a4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e059      	b.n	8002360 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80022ac:	887c      	ldrh	r4, [r7, #2]
 80022ae:	787a      	ldrb	r2, [r7, #1]
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	4619      	mov	r1, r3
 80022bc:	200a      	movs	r0, #10
 80022be:	f7ff ffc1 	bl	8002244 <mypow>
 80022c2:	4603      	mov	r3, r0
 80022c4:	fbb4 f1f3 	udiv	r1, r4, r3
 80022c8:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <lcd_ShowIntNum+0xf8>)
 80022ca:	fba3 2301 	umull	r2, r3, r3, r1
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	1aca      	subs	r2, r1, r3
 80022da:	4613      	mov	r3, r2
 80022dc:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80022de:	7bbb      	ldrb	r3, [r7, #14]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d121      	bne.n	8002328 <lcd_ShowIntNum+0xac>
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	787b      	ldrb	r3, [r7, #1]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	429a      	cmp	r2, r3
 80022ec:	da1c      	bge.n	8002328 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80022ee:	7b3b      	ldrb	r3, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d117      	bne.n	8002324 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	7b7b      	ldrb	r3, [r7, #13]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	fb12 f303 	smulbb	r3, r2, r3
 8002300:	b29a      	uxth	r2, r3
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	4413      	add	r3, r2
 8002306:	b298      	uxth	r0, r3
 8002308:	8c3a      	ldrh	r2, [r7, #32]
 800230a:	88b9      	ldrh	r1, [r7, #4]
 800230c:	2300      	movs	r3, #0
 800230e:	9302      	str	r3, [sp, #8]
 8002310:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	4613      	mov	r3, r2
 800231c:	2220      	movs	r2, #32
 800231e:	f7ff fec1 	bl	80020a4 <lcd_ShowChar>
				continue;
 8002322:	e01a      	b.n	800235a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002324:	2301      	movs	r3, #1
 8002326:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	b29a      	uxth	r2, r3
 800232c:	7b7b      	ldrb	r3, [r7, #13]
 800232e:	b29b      	uxth	r3, r3
 8002330:	fb12 f303 	smulbb	r3, r2, r3
 8002334:	b29a      	uxth	r2, r3
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	4413      	add	r3, r2
 800233a:	b298      	uxth	r0, r3
 800233c:	7b3b      	ldrb	r3, [r7, #12]
 800233e:	3330      	adds	r3, #48	; 0x30
 8002340:	b2da      	uxtb	r2, r3
 8002342:	8c3c      	ldrh	r4, [r7, #32]
 8002344:	88b9      	ldrh	r1, [r7, #4]
 8002346:	2300      	movs	r3, #0
 8002348:	9302      	str	r3, [sp, #8]
 800234a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	4623      	mov	r3, r4
 8002356:	f7ff fea5 	bl	80020a4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	3301      	adds	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	787b      	ldrb	r3, [r7, #1]
 8002364:	429a      	cmp	r2, r3
 8002366:	d3a1      	bcc.n	80022ac <lcd_ShowIntNum+0x30>
	}
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}
 8002372:	bf00      	nop
 8002374:	cccccccd 	.word	0xcccccccd

08002378 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <lcd_SetDir+0x44>)
 8002394:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002398:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <lcd_SetDir+0x44>)
 800239c:	22f0      	movs	r2, #240	; 0xf0
 800239e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80023a0:	e006      	b.n	80023b0 <lcd_SetDir+0x38>
		lcddev.width=240;
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <lcd_SetDir+0x44>)
 80023a4:	22f0      	movs	r2, #240	; 0xf0
 80023a6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <lcd_SetDir+0x44>)
 80023aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023ae:	805a      	strh	r2, [r3, #2]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	200001a8 	.word	0x200001a8

080023c0 <lcd_init>:


void lcd_init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80023c4:	2200      	movs	r2, #0
 80023c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ca:	48aa      	ldr	r0, [pc, #680]	; (8002674 <lcd_init+0x2b4>)
 80023cc:	f001 f89e 	bl	800350c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80023d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023d4:	f000 fdc8 	bl	8002f68 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80023d8:	2201      	movs	r2, #1
 80023da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023de:	48a5      	ldr	r0, [pc, #660]	; (8002674 <lcd_init+0x2b4>)
 80023e0:	f001 f894 	bl	800350c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80023e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023e8:	f000 fdbe 	bl	8002f68 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7ff ffc3 	bl	8002378 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80023f2:	20d3      	movs	r0, #211	; 0xd3
 80023f4:	f7ff fd86 	bl	8001f04 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80023f8:	f7ff fda4 	bl	8001f44 <LCD_RD_DATA>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461a      	mov	r2, r3
 8002400:	4b9d      	ldr	r3, [pc, #628]	; (8002678 <lcd_init+0x2b8>)
 8002402:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002404:	f7ff fd9e 	bl	8001f44 <LCD_RD_DATA>
 8002408:	4603      	mov	r3, r0
 800240a:	461a      	mov	r2, r3
 800240c:	4b9a      	ldr	r3, [pc, #616]	; (8002678 <lcd_init+0x2b8>)
 800240e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002410:	f7ff fd98 	bl	8001f44 <LCD_RD_DATA>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	4b97      	ldr	r3, [pc, #604]	; (8002678 <lcd_init+0x2b8>)
 800241a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800241c:	4b96      	ldr	r3, [pc, #600]	; (8002678 <lcd_init+0x2b8>)
 800241e:	889b      	ldrh	r3, [r3, #4]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	b29a      	uxth	r2, r3
 8002424:	4b94      	ldr	r3, [pc, #592]	; (8002678 <lcd_init+0x2b8>)
 8002426:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002428:	f7ff fd8c 	bl	8001f44 <LCD_RD_DATA>
 800242c:	4603      	mov	r3, r0
 800242e:	461a      	mov	r2, r3
 8002430:	4b91      	ldr	r3, [pc, #580]	; (8002678 <lcd_init+0x2b8>)
 8002432:	889b      	ldrh	r3, [r3, #4]
 8002434:	4313      	orrs	r3, r2
 8002436:	b29a      	uxth	r2, r3
 8002438:	4b8f      	ldr	r3, [pc, #572]	; (8002678 <lcd_init+0x2b8>)
 800243a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800243c:	20cf      	movs	r0, #207	; 0xcf
 800243e:	f7ff fd61 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002442:	2000      	movs	r0, #0
 8002444:	f7ff fd6e 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002448:	20c1      	movs	r0, #193	; 0xc1
 800244a:	f7ff fd6b 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800244e:	2030      	movs	r0, #48	; 0x30
 8002450:	f7ff fd68 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002454:	20ed      	movs	r0, #237	; 0xed
 8002456:	f7ff fd55 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800245a:	2064      	movs	r0, #100	; 0x64
 800245c:	f7ff fd62 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002460:	2003      	movs	r0, #3
 8002462:	f7ff fd5f 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8002466:	2012      	movs	r0, #18
 8002468:	f7ff fd5c 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800246c:	2081      	movs	r0, #129	; 0x81
 800246e:	f7ff fd59 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002472:	20e8      	movs	r0, #232	; 0xe8
 8002474:	f7ff fd46 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002478:	2085      	movs	r0, #133	; 0x85
 800247a:	f7ff fd53 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800247e:	2010      	movs	r0, #16
 8002480:	f7ff fd50 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002484:	207a      	movs	r0, #122	; 0x7a
 8002486:	f7ff fd4d 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800248a:	20cb      	movs	r0, #203	; 0xcb
 800248c:	f7ff fd3a 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002490:	2039      	movs	r0, #57	; 0x39
 8002492:	f7ff fd47 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8002496:	202c      	movs	r0, #44	; 0x2c
 8002498:	f7ff fd44 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800249c:	2000      	movs	r0, #0
 800249e:	f7ff fd41 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80024a2:	2034      	movs	r0, #52	; 0x34
 80024a4:	f7ff fd3e 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80024a8:	2002      	movs	r0, #2
 80024aa:	f7ff fd3b 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80024ae:	20f7      	movs	r0, #247	; 0xf7
 80024b0:	f7ff fd28 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80024b4:	2020      	movs	r0, #32
 80024b6:	f7ff fd35 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80024ba:	20ea      	movs	r0, #234	; 0xea
 80024bc:	f7ff fd22 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7ff fd2f 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7ff fd2c 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80024cc:	20c0      	movs	r0, #192	; 0xc0
 80024ce:	f7ff fd19 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80024d2:	201b      	movs	r0, #27
 80024d4:	f7ff fd26 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80024d8:	20c1      	movs	r0, #193	; 0xc1
 80024da:	f7ff fd13 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80024de:	2001      	movs	r0, #1
 80024e0:	f7ff fd20 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80024e4:	20c5      	movs	r0, #197	; 0xc5
 80024e6:	f7ff fd0d 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80024ea:	2030      	movs	r0, #48	; 0x30
 80024ec:	f7ff fd1a 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80024f0:	2030      	movs	r0, #48	; 0x30
 80024f2:	f7ff fd17 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80024f6:	20c7      	movs	r0, #199	; 0xc7
 80024f8:	f7ff fd04 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80024fc:	20b7      	movs	r0, #183	; 0xb7
 80024fe:	f7ff fd11 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002502:	2036      	movs	r0, #54	; 0x36
 8002504:	f7ff fcfe 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8002508:	2008      	movs	r0, #8
 800250a:	f7ff fd0b 	bl	8001f24 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 800250e:	203a      	movs	r0, #58	; 0x3a
 8002510:	f7ff fcf8 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002514:	2055      	movs	r0, #85	; 0x55
 8002516:	f7ff fd05 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800251a:	20b1      	movs	r0, #177	; 0xb1
 800251c:	f7ff fcf2 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002520:	2000      	movs	r0, #0
 8002522:	f7ff fcff 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002526:	201a      	movs	r0, #26
 8002528:	f7ff fcfc 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800252c:	20b6      	movs	r0, #182	; 0xb6
 800252e:	f7ff fce9 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002532:	200a      	movs	r0, #10
 8002534:	f7ff fcf6 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002538:	20a2      	movs	r0, #162	; 0xa2
 800253a:	f7ff fcf3 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800253e:	20f2      	movs	r0, #242	; 0xf2
 8002540:	f7ff fce0 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002544:	2000      	movs	r0, #0
 8002546:	f7ff fced 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800254a:	2026      	movs	r0, #38	; 0x26
 800254c:	f7ff fcda 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002550:	2001      	movs	r0, #1
 8002552:	f7ff fce7 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002556:	20e0      	movs	r0, #224	; 0xe0
 8002558:	f7ff fcd4 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800255c:	200f      	movs	r0, #15
 800255e:	f7ff fce1 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002562:	202a      	movs	r0, #42	; 0x2a
 8002564:	f7ff fcde 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002568:	2028      	movs	r0, #40	; 0x28
 800256a:	f7ff fcdb 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800256e:	2008      	movs	r0, #8
 8002570:	f7ff fcd8 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002574:	200e      	movs	r0, #14
 8002576:	f7ff fcd5 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800257a:	2008      	movs	r0, #8
 800257c:	f7ff fcd2 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002580:	2054      	movs	r0, #84	; 0x54
 8002582:	f7ff fccf 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002586:	20a9      	movs	r0, #169	; 0xa9
 8002588:	f7ff fccc 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 800258c:	2043      	movs	r0, #67	; 0x43
 800258e:	f7ff fcc9 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002592:	200a      	movs	r0, #10
 8002594:	f7ff fcc6 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002598:	200f      	movs	r0, #15
 800259a:	f7ff fcc3 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800259e:	2000      	movs	r0, #0
 80025a0:	f7ff fcc0 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80025a4:	2000      	movs	r0, #0
 80025a6:	f7ff fcbd 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80025aa:	2000      	movs	r0, #0
 80025ac:	f7ff fcba 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7ff fcb7 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80025b6:	20e1      	movs	r0, #225	; 0xe1
 80025b8:	f7ff fca4 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7ff fcb1 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80025c2:	2015      	movs	r0, #21
 80025c4:	f7ff fcae 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80025c8:	2017      	movs	r0, #23
 80025ca:	f7ff fcab 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80025ce:	2007      	movs	r0, #7
 80025d0:	f7ff fca8 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80025d4:	2011      	movs	r0, #17
 80025d6:	f7ff fca5 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80025da:	2006      	movs	r0, #6
 80025dc:	f7ff fca2 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80025e0:	202b      	movs	r0, #43	; 0x2b
 80025e2:	f7ff fc9f 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80025e6:	2056      	movs	r0, #86	; 0x56
 80025e8:	f7ff fc9c 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80025ec:	203c      	movs	r0, #60	; 0x3c
 80025ee:	f7ff fc99 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80025f2:	2005      	movs	r0, #5
 80025f4:	f7ff fc96 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80025f8:	2010      	movs	r0, #16
 80025fa:	f7ff fc93 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80025fe:	200f      	movs	r0, #15
 8002600:	f7ff fc90 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002604:	203f      	movs	r0, #63	; 0x3f
 8002606:	f7ff fc8d 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800260a:	203f      	movs	r0, #63	; 0x3f
 800260c:	f7ff fc8a 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002610:	200f      	movs	r0, #15
 8002612:	f7ff fc87 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002616:	202b      	movs	r0, #43	; 0x2b
 8002618:	f7ff fc74 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800261c:	2000      	movs	r0, #0
 800261e:	f7ff fc81 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002622:	2000      	movs	r0, #0
 8002624:	f7ff fc7e 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002628:	2001      	movs	r0, #1
 800262a:	f7ff fc7b 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800262e:	203f      	movs	r0, #63	; 0x3f
 8002630:	f7ff fc78 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002634:	202a      	movs	r0, #42	; 0x2a
 8002636:	f7ff fc65 	bl	8001f04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800263a:	2000      	movs	r0, #0
 800263c:	f7ff fc72 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002640:	2000      	movs	r0, #0
 8002642:	f7ff fc6f 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002646:	2000      	movs	r0, #0
 8002648:	f7ff fc6c 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800264c:	20ef      	movs	r0, #239	; 0xef
 800264e:	f7ff fc69 	bl	8001f24 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002652:	2011      	movs	r0, #17
 8002654:	f7ff fc56 	bl	8001f04 <LCD_WR_REG>
	HAL_Delay(120);
 8002658:	2078      	movs	r0, #120	; 0x78
 800265a:	f000 fc85 	bl	8002f68 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800265e:	2029      	movs	r0, #41	; 0x29
 8002660:	f7ff fc50 	bl	8001f04 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002664:	2201      	movs	r2, #1
 8002666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800266a:	4804      	ldr	r0, [pc, #16]	; (800267c <lcd_init+0x2bc>)
 800266c:	f000 ff4e 	bl	800350c <HAL_GPIO_WritePin>
}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40020800 	.word	0x40020800
 8002678:	200001a8 	.word	0x200001a8
 800267c:	40020000 	.word	0x40020000

08002680 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b08b      	sub	sp, #44	; 0x2c
 8002684:	af04      	add	r7, sp, #16
 8002686:	60ba      	str	r2, [r7, #8]
 8002688:	461a      	mov	r2, r3
 800268a:	4603      	mov	r3, r0
 800268c:	81fb      	strh	r3, [r7, #14]
 800268e:	460b      	mov	r3, r1
 8002690:	81bb      	strh	r3, [r7, #12]
 8002692:	4613      	mov	r3, r2
 8002694:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8002696:	89fb      	ldrh	r3, [r7, #14]
 8002698:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800269e:	e048      	b.n	8002732 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d145      	bne.n	8002732 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80026a6:	89fa      	ldrh	r2, [r7, #14]
 80026a8:	4b26      	ldr	r3, [pc, #152]	; (8002744 <lcd_ShowStr+0xc4>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	1acb      	subs	r3, r1, r3
 80026b8:	429a      	cmp	r2, r3
 80026ba:	dc3f      	bgt.n	800273c <lcd_ShowStr+0xbc>
 80026bc:	89ba      	ldrh	r2, [r7, #12]
 80026be:	4b21      	ldr	r3, [pc, #132]	; (8002744 <lcd_ShowStr+0xc4>)
 80026c0:	885b      	ldrh	r3, [r3, #2]
 80026c2:	4619      	mov	r1, r3
 80026c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80026c8:	1acb      	subs	r3, r1, r3
 80026ca:	429a      	cmp	r2, r3
 80026cc:	dc36      	bgt.n	800273c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b80      	cmp	r3, #128	; 0x80
 80026d4:	d902      	bls.n	80026dc <lcd_ShowStr+0x5c>
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
 80026da:	e02a      	b.n	8002732 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b0d      	cmp	r3, #13
 80026e2:	d10b      	bne.n	80026fc <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80026e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	89bb      	ldrh	r3, [r7, #12]
 80026ec:	4413      	add	r3, r2
 80026ee:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80026f0:	8abb      	ldrh	r3, [r7, #20]
 80026f2:	81fb      	strh	r3, [r7, #14]
					str++;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	3301      	adds	r3, #1
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	e017      	b.n	800272c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	88fc      	ldrh	r4, [r7, #6]
 8002702:	89b9      	ldrh	r1, [r7, #12]
 8002704:	89f8      	ldrh	r0, [r7, #14]
 8002706:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800270a:	9302      	str	r3, [sp, #8]
 800270c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	4623      	mov	r3, r4
 8002718:	f7ff fcc4 	bl	80020a4 <lcd_ShowChar>
					x+=sizey/2;
 800271c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	b29a      	uxth	r2, r3
 8002726:	89fb      	ldrh	r3, [r7, #14]
 8002728:	4413      	add	r3, r2
 800272a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	3301      	adds	r3, #1
 8002730:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1b2      	bne.n	80026a0 <lcd_ShowStr+0x20>
 800273a:	e000      	b.n	800273e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800273c:	bf00      	nop
			}
		}
	}
}
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd90      	pop	{r4, r7, pc}
 8002744:	200001a8 	.word	0x200001a8

08002748 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af04      	add	r7, sp, #16
 800274e:	60ba      	str	r2, [r7, #8]
 8002750:	461a      	mov	r2, r3
 8002752:	4603      	mov	r3, r0
 8002754:	81fb      	strh	r3, [r7, #14]
 8002756:	460b      	mov	r3, r1
 8002758:	81bb      	strh	r3, [r7, #12]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800275e:	68b8      	ldr	r0, [r7, #8]
 8002760:	f7fd fd32 	bl	80001c8 <strlen>
 8002764:	4603      	mov	r3, r0
 8002766:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <lcd_StrCenter+0x60>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	8afb      	ldrh	r3, [r7, #22]
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	0fda      	lsrs	r2, r3, #31
 8002776:	4413      	add	r3, r2
 8002778:	105b      	asrs	r3, r3, #1
 800277a:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 800277c:	89fa      	ldrh	r2, [r7, #14]
 800277e:	8abb      	ldrh	r3, [r7, #20]
 8002780:	4413      	add	r3, r2
 8002782:	b298      	uxth	r0, r3
 8002784:	88fa      	ldrh	r2, [r7, #6]
 8002786:	89b9      	ldrh	r1, [r7, #12]
 8002788:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800278c:	9302      	str	r3, [sp, #8]
 800278e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	8c3b      	ldrh	r3, [r7, #32]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	f7ff ff70 	bl	8002680 <lcd_ShowStr>
}
 80027a0:	bf00      	nop
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200001a8 	.word	0x200001a8

080027ac <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80027b0:	2201      	movs	r2, #1
 80027b2:	2140      	movs	r1, #64	; 0x40
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <led7_init+0x14>)
 80027b6:	f000 fea9 	bl	800350c <HAL_GPIO_WritePin>
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40021800 	.word	0x40021800

080027c4 <led7_Scan>:

void led7_Scan(){
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80027c8:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <led7_Scan+0x104>)
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <led7_Scan+0x104>)
 80027d2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80027d4:	4b3d      	ldr	r3, [pc, #244]	; (80028cc <led7_Scan+0x108>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a3d      	ldr	r2, [pc, #244]	; (80028d0 <led7_Scan+0x10c>)
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	b21a      	sxth	r2, r3
 80027e0:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <led7_Scan+0x104>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b21b      	sxth	r3, r3
 80027e6:	4313      	orrs	r3, r2
 80027e8:	b21b      	sxth	r3, r3
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <led7_Scan+0x104>)
 80027ee:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80027f0:	4b36      	ldr	r3, [pc, #216]	; (80028cc <led7_Scan+0x108>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d847      	bhi.n	8002888 <led7_Scan+0xc4>
 80027f8:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <led7_Scan+0x3c>)
 80027fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fe:	bf00      	nop
 8002800:	08002811 	.word	0x08002811
 8002804:	0800282f 	.word	0x0800282f
 8002808:	0800284d 	.word	0x0800284d
 800280c:	0800286b 	.word	0x0800286b
	case 0:
		spi_buffer |= 0x00b0;
 8002810:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <led7_Scan+0x104>)
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002818:	b29a      	uxth	r2, r3
 800281a:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <led7_Scan+0x104>)
 800281c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800281e:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <led7_Scan+0x104>)
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002826:	b29a      	uxth	r2, r3
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <led7_Scan+0x104>)
 800282a:	801a      	strh	r2, [r3, #0]
		break;
 800282c:	e02d      	b.n	800288a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800282e:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <led7_Scan+0x104>)
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8002836:	b29a      	uxth	r2, r3
 8002838:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <led7_Scan+0x104>)
 800283a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800283c:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <led7_Scan+0x104>)
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	f023 0320 	bic.w	r3, r3, #32
 8002844:	b29a      	uxth	r2, r3
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <led7_Scan+0x104>)
 8002848:	801a      	strh	r2, [r3, #0]
		break;
 800284a:	e01e      	b.n	800288a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800284c:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <led7_Scan+0x104>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002854:	b29a      	uxth	r2, r3
 8002856:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <led7_Scan+0x104>)
 8002858:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800285a:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <led7_Scan+0x104>)
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	f023 0310 	bic.w	r3, r3, #16
 8002862:	b29a      	uxth	r2, r3
 8002864:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <led7_Scan+0x104>)
 8002866:	801a      	strh	r2, [r3, #0]
		break;
 8002868:	e00f      	b.n	800288a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800286a:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <led7_Scan+0x104>)
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002872:	b29a      	uxth	r2, r3
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <led7_Scan+0x104>)
 8002876:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <led7_Scan+0x104>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002880:	b29a      	uxth	r2, r3
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <led7_Scan+0x104>)
 8002884:	801a      	strh	r2, [r3, #0]
		break;
 8002886:	e000      	b.n	800288a <led7_Scan+0xc6>
	default:
		break;
 8002888:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <led7_Scan+0x108>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3301      	adds	r3, #1
 8002890:	425a      	negs	r2, r3
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	f002 0203 	and.w	r2, r2, #3
 800289a:	bf58      	it	pl
 800289c:	4253      	negpl	r3, r2
 800289e:	4a0b      	ldr	r2, [pc, #44]	; (80028cc <led7_Scan+0x108>)
 80028a0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2140      	movs	r1, #64	; 0x40
 80028a6:	480b      	ldr	r0, [pc, #44]	; (80028d4 <led7_Scan+0x110>)
 80028a8:	f000 fe30 	bl	800350c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80028ac:	2301      	movs	r3, #1
 80028ae:	2202      	movs	r2, #2
 80028b0:	4905      	ldr	r1, [pc, #20]	; (80028c8 <led7_Scan+0x104>)
 80028b2:	4809      	ldr	r0, [pc, #36]	; (80028d8 <led7_Scan+0x114>)
 80028b4:	f002 fc3f 	bl	8005136 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80028b8:	2201      	movs	r2, #1
 80028ba:	2140      	movs	r1, #64	; 0x40
 80028bc:	4805      	ldr	r0, [pc, #20]	; (80028d4 <led7_Scan+0x110>)
 80028be:	f000 fe25 	bl	800350c <HAL_GPIO_WritePin>
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000004 	.word	0x20000004
 80028cc:	200001b0 	.word	0x200001b0
 80028d0:	20000000 	.word	0x20000000
 80028d4:	40021800 	.word	0x40021800
 80028d8:	200001bc 	.word	0x200001bc

080028dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028e0:	f000 fad0 	bl	8002e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028e4:	f000 f826 	bl	8002934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028e8:	f7ff f99e 	bl	8001c28 <MX_GPIO_Init>
  MX_TIM2_Init();
 80028ec:	f000 f9f0 	bl	8002cd0 <MX_TIM2_Init>
  MX_SPI1_Init();
 80028f0:	f000 f902 	bl	8002af8 <MX_SPI1_Init>
  MX_FSMC_Init();
 80028f4:	f7fe fc3e 	bl	8001174 <MX_FSMC_Init>
  MX_I2C1_Init();
 80028f8:	f7ff fa8e 	bl	8001e18 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80028fc:	f000 f884 	bl	8002a08 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(BLACK);
 8002900:	2000      	movs	r0, #0
 8002902:	f7ff fb7d 	bl	8002000 <lcd_Clear>
  init_value();
 8002906:	f7fe fd05 	bl	8001314 <init_value>
  updateTime();
 800290a:	f7ff f855 	bl	80019b8 <updateTime>
  updateAlarm();
 800290e:	f7ff f899 	bl	8001a44 <updateAlarm>
  while (1)
  {
    while (!flag_timer2)
 8002912:	bf00      	nop
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <main+0x54>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0fb      	beq.n	8002914 <main+0x38>
      ;
    flag_timer2 = 0;
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <main+0x54>)
 800291e:	2200      	movs	r2, #0
 8002920:	801a      	strh	r2, [r3, #0]
    button_Scan();
 8002922:	f7fd fde7 	bl	80004f4 <button_Scan>
    fsm_clock();
 8002926:	f7fd ff57 	bl	80007d8 <fsm_clock>
    fsm_alarm();
 800292a:	f7fe fadb 	bl	8000ee4 <fsm_alarm>
    while (!flag_timer2)
 800292e:	e7f0      	b.n	8002912 <main+0x36>
 8002930:	200001b4 	.word	0x200001b4

08002934 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b094      	sub	sp, #80	; 0x50
 8002938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800293a:	f107 0320 	add.w	r3, r7, #32
 800293e:	2230      	movs	r2, #48	; 0x30
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f003 fed0 	bl	80066e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002948:	f107 030c 	add.w	r3, r7, #12
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <SystemClock_Config+0xcc>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <SystemClock_Config+0xcc>)
 8002962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002966:	6413      	str	r3, [r2, #64]	; 0x40
 8002968:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <SystemClock_Config+0xcc>)
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002974:	2300      	movs	r3, #0
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <SystemClock_Config+0xd0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a21      	ldr	r2, [pc, #132]	; (8002a04 <SystemClock_Config+0xd0>)
 800297e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <SystemClock_Config+0xd0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002990:	2302      	movs	r3, #2
 8002992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002994:	2301      	movs	r3, #1
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002998:	2310      	movs	r3, #16
 800299a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800299c:	2302      	movs	r3, #2
 800299e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029a0:	2300      	movs	r3, #0
 80029a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029a4:	2308      	movs	r3, #8
 80029a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80029a8:	23a8      	movs	r3, #168	; 0xa8
 80029aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029ac:	2302      	movs	r3, #2
 80029ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80029b0:	2304      	movs	r3, #4
 80029b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029b4:	f107 0320 	add.w	r3, r7, #32
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 feaf 	bl	800471c <HAL_RCC_OscConfig>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80029c4:	f000 f842 	bl	8002a4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029c8:	230f      	movs	r3, #15
 80029ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029cc:	2302      	movs	r3, #2
 80029ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80029da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029e0:	f107 030c 	add.w	r3, r7, #12
 80029e4:	2105      	movs	r1, #5
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 f910 	bl	8004c0c <HAL_RCC_ClockConfig>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80029f2:	f000 f82b 	bl	8002a4c <Error_Handler>
  }
}
 80029f6:	bf00      	nop
 80029f8:	3750      	adds	r7, #80	; 0x50
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40007000 	.word	0x40007000

08002a08 <system_init>:

/* USER CODE BEGIN 4 */
void system_init()
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2120      	movs	r1, #32
 8002a10:	480d      	ldr	r0, [pc, #52]	; (8002a48 <system_init+0x40>)
 8002a12:	f000 fd7b 	bl	800350c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2140      	movs	r1, #64	; 0x40
 8002a1a:	480b      	ldr	r0, [pc, #44]	; (8002a48 <system_init+0x40>)
 8002a1c:	f000 fd76 	bl	800350c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2110      	movs	r1, #16
 8002a24:	4808      	ldr	r0, [pc, #32]	; (8002a48 <system_init+0x40>)
 8002a26:	f000 fd71 	bl	800350c <HAL_GPIO_WritePin>
  timer_init();
 8002a2a:	f000 f815 	bl	8002a58 <timer_init>
  led7_init();
 8002a2e:	f7ff febd 	bl	80027ac <led7_init>
  button_init();
 8002a32:	f7fd fd53 	bl	80004dc <button_init>
  lcd_init();
 8002a36:	f7ff fcc3 	bl	80023c0 <lcd_init>
  ds3231_init();
 8002a3a:	f7fd fdc7 	bl	80005cc <ds3231_init>
  setTimer2(50);
 8002a3e:	2032      	movs	r0, #50	; 0x32
 8002a40:	f000 f814 	bl	8002a6c <setTimer2>
}
 8002a44:	bf00      	nop
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000

08002a4c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a50:	b672      	cpsid	i
}
 8002a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a54:	e7fe      	b.n	8002a54 <Error_Handler+0x8>
	...

08002a58 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <timer_init+0x10>)
 8002a5e:	f003 f91d 	bl	8005c9c <HAL_TIM_Base_Start_IT>
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000214 	.word	0x20000214

08002a6c <setTimer2>:

void setTimer2(uint16_t duration){
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002a76:	4a08      	ldr	r2, [pc, #32]	; (8002a98 <setTimer2+0x2c>)
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <setTimer2+0x2c>)
 8002a7e:	881a      	ldrh	r2, [r3, #0]
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <setTimer2+0x30>)
 8002a82:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <setTimer2+0x34>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	801a      	strh	r2, [r3, #0]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	200001b8 	.word	0x200001b8
 8002a9c:	200001b6 	.word	0x200001b6
 8002aa0:	200001b4 	.word	0x200001b4

08002aa4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab4:	d116      	bne.n	8002ae4 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d010      	beq.n	8002ae0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002abe:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ac8:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002ada:	881a      	ldrh	r2, [r3, #0]
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ade:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002ae0:	f7ff fe70 	bl	80027c4 <led7_Scan>
	}
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	200001b6 	.word	0x200001b6
 8002af0:	200001b4 	.word	0x200001b4
 8002af4:	200001b8 	.word	0x200001b8

08002af8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002afe:	4a18      	ldr	r2, [pc, #96]	; (8002b60 <MX_SPI1_Init+0x68>)
 8002b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b02:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b3c:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b44:	220a      	movs	r2, #10
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b48:	4804      	ldr	r0, [pc, #16]	; (8002b5c <MX_SPI1_Init+0x64>)
 8002b4a:	f002 fa6b 	bl	8005024 <HAL_SPI_Init>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b54:	f7ff ff7a 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	200001bc 	.word	0x200001bc
 8002b60:	40013000 	.word	0x40013000

08002b64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a19      	ldr	r2, [pc, #100]	; (8002be8 <HAL_SPI_MspInit+0x84>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d12b      	bne.n	8002bde <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	4b18      	ldr	r3, [pc, #96]	; (8002bec <HAL_SPI_MspInit+0x88>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	4a17      	ldr	r2, [pc, #92]	; (8002bec <HAL_SPI_MspInit+0x88>)
 8002b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b94:	6453      	str	r3, [r2, #68]	; 0x44
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_SPI_MspInit+0x88>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_SPI_MspInit+0x88>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a10      	ldr	r2, [pc, #64]	; (8002bec <HAL_SPI_MspInit+0x88>)
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <HAL_SPI_MspInit+0x88>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002bbe:	2338      	movs	r3, #56	; 0x38
 8002bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bce:	2305      	movs	r3, #5
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd2:	f107 0314 	add.w	r3, r7, #20
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <HAL_SPI_MspInit+0x8c>)
 8002bda:	f000 fafb 	bl	80031d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002bde:	bf00      	nop
 8002be0:	3728      	adds	r7, #40	; 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40013000 	.word	0x40013000
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40020400 	.word	0x40020400

08002bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_MspInit+0x4c>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	4a0f      	ldr	r2, [pc, #60]	; (8002c40 <HAL_MspInit+0x4c>)
 8002c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c08:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <HAL_MspInit+0x4c>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c12:	607b      	str	r3, [r7, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <HAL_MspInit+0x4c>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	4a08      	ldr	r2, [pc, #32]	; (8002c40 <HAL_MspInit+0x4c>)
 8002c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c24:	6413      	str	r3, [r2, #64]	; 0x40
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_MspInit+0x4c>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800

08002c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c48:	e7fe      	b.n	8002c48 <NMI_Handler+0x4>

08002c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c4e:	e7fe      	b.n	8002c4e <HardFault_Handler+0x4>

08002c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c54:	e7fe      	b.n	8002c54 <MemManage_Handler+0x4>

08002c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c5a:	e7fe      	b.n	8002c5a <BusFault_Handler+0x4>

08002c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c60:	e7fe      	b.n	8002c60 <UsageFault_Handler+0x4>

08002c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c90:	f000 f94a 	bl	8002f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <TIM2_IRQHandler+0x10>)
 8002c9e:	f003 f86d 	bl	8005d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000214 	.word	0x20000214

08002cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <SystemInit+0x20>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <SystemInit+0x20>)
 8002cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cd6:	f107 0308 	add.w	r3, r7, #8
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce4:	463b      	mov	r3, r7
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cec:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <MX_TIM2_Init+0x94>)
 8002cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <MX_TIM2_Init+0x94>)
 8002cf6:	f240 3247 	movw	r2, #839	; 0x347
 8002cfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <MX_TIM2_Init+0x94>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002d02:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <MX_TIM2_Init+0x94>)
 8002d04:	2263      	movs	r2, #99	; 0x63
 8002d06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d08:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <MX_TIM2_Init+0x94>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <MX_TIM2_Init+0x94>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d14:	4813      	ldr	r0, [pc, #76]	; (8002d64 <MX_TIM2_Init+0x94>)
 8002d16:	f002 ff71 	bl	8005bfc <HAL_TIM_Base_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d20:	f7ff fe94 	bl	8002a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d2a:	f107 0308 	add.w	r3, r7, #8
 8002d2e:	4619      	mov	r1, r3
 8002d30:	480c      	ldr	r0, [pc, #48]	; (8002d64 <MX_TIM2_Init+0x94>)
 8002d32:	f003 f92b 	bl	8005f8c <HAL_TIM_ConfigClockSource>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d3c:	f7ff fe86 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d40:	2300      	movs	r3, #0
 8002d42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d48:	463b      	mov	r3, r7
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4805      	ldr	r0, [pc, #20]	; (8002d64 <MX_TIM2_Init+0x94>)
 8002d4e:	f003 fb47 	bl	80063e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002d58:	f7ff fe78 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d5c:	bf00      	nop
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000214 	.word	0x20000214

08002d68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d78:	d115      	bne.n	8002da6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <HAL_TIM_Base_MspInit+0x48>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4a0b      	ldr	r2, [pc, #44]	; (8002db0 <HAL_TIM_Base_MspInit+0x48>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_TIM_Base_MspInit+0x48>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d96:	2200      	movs	r2, #0
 8002d98:	2100      	movs	r1, #0
 8002d9a:	201c      	movs	r0, #28
 8002d9c:	f000 f9e3 	bl	8003166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002da0:	201c      	movs	r0, #28
 8002da2:	f000 f9fc 	bl	800319e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800

08002db4 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	0092      	lsls	r2, r2, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	b2db      	uxtb	r3, r3
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	4a0d      	ldr	r2, [pc, #52]	; (8002e2c <DEC2BCD+0x44>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	08db      	lsrs	r3, r3, #3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	b258      	sxtb	r0, r3
 8002e02:	79fa      	ldrb	r2, [r7, #7]
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <DEC2BCD+0x44>)
 8002e06:	fba3 1302 	umull	r1, r3, r3, r2
 8002e0a:	08d9      	lsrs	r1, r3, #3
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	b25b      	sxtb	r3, r3
 8002e1a:	4303      	orrs	r3, r0
 8002e1c:	b25b      	sxtb	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	cccccccd 	.word	0xcccccccd

08002e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e34:	480d      	ldr	r0, [pc, #52]	; (8002e6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e36:	490e      	ldr	r1, [pc, #56]	; (8002e70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e38:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e3c:	e002      	b.n	8002e44 <LoopCopyDataInit>

08002e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e42:	3304      	adds	r3, #4

08002e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e48:	d3f9      	bcc.n	8002e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e4a:	4a0b      	ldr	r2, [pc, #44]	; (8002e78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e4c:	4c0b      	ldr	r4, [pc, #44]	; (8002e7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e50:	e001      	b.n	8002e56 <LoopFillZerobss>

08002e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e54:	3204      	adds	r2, #4

08002e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e58:	d3fb      	bcc.n	8002e52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e5a:	f7ff ff27 	bl	8002cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e5e:	f003 fc1f 	bl	80066a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e62:	f7ff fd3b 	bl	80028dc <main>
  bx  lr    
 8002e66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e70:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002e74:	080096c8 	.word	0x080096c8
  ldr r2, =_sbss
 8002e78:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002e7c:	20000260 	.word	0x20000260

08002e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e80:	e7fe      	b.n	8002e80 <ADC_IRQHandler>
	...

08002e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e88:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <HAL_Init+0x40>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <HAL_Init+0x40>)
 8002e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_Init+0x40>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <HAL_Init+0x40>)
 8002e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <HAL_Init+0x40>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <HAL_Init+0x40>)
 8002ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eac:	2003      	movs	r0, #3
 8002eae:	f000 f94f 	bl	8003150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eb2:	200f      	movs	r0, #15
 8002eb4:	f000 f808 	bl	8002ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eb8:	f7ff fe9c 	bl	8002bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40023c00 	.word	0x40023c00

08002ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ed0:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <HAL_InitTick+0x54>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_InitTick+0x58>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f967 	bl	80031ba <HAL_SYSTICK_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e00e      	b.n	8002f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b0f      	cmp	r3, #15
 8002efa:	d80a      	bhi.n	8002f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002efc:	2200      	movs	r2, #0
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295
 8002f04:	f000 f92f 	bl	8003166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f08:	4a06      	ldr	r2, [pc, #24]	; (8002f24 <HAL_InitTick+0x5c>)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e000      	b.n	8002f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000008 	.word	0x20000008
 8002f20:	20000010 	.word	0x20000010
 8002f24:	2000000c 	.word	0x2000000c

08002f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_IncTick+0x20>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_IncTick+0x24>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4413      	add	r3, r2
 8002f38:	4a04      	ldr	r2, [pc, #16]	; (8002f4c <HAL_IncTick+0x24>)
 8002f3a:	6013      	str	r3, [r2, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000010 	.word	0x20000010
 8002f4c:	2000025c 	.word	0x2000025c

08002f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return uwTick;
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <HAL_GetTick+0x14>)
 8002f56:	681b      	ldr	r3, [r3, #0]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	2000025c 	.word	0x2000025c

08002f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f70:	f7ff ffee 	bl	8002f50 <HAL_GetTick>
 8002f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d005      	beq.n	8002f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <HAL_Delay+0x44>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f8e:	bf00      	nop
 8002f90:	f7ff ffde 	bl	8002f50 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d8f7      	bhi.n	8002f90 <HAL_Delay+0x28>
  {
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000010 	.word	0x20000010

08002fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe2:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	60d3      	str	r3, [r2, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <__NVIC_GetPriorityGrouping+0x18>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	f003 0307 	and.w	r3, r3, #7
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	2b00      	cmp	r3, #0
 8003024:	db0b      	blt.n	800303e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	f003 021f 	and.w	r2, r3, #31
 800302c:	4907      	ldr	r1, [pc, #28]	; (800304c <__NVIC_EnableIRQ+0x38>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2001      	movs	r0, #1
 8003036:	fa00 f202 	lsl.w	r2, r0, r2
 800303a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000e100 	.word	0xe000e100

08003050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	6039      	str	r1, [r7, #0]
 800305a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003060:	2b00      	cmp	r3, #0
 8003062:	db0a      	blt.n	800307a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	b2da      	uxtb	r2, r3
 8003068:	490c      	ldr	r1, [pc, #48]	; (800309c <__NVIC_SetPriority+0x4c>)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	0112      	lsls	r2, r2, #4
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	440b      	add	r3, r1
 8003074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003078:	e00a      	b.n	8003090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4908      	ldr	r1, [pc, #32]	; (80030a0 <__NVIC_SetPriority+0x50>)
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	3b04      	subs	r3, #4
 8003088:	0112      	lsls	r2, r2, #4
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	440b      	add	r3, r1
 800308e:	761a      	strb	r2, [r3, #24]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000e100 	.word	0xe000e100
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	; 0x24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f1c3 0307 	rsb	r3, r3, #7
 80030be:	2b04      	cmp	r3, #4
 80030c0:	bf28      	it	cs
 80030c2:	2304      	movcs	r3, #4
 80030c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3304      	adds	r3, #4
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d902      	bls.n	80030d4 <NVIC_EncodePriority+0x30>
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3b03      	subs	r3, #3
 80030d2:	e000      	b.n	80030d6 <NVIC_EncodePriority+0x32>
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	f04f 32ff 	mov.w	r2, #4294967295
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43da      	mvns	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	401a      	ands	r2, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ec:	f04f 31ff 	mov.w	r1, #4294967295
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	43d9      	mvns	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	4313      	orrs	r3, r2
         );
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3724      	adds	r7, #36	; 0x24
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3b01      	subs	r3, #1
 8003118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800311c:	d301      	bcc.n	8003122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800311e:	2301      	movs	r3, #1
 8003120:	e00f      	b.n	8003142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003122:	4a0a      	ldr	r2, [pc, #40]	; (800314c <SysTick_Config+0x40>)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3b01      	subs	r3, #1
 8003128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800312a:	210f      	movs	r1, #15
 800312c:	f04f 30ff 	mov.w	r0, #4294967295
 8003130:	f7ff ff8e 	bl	8003050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <SysTick_Config+0x40>)
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800313a:	4b04      	ldr	r3, [pc, #16]	; (800314c <SysTick_Config+0x40>)
 800313c:	2207      	movs	r2, #7
 800313e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	e000e010 	.word	0xe000e010

08003150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ff29 	bl	8002fb0 <__NVIC_SetPriorityGrouping>
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003166:	b580      	push	{r7, lr}
 8003168:	b086      	sub	sp, #24
 800316a:	af00      	add	r7, sp, #0
 800316c:	4603      	mov	r3, r0
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003178:	f7ff ff3e 	bl	8002ff8 <__NVIC_GetPriorityGrouping>
 800317c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	6978      	ldr	r0, [r7, #20]
 8003184:	f7ff ff8e 	bl	80030a4 <NVIC_EncodePriority>
 8003188:	4602      	mov	r2, r0
 800318a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff5d 	bl	8003050 <__NVIC_SetPriority>
}
 8003196:	bf00      	nop
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff ff31 	bl	8003014 <__NVIC_EnableIRQ>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ffa2 	bl	800310c <SysTick_Config>
 80031c8:	4603      	mov	r3, r0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	e16b      	b.n	80034c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031f0:	2201      	movs	r2, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	429a      	cmp	r2, r3
 800320a:	f040 815a 	bne.w	80034c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b01      	cmp	r3, #1
 8003218:	d005      	beq.n	8003226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003222:	2b02      	cmp	r3, #2
 8003224:	d130      	bne.n	8003288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	2203      	movs	r2, #3
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800325c:	2201      	movs	r2, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 0201 	and.w	r2, r3, #1
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b03      	cmp	r3, #3
 8003292:	d017      	beq.n	80032c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	2203      	movs	r2, #3
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d123      	bne.n	8003318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	08da      	lsrs	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3208      	adds	r2, #8
 80032d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	220f      	movs	r2, #15
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	08da      	lsrs	r2, r3, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3208      	adds	r2, #8
 8003312:	69b9      	ldr	r1, [r7, #24]
 8003314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	2203      	movs	r2, #3
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0203 	and.w	r2, r3, #3
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80b4 	beq.w	80034c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	4b60      	ldr	r3, [pc, #384]	; (80034e0 <HAL_GPIO_Init+0x30c>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	4a5f      	ldr	r2, [pc, #380]	; (80034e0 <HAL_GPIO_Init+0x30c>)
 8003364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003368:	6453      	str	r3, [r2, #68]	; 0x44
 800336a:	4b5d      	ldr	r3, [pc, #372]	; (80034e0 <HAL_GPIO_Init+0x30c>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003376:	4a5b      	ldr	r2, [pc, #364]	; (80034e4 <HAL_GPIO_Init+0x310>)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3302      	adds	r3, #2
 800337e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	220f      	movs	r2, #15
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a52      	ldr	r2, [pc, #328]	; (80034e8 <HAL_GPIO_Init+0x314>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d02b      	beq.n	80033fa <HAL_GPIO_Init+0x226>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a51      	ldr	r2, [pc, #324]	; (80034ec <HAL_GPIO_Init+0x318>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d025      	beq.n	80033f6 <HAL_GPIO_Init+0x222>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a50      	ldr	r2, [pc, #320]	; (80034f0 <HAL_GPIO_Init+0x31c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01f      	beq.n	80033f2 <HAL_GPIO_Init+0x21e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a4f      	ldr	r2, [pc, #316]	; (80034f4 <HAL_GPIO_Init+0x320>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d019      	beq.n	80033ee <HAL_GPIO_Init+0x21a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4e      	ldr	r2, [pc, #312]	; (80034f8 <HAL_GPIO_Init+0x324>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d013      	beq.n	80033ea <HAL_GPIO_Init+0x216>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a4d      	ldr	r2, [pc, #308]	; (80034fc <HAL_GPIO_Init+0x328>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00d      	beq.n	80033e6 <HAL_GPIO_Init+0x212>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4c      	ldr	r2, [pc, #304]	; (8003500 <HAL_GPIO_Init+0x32c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d007      	beq.n	80033e2 <HAL_GPIO_Init+0x20e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a4b      	ldr	r2, [pc, #300]	; (8003504 <HAL_GPIO_Init+0x330>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d101      	bne.n	80033de <HAL_GPIO_Init+0x20a>
 80033da:	2307      	movs	r3, #7
 80033dc:	e00e      	b.n	80033fc <HAL_GPIO_Init+0x228>
 80033de:	2308      	movs	r3, #8
 80033e0:	e00c      	b.n	80033fc <HAL_GPIO_Init+0x228>
 80033e2:	2306      	movs	r3, #6
 80033e4:	e00a      	b.n	80033fc <HAL_GPIO_Init+0x228>
 80033e6:	2305      	movs	r3, #5
 80033e8:	e008      	b.n	80033fc <HAL_GPIO_Init+0x228>
 80033ea:	2304      	movs	r3, #4
 80033ec:	e006      	b.n	80033fc <HAL_GPIO_Init+0x228>
 80033ee:	2303      	movs	r3, #3
 80033f0:	e004      	b.n	80033fc <HAL_GPIO_Init+0x228>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e002      	b.n	80033fc <HAL_GPIO_Init+0x228>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_GPIO_Init+0x228>
 80033fa:	2300      	movs	r3, #0
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	f002 0203 	and.w	r2, r2, #3
 8003402:	0092      	lsls	r2, r2, #2
 8003404:	4093      	lsls	r3, r2
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800340c:	4935      	ldr	r1, [pc, #212]	; (80034e4 <HAL_GPIO_Init+0x310>)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	089b      	lsrs	r3, r3, #2
 8003412:	3302      	adds	r3, #2
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800341a:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <HAL_GPIO_Init+0x334>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800343e:	4a32      	ldr	r2, [pc, #200]	; (8003508 <HAL_GPIO_Init+0x334>)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003444:	4b30      	ldr	r3, [pc, #192]	; (8003508 <HAL_GPIO_Init+0x334>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003468:	4a27      	ldr	r2, [pc, #156]	; (8003508 <HAL_GPIO_Init+0x334>)
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800346e:	4b26      	ldr	r3, [pc, #152]	; (8003508 <HAL_GPIO_Init+0x334>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003492:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <HAL_GPIO_Init+0x334>)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <HAL_GPIO_Init+0x334>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034bc:	4a12      	ldr	r2, [pc, #72]	; (8003508 <HAL_GPIO_Init+0x334>)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3301      	adds	r3, #1
 80034c6:	61fb      	str	r3, [r7, #28]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b0f      	cmp	r3, #15
 80034cc:	f67f ae90 	bls.w	80031f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	3724      	adds	r7, #36	; 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40013800 	.word	0x40013800
 80034e8:	40020000 	.word	0x40020000
 80034ec:	40020400 	.word	0x40020400
 80034f0:	40020800 	.word	0x40020800
 80034f4:	40020c00 	.word	0x40020c00
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40021400 	.word	0x40021400
 8003500:	40021800 	.word	0x40021800
 8003504:	40021c00 	.word	0x40021c00
 8003508:	40013c00 	.word	0x40013c00

0800350c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	807b      	strh	r3, [r7, #2]
 8003518:	4613      	mov	r3, r2
 800351a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800351c:	787b      	ldrb	r3, [r7, #1]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003522:	887a      	ldrh	r2, [r7, #2]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003528:	e003      	b.n	8003532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800352a:	887b      	ldrh	r3, [r7, #2]
 800352c:	041a      	lsls	r2, r3, #16
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	619a      	str	r2, [r3, #24]
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e12b      	b.n	80037aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fe fc84 	bl	8001e74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2224      	movs	r2, #36	; 0x24
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035a4:	f001 fd2a 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 80035a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4a81      	ldr	r2, [pc, #516]	; (80037b4 <HAL_I2C_Init+0x274>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d807      	bhi.n	80035c4 <HAL_I2C_Init+0x84>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a80      	ldr	r2, [pc, #512]	; (80037b8 <HAL_I2C_Init+0x278>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	bf94      	ite	ls
 80035bc:	2301      	movls	r3, #1
 80035be:	2300      	movhi	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e006      	b.n	80035d2 <HAL_I2C_Init+0x92>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4a7d      	ldr	r2, [pc, #500]	; (80037bc <HAL_I2C_Init+0x27c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	bf94      	ite	ls
 80035cc:	2301      	movls	r3, #1
 80035ce:	2300      	movhi	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0e7      	b.n	80037aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4a78      	ldr	r2, [pc, #480]	; (80037c0 <HAL_I2C_Init+0x280>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	0c9b      	lsrs	r3, r3, #18
 80035e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a6a      	ldr	r2, [pc, #424]	; (80037b4 <HAL_I2C_Init+0x274>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d802      	bhi.n	8003614 <HAL_I2C_Init+0xd4>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3301      	adds	r3, #1
 8003612:	e009      	b.n	8003628 <HAL_I2C_Init+0xe8>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	4a69      	ldr	r2, [pc, #420]	; (80037c4 <HAL_I2C_Init+0x284>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	3301      	adds	r3, #1
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	430b      	orrs	r3, r1
 800362e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800363a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	495c      	ldr	r1, [pc, #368]	; (80037b4 <HAL_I2C_Init+0x274>)
 8003644:	428b      	cmp	r3, r1
 8003646:	d819      	bhi.n	800367c <HAL_I2C_Init+0x13c>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1e59      	subs	r1, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fbb1 f3f3 	udiv	r3, r1, r3
 8003656:	1c59      	adds	r1, r3, #1
 8003658:	f640 73fc 	movw	r3, #4092	; 0xffc
 800365c:	400b      	ands	r3, r1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_I2C_Init+0x138>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1e59      	subs	r1, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003670:	3301      	adds	r3, #1
 8003672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003676:	e051      	b.n	800371c <HAL_I2C_Init+0x1dc>
 8003678:	2304      	movs	r3, #4
 800367a:	e04f      	b.n	800371c <HAL_I2C_Init+0x1dc>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d111      	bne.n	80036a8 <HAL_I2C_Init+0x168>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1e58      	subs	r0, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	440b      	add	r3, r1
 8003692:	fbb0 f3f3 	udiv	r3, r0, r3
 8003696:	3301      	adds	r3, #1
 8003698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e012      	b.n	80036ce <HAL_I2C_Init+0x18e>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e58      	subs	r0, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	0099      	lsls	r1, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_Init+0x196>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e022      	b.n	800371c <HAL_I2C_Init+0x1dc>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10e      	bne.n	80036fc <HAL_I2C_Init+0x1bc>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1e58      	subs	r0, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6859      	ldr	r1, [r3, #4]
 80036e6:	460b      	mov	r3, r1
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	440b      	add	r3, r1
 80036ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f0:	3301      	adds	r3, #1
 80036f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fa:	e00f      	b.n	800371c <HAL_I2C_Init+0x1dc>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1e58      	subs	r0, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	0099      	lsls	r1, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003712:	3301      	adds	r3, #1
 8003714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	6809      	ldr	r1, [r1, #0]
 8003720:	4313      	orrs	r3, r2
 8003722:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800374a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6911      	ldr	r1, [r2, #16]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68d2      	ldr	r2, [r2, #12]
 8003756:	4311      	orrs	r1, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	430b      	orrs	r3, r1
 800375e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	000186a0 	.word	0x000186a0
 80037b8:	001e847f 	.word	0x001e847f
 80037bc:	003d08ff 	.word	0x003d08ff
 80037c0:	431bde83 	.word	0x431bde83
 80037c4:	10624dd3 	.word	0x10624dd3

080037c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	461a      	mov	r2, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	817b      	strh	r3, [r7, #10]
 80037da:	460b      	mov	r3, r1
 80037dc:	813b      	strh	r3, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037e2:	f7ff fbb5 	bl	8002f50 <HAL_GetTick>
 80037e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	f040 80d9 	bne.w	80039a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	2319      	movs	r3, #25
 80037fc:	2201      	movs	r2, #1
 80037fe:	496d      	ldr	r1, [pc, #436]	; (80039b4 <HAL_I2C_Mem_Write+0x1ec>)
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fdad 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
 800380e:	e0cc      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_I2C_Mem_Write+0x56>
 800381a:	2302      	movs	r3, #2
 800381c:	e0c5      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d007      	beq.n	8003844 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003852:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2221      	movs	r2, #33	; 0x21
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2240      	movs	r2, #64	; 0x40
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a3a      	ldr	r2, [r7, #32]
 800386e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003874:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a4d      	ldr	r2, [pc, #308]	; (80039b8 <HAL_I2C_Mem_Write+0x1f0>)
 8003884:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003886:	88f8      	ldrh	r0, [r7, #6]
 8003888:	893a      	ldrh	r2, [r7, #8]
 800388a:	8979      	ldrh	r1, [r7, #10]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	4603      	mov	r3, r0
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fbe4 	bl	8004064 <I2C_RequestMemoryWrite>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d052      	beq.n	8003948 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e081      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fe2e 	bl	800450c <I2C_WaitOnTXEFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00d      	beq.n	80038d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d107      	bne.n	80038ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e06b      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	781a      	ldrb	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b04      	cmp	r3, #4
 800390e:	d11b      	bne.n	8003948 <HAL_I2C_Mem_Write+0x180>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	2b00      	cmp	r3, #0
 8003916:	d017      	beq.n	8003948 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1aa      	bne.n	80038a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fe1a 	bl	800458e <I2C_WaitOnBTFFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	2b04      	cmp	r3, #4
 8003966:	d107      	bne.n	8003978 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003976:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e016      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	00100002 	.word	0x00100002
 80039b8:	ffff0000 	.word	0xffff0000

080039bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08c      	sub	sp, #48	; 0x30
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	817b      	strh	r3, [r7, #10]
 80039ce:	460b      	mov	r3, r1
 80039d0:	813b      	strh	r3, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039d6:	f7ff fabb 	bl	8002f50 <HAL_GetTick>
 80039da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	f040 8208 	bne.w	8003dfa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2319      	movs	r3, #25
 80039f0:	2201      	movs	r2, #1
 80039f2:	497b      	ldr	r1, [pc, #492]	; (8003be0 <HAL_I2C_Mem_Read+0x224>)
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fcb3 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
 8003a02:	e1fb      	b.n	8003dfc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_I2C_Mem_Read+0x56>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e1f4      	b.n	8003dfc <HAL_I2C_Mem_Read+0x440>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d007      	beq.n	8003a38 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2222      	movs	r2, #34	; 0x22
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2240      	movs	r2, #64	; 0x40
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a5b      	ldr	r2, [pc, #364]	; (8003be4 <HAL_I2C_Mem_Read+0x228>)
 8003a78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a7a:	88f8      	ldrh	r0, [r7, #6]
 8003a7c:	893a      	ldrh	r2, [r7, #8]
 8003a7e:	8979      	ldrh	r1, [r7, #10]
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	4603      	mov	r3, r0
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fb80 	bl	8004190 <I2C_RequestMemoryRead>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e1b0      	b.n	8003dfc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d113      	bne.n	8003aca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	623b      	str	r3, [r7, #32]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	623b      	str	r3, [r7, #32]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	623b      	str	r3, [r7, #32]
 8003ab6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e184      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d11b      	bne.n	8003b0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	e164      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d11b      	bne.n	8003b4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b32:	2300      	movs	r3, #0
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	e144      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b60:	e138      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	f200 80f1 	bhi.w	8003d4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d123      	bne.n	8003bbc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fd49 	bl	8004610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e139      	b.n	8003dfc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bba:	e10b      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d14e      	bne.n	8003c62 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	2200      	movs	r2, #0
 8003bcc:	4906      	ldr	r1, [pc, #24]	; (8003be8 <HAL_I2C_Mem_Read+0x22c>)
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 fbc6 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e10e      	b.n	8003dfc <HAL_I2C_Mem_Read+0x440>
 8003bde:	bf00      	nop
 8003be0:	00100002 	.word	0x00100002
 8003be4:	ffff0000 	.word	0xffff0000
 8003be8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c60:	e0b8      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	2200      	movs	r2, #0
 8003c6a:	4966      	ldr	r1, [pc, #408]	; (8003e04 <HAL_I2C_Mem_Read+0x448>)
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fb77 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0bf      	b.n	8003dfc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	494f      	ldr	r1, [pc, #316]	; (8003e04 <HAL_I2C_Mem_Read+0x448>)
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fb49 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e091      	b.n	8003dfc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d4c:	e042      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 fc5c 	bl	8004610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e04c      	b.n	8003dfc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d118      	bne.n	8003dd4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f47f aec2 	bne.w	8003b62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	e000      	b.n	8003dfc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3728      	adds	r7, #40	; 0x28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	00010004 	.word	0x00010004

08003e08 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	; 0x28
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	607a      	str	r2, [r7, #4]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	460b      	mov	r3, r1
 8003e16:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003e18:	f7ff f89a 	bl	8002f50 <HAL_GetTick>
 8003e1c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	f040 8111 	bne.w	8004052 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	2319      	movs	r3, #25
 8003e36:	2201      	movs	r2, #1
 8003e38:	4988      	ldr	r1, [pc, #544]	; (800405c <HAL_I2C_IsDeviceReady+0x254>)
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fa90 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003e46:	2302      	movs	r3, #2
 8003e48:	e104      	b.n	8004054 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_I2C_IsDeviceReady+0x50>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e0fd      	b.n	8004054 <HAL_I2C_IsDeviceReady+0x24c>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d007      	beq.n	8003e7e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2224      	movs	r2, #36	; 0x24
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4a70      	ldr	r2, [pc, #448]	; (8004060 <HAL_I2C_IsDeviceReady+0x258>)
 8003ea0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fa4e 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed8:	d103      	bne.n	8003ee2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e0b6      	b.n	8004054 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ee6:	897b      	ldrh	r3, [r7, #10]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ef4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003ef6:	f7ff f82b 	bl	8002f50 <HAL_GetTick>
 8003efa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	bf0c      	ite	eq
 8003f0a:	2301      	moveq	r3, #1
 8003f0c:	2300      	movne	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f20:	bf0c      	ite	eq
 8003f22:	2301      	moveq	r3, #1
 8003f24:	2300      	movne	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f2a:	e025      	b.n	8003f78 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f2c:	f7ff f810 	bl	8002f50 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d302      	bcc.n	8003f42 <HAL_I2C_IsDeviceReady+0x13a>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d103      	bne.n	8003f4a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	22a0      	movs	r2, #160	; 0xa0
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	bf0c      	ite	eq
 8003f58:	2301      	moveq	r3, #1
 8003f5a:	2300      	movne	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6e:	bf0c      	ite	eq
 8003f70:	2301      	moveq	r3, #1
 8003f72:	2300      	movne	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2ba0      	cmp	r3, #160	; 0xa0
 8003f82:	d005      	beq.n	8003f90 <HAL_I2C_IsDeviceReady+0x188>
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <HAL_I2C_IsDeviceReady+0x188>
 8003f8a:	7dbb      	ldrb	r3, [r7, #22]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0cd      	beq.n	8003f2c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d129      	bne.n	8003ffa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2319      	movs	r3, #25
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	4921      	ldr	r1, [pc, #132]	; (800405c <HAL_I2C_IsDeviceReady+0x254>)
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f9c2 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e036      	b.n	8004054 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e02c      	b.n	8004054 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004008:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004012:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	2319      	movs	r3, #25
 800401a:	2201      	movs	r2, #1
 800401c:	490f      	ldr	r1, [pc, #60]	; (800405c <HAL_I2C_IsDeviceReady+0x254>)
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f99e 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e012      	b.n	8004054 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	3301      	adds	r3, #1
 8004032:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	f4ff af32 	bcc.w	8003ea2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004052:	2302      	movs	r3, #2
  }
}
 8004054:	4618      	mov	r0, r3
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	00100002 	.word	0x00100002
 8004060:	ffff0000 	.word	0xffff0000

08004064 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	461a      	mov	r2, r3
 8004072:	4603      	mov	r3, r0
 8004074:	817b      	strh	r3, [r7, #10]
 8004076:	460b      	mov	r3, r1
 8004078:	813b      	strh	r3, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800408c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	2200      	movs	r2, #0
 8004096:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f960 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b4:	d103      	bne.n	80040be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e05f      	b.n	8004182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040c2:	897b      	ldrh	r3, [r7, #10]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	492d      	ldr	r1, [pc, #180]	; (800418c <I2C_RequestMemoryWrite+0x128>)
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f998 	bl	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e04c      	b.n	8004182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004100:	6a39      	ldr	r1, [r7, #32]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fa02 	bl	800450c <I2C_WaitOnTXEFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	2b04      	cmp	r3, #4
 8004114:	d107      	bne.n	8004126 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004124:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e02b      	b.n	8004182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d105      	bne.n	800413c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004130:	893b      	ldrh	r3, [r7, #8]
 8004132:	b2da      	uxtb	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	611a      	str	r2, [r3, #16]
 800413a:	e021      	b.n	8004180 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800413c:	893b      	ldrh	r3, [r7, #8]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	b29b      	uxth	r3, r3
 8004142:	b2da      	uxtb	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800414a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414c:	6a39      	ldr	r1, [r7, #32]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f9dc 	bl	800450c <I2C_WaitOnTXEFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00d      	beq.n	8004176 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	2b04      	cmp	r3, #4
 8004160:	d107      	bne.n	8004172 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004170:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e005      	b.n	8004182 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004176:	893b      	ldrh	r3, [r7, #8]
 8004178:	b2da      	uxtb	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	00010002 	.word	0x00010002

08004190 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	4608      	mov	r0, r1
 800419a:	4611      	mov	r1, r2
 800419c:	461a      	mov	r2, r3
 800419e:	4603      	mov	r3, r0
 80041a0:	817b      	strh	r3, [r7, #10]
 80041a2:	460b      	mov	r3, r1
 80041a4:	813b      	strh	r3, [r7, #8]
 80041a6:	4613      	mov	r3, r2
 80041a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f8c2 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00d      	beq.n	80041fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f0:	d103      	bne.n	80041fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e0aa      	b.n	8004354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041fe:	897b      	ldrh	r3, [r7, #10]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800420c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	6a3a      	ldr	r2, [r7, #32]
 8004212:	4952      	ldr	r1, [pc, #328]	; (800435c <I2C_RequestMemoryRead+0x1cc>)
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f8fa 	bl	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e097      	b.n	8004354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800423a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423c:	6a39      	ldr	r1, [r7, #32]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f964 	bl	800450c <I2C_WaitOnTXEFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00d      	beq.n	8004266 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	2b04      	cmp	r3, #4
 8004250:	d107      	bne.n	8004262 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004260:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e076      	b.n	8004354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d105      	bne.n	8004278 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800426c:	893b      	ldrh	r3, [r7, #8]
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	611a      	str	r2, [r3, #16]
 8004276:	e021      	b.n	80042bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004278:	893b      	ldrh	r3, [r7, #8]
 800427a:	0a1b      	lsrs	r3, r3, #8
 800427c:	b29b      	uxth	r3, r3
 800427e:	b2da      	uxtb	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004288:	6a39      	ldr	r1, [r7, #32]
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f93e 	bl	800450c <I2C_WaitOnTXEFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00d      	beq.n	80042b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	2b04      	cmp	r3, #4
 800429c:	d107      	bne.n	80042ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e050      	b.n	8004354 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042b2:	893b      	ldrh	r3, [r7, #8]
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042be:	6a39      	ldr	r1, [r7, #32]
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f923 	bl	800450c <I2C_WaitOnTXEFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d107      	bne.n	80042e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e035      	b.n	8004354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	2200      	movs	r2, #0
 8004300:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 f82b 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00d      	beq.n	800432c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431e:	d103      	bne.n	8004328 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004326:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e013      	b.n	8004354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800432c:	897b      	ldrh	r3, [r7, #10]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	6a3a      	ldr	r2, [r7, #32]
 8004340:	4906      	ldr	r1, [pc, #24]	; (800435c <I2C_RequestMemoryRead+0x1cc>)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f863 	bl	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	00010002 	.word	0x00010002

08004360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	4613      	mov	r3, r2
 800436e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004370:	e025      	b.n	80043be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004378:	d021      	beq.n	80043be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437a:	f7fe fde9 	bl	8002f50 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d302      	bcc.n	8004390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d116      	bne.n	80043be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f043 0220 	orr.w	r2, r3, #32
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e023      	b.n	8004406 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	0c1b      	lsrs	r3, r3, #16
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d10d      	bne.n	80043e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	43da      	mvns	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4013      	ands	r3, r2
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	bf0c      	ite	eq
 80043da:	2301      	moveq	r3, #1
 80043dc:	2300      	movne	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	e00c      	b.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	43da      	mvns	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4013      	ands	r3, r2
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf0c      	ite	eq
 80043f6:	2301      	moveq	r3, #1
 80043f8:	2300      	movne	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	429a      	cmp	r2, r3
 8004402:	d0b6      	beq.n	8004372 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800441c:	e051      	b.n	80044c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442c:	d123      	bne.n	8004476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004446:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f043 0204 	orr.w	r2, r3, #4
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e046      	b.n	8004504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d021      	beq.n	80044c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447e:	f7fe fd67 	bl	8002f50 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d116      	bne.n	80044c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f043 0220 	orr.w	r2, r3, #32
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e020      	b.n	8004504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d10c      	bne.n	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	43da      	mvns	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4013      	ands	r3, r2
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bf14      	ite	ne
 80044de:	2301      	movne	r3, #1
 80044e0:	2300      	moveq	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	e00b      	b.n	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	43da      	mvns	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf14      	ite	ne
 80044f8:	2301      	movne	r3, #1
 80044fa:	2300      	moveq	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d18d      	bne.n	800441e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004518:	e02d      	b.n	8004576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f8ce 	bl	80046bc <I2C_IsAcknowledgeFailed>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e02d      	b.n	8004586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d021      	beq.n	8004576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004532:	f7fe fd0d 	bl	8002f50 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	429a      	cmp	r2, r3
 8004540:	d302      	bcc.n	8004548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d116      	bne.n	8004576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f043 0220 	orr.w	r2, r3, #32
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e007      	b.n	8004586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004580:	2b80      	cmp	r3, #128	; 0x80
 8004582:	d1ca      	bne.n	800451a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800459a:	e02d      	b.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f88d 	bl	80046bc <I2C_IsAcknowledgeFailed>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e02d      	b.n	8004608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b2:	d021      	beq.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b4:	f7fe fccc 	bl	8002f50 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d302      	bcc.n	80045ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d116      	bne.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	f043 0220 	orr.w	r2, r3, #32
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e007      	b.n	8004608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b04      	cmp	r3, #4
 8004604:	d1ca      	bne.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800461c:	e042      	b.n	80046a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b10      	cmp	r3, #16
 800462a:	d119      	bne.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0210 	mvn.w	r2, #16
 8004634:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e029      	b.n	80046b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004660:	f7fe fc76 	bl	8002f50 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	d302      	bcc.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d116      	bne.n	80046a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e007      	b.n	80046b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d1b5      	bne.n	800461e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d2:	d11b      	bne.n	800470c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	f043 0204 	orr.w	r2, r3, #4
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e267      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d075      	beq.n	8004826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800473a:	4b88      	ldr	r3, [pc, #544]	; (800495c <HAL_RCC_OscConfig+0x240>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d00c      	beq.n	8004760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004746:	4b85      	ldr	r3, [pc, #532]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800474e:	2b08      	cmp	r3, #8
 8004750:	d112      	bne.n	8004778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004752:	4b82      	ldr	r3, [pc, #520]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800475e:	d10b      	bne.n	8004778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	4b7e      	ldr	r3, [pc, #504]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d05b      	beq.n	8004824 <HAL_RCC_OscConfig+0x108>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d157      	bne.n	8004824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e242      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004780:	d106      	bne.n	8004790 <HAL_RCC_OscConfig+0x74>
 8004782:	4b76      	ldr	r3, [pc, #472]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a75      	ldr	r2, [pc, #468]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e01d      	b.n	80047cc <HAL_RCC_OscConfig+0xb0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004798:	d10c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x98>
 800479a:	4b70      	ldr	r3, [pc, #448]	; (800495c <HAL_RCC_OscConfig+0x240>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a6f      	ldr	r2, [pc, #444]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	4b6d      	ldr	r3, [pc, #436]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a6c      	ldr	r2, [pc, #432]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e00b      	b.n	80047cc <HAL_RCC_OscConfig+0xb0>
 80047b4:	4b69      	ldr	r3, [pc, #420]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a68      	ldr	r2, [pc, #416]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	4b66      	ldr	r3, [pc, #408]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a65      	ldr	r2, [pc, #404]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d013      	beq.n	80047fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fe fbbc 	bl	8002f50 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047dc:	f7fe fbb8 	bl	8002f50 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	; 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e207      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ee:	4b5b      	ldr	r3, [pc, #364]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0xc0>
 80047fa:	e014      	b.n	8004826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fc:	f7fe fba8 	bl	8002f50 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004804:	f7fe fba4 	bl	8002f50 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b64      	cmp	r3, #100	; 0x64
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e1f3      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004816:	4b51      	ldr	r3, [pc, #324]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0xe8>
 8004822:	e000      	b.n	8004826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d063      	beq.n	80048fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004832:	4b4a      	ldr	r3, [pc, #296]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800483e:	4b47      	ldr	r3, [pc, #284]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004846:	2b08      	cmp	r3, #8
 8004848:	d11c      	bne.n	8004884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484a:	4b44      	ldr	r3, [pc, #272]	; (800495c <HAL_RCC_OscConfig+0x240>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d116      	bne.n	8004884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004856:	4b41      	ldr	r3, [pc, #260]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_RCC_OscConfig+0x152>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d001      	beq.n	800486e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e1c7      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486e:	4b3b      	ldr	r3, [pc, #236]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4937      	ldr	r1, [pc, #220]	; (800495c <HAL_RCC_OscConfig+0x240>)
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004882:	e03a      	b.n	80048fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800488c:	4b34      	ldr	r3, [pc, #208]	; (8004960 <HAL_RCC_OscConfig+0x244>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fe fb5d 	bl	8002f50 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800489a:	f7fe fb59 	bl	8002f50 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e1a8      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ac:	4b2b      	ldr	r3, [pc, #172]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b8:	4b28      	ldr	r3, [pc, #160]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4925      	ldr	r1, [pc, #148]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]
 80048cc:	e015      	b.n	80048fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ce:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_RCC_OscConfig+0x244>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fe fb3c 	bl	8002f50 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048dc:	f7fe fb38 	bl	8002f50 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e187      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ee:	4b1b      	ldr	r3, [pc, #108]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d036      	beq.n	8004974 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d016      	beq.n	800493c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800490e:	4b15      	ldr	r3, [pc, #84]	; (8004964 <HAL_RCC_OscConfig+0x248>)
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004914:	f7fe fb1c 	bl	8002f50 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800491c:	f7fe fb18 	bl	8002f50 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e167      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492e:	4b0b      	ldr	r3, [pc, #44]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x200>
 800493a:	e01b      	b.n	8004974 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800493c:	4b09      	ldr	r3, [pc, #36]	; (8004964 <HAL_RCC_OscConfig+0x248>)
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004942:	f7fe fb05 	bl	8002f50 <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004948:	e00e      	b.n	8004968 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800494a:	f7fe fb01 	bl	8002f50 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d907      	bls.n	8004968 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e150      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
 800495c:	40023800 	.word	0x40023800
 8004960:	42470000 	.word	0x42470000
 8004964:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004968:	4b88      	ldr	r3, [pc, #544]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 800496a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1ea      	bne.n	800494a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8097 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004982:	2300      	movs	r3, #0
 8004984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004986:	4b81      	ldr	r3, [pc, #516]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10f      	bne.n	80049b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004992:	2300      	movs	r3, #0
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	4b7d      	ldr	r3, [pc, #500]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	4a7c      	ldr	r2, [pc, #496]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 800499c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a0:	6413      	str	r3, [r2, #64]	; 0x40
 80049a2:	4b7a      	ldr	r3, [pc, #488]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b2:	4b77      	ldr	r3, [pc, #476]	; (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d118      	bne.n	80049f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049be:	4b74      	ldr	r3, [pc, #464]	; (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a73      	ldr	r2, [pc, #460]	; (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ca:	f7fe fac1 	bl	8002f50 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d2:	f7fe fabd 	bl	8002f50 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e10c      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e4:	4b6a      	ldr	r3, [pc, #424]	; (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d106      	bne.n	8004a06 <HAL_RCC_OscConfig+0x2ea>
 80049f8:	4b64      	ldr	r3, [pc, #400]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	4a63      	ldr	r2, [pc, #396]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	6713      	str	r3, [r2, #112]	; 0x70
 8004a04:	e01c      	b.n	8004a40 <HAL_RCC_OscConfig+0x324>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b05      	cmp	r3, #5
 8004a0c:	d10c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x30c>
 8004a0e:	4b5f      	ldr	r3, [pc, #380]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	4a5e      	ldr	r2, [pc, #376]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a14:	f043 0304 	orr.w	r3, r3, #4
 8004a18:	6713      	str	r3, [r2, #112]	; 0x70
 8004a1a:	4b5c      	ldr	r3, [pc, #368]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1e:	4a5b      	ldr	r2, [pc, #364]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	6713      	str	r3, [r2, #112]	; 0x70
 8004a26:	e00b      	b.n	8004a40 <HAL_RCC_OscConfig+0x324>
 8004a28:	4b58      	ldr	r3, [pc, #352]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2c:	4a57      	ldr	r2, [pc, #348]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	6713      	str	r3, [r2, #112]	; 0x70
 8004a34:	4b55      	ldr	r3, [pc, #340]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	4a54      	ldr	r2, [pc, #336]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a3a:	f023 0304 	bic.w	r3, r3, #4
 8004a3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d015      	beq.n	8004a74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a48:	f7fe fa82 	bl	8002f50 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a50:	f7fe fa7e 	bl	8002f50 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e0cb      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a66:	4b49      	ldr	r3, [pc, #292]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0ee      	beq.n	8004a50 <HAL_RCC_OscConfig+0x334>
 8004a72:	e014      	b.n	8004a9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a74:	f7fe fa6c 	bl	8002f50 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a7c:	f7fe fa68 	bl	8002f50 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e0b5      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a92:	4b3e      	ldr	r3, [pc, #248]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1ee      	bne.n	8004a7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa4:	4b39      	ldr	r3, [pc, #228]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	4a38      	ldr	r2, [pc, #224]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80a1 	beq.w	8004bfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aba:	4b34      	ldr	r3, [pc, #208]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 030c 	and.w	r3, r3, #12
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d05c      	beq.n	8004b80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d141      	bne.n	8004b52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ace:	4b31      	ldr	r3, [pc, #196]	; (8004b94 <HAL_RCC_OscConfig+0x478>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7fe fa3c 	bl	8002f50 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004adc:	f7fe fa38 	bl	8002f50 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e087      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aee:	4b27      	ldr	r3, [pc, #156]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69da      	ldr	r2, [r3, #28]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	3b01      	subs	r3, #1
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	061b      	lsls	r3, r3, #24
 8004b1e:	491b      	ldr	r1, [pc, #108]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b24:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <HAL_RCC_OscConfig+0x478>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2a:	f7fe fa11 	bl	8002f50 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b32:	f7fe fa0d 	bl	8002f50 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e05c      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b44:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x416>
 8004b50:	e054      	b.n	8004bfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <HAL_RCC_OscConfig+0x478>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b58:	f7fe f9fa 	bl	8002f50 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b60:	f7fe f9f6 	bl	8002f50 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e045      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b72:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x444>
 8004b7e:	e03d      	b.n	8004bfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d107      	bne.n	8004b98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e038      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	40007000 	.word	0x40007000
 8004b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b98:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <HAL_RCC_OscConfig+0x4ec>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d028      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d121      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d11a      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bc8:	4013      	ands	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d111      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	3b01      	subs	r3, #1
 8004be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d107      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40023800 	.word	0x40023800

08004c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0cc      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c20:	4b68      	ldr	r3, [pc, #416]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d90c      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2e:	4b65      	ldr	r3, [pc, #404]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b63      	ldr	r3, [pc, #396]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0b8      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c60:	4b59      	ldr	r3, [pc, #356]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4a58      	ldr	r2, [pc, #352]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c78:	4b53      	ldr	r3, [pc, #332]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a52      	ldr	r2, [pc, #328]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c84:	4b50      	ldr	r3, [pc, #320]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	494d      	ldr	r1, [pc, #308]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d044      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d107      	bne.n	8004cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d119      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d003      	beq.n	8004cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cca:	4b3f      	ldr	r3, [pc, #252]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e06f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cda:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e067      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cea:	4b37      	ldr	r3, [pc, #220]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f023 0203 	bic.w	r2, r3, #3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4934      	ldr	r1, [pc, #208]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cfc:	f7fe f928 	bl	8002f50 <HAL_GetTick>
 8004d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d02:	e00a      	b.n	8004d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d04:	f7fe f924 	bl	8002f50 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e04f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1a:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 020c 	and.w	r2, r3, #12
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d1eb      	bne.n	8004d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d2c:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d20c      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3a:	4b22      	ldr	r3, [pc, #136]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e032      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d60:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4916      	ldr	r1, [pc, #88]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d7e:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	490e      	ldr	r1, [pc, #56]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d92:	f000 f821 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8004d96:	4602      	mov	r2, r0
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	490a      	ldr	r1, [pc, #40]	; (8004dcc <HAL_RCC_ClockConfig+0x1c0>)
 8004da4:	5ccb      	ldrb	r3, [r1, r3]
 8004da6:	fa22 f303 	lsr.w	r3, r2, r3
 8004daa:	4a09      	ldr	r2, [pc, #36]	; (8004dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe f888 	bl	8002ec8 <HAL_InitTick>

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40023c00 	.word	0x40023c00
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	080096a0 	.word	0x080096a0
 8004dd0:	20000008 	.word	0x20000008
 8004dd4:	2000000c 	.word	0x2000000c

08004dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ddc:	b094      	sub	sp, #80	; 0x50
 8004dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	647b      	str	r3, [r7, #68]	; 0x44
 8004de4:	2300      	movs	r3, #0
 8004de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de8:	2300      	movs	r3, #0
 8004dea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004df0:	4b79      	ldr	r3, [pc, #484]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 030c 	and.w	r3, r3, #12
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d00d      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x40>
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	f200 80e1 	bhi.w	8004fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_RCC_GetSysClockFreq+0x34>
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d003      	beq.n	8004e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e0a:	e0db      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b73      	ldr	r3, [pc, #460]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8004e0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e10:	e0db      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e12:	4b73      	ldr	r3, [pc, #460]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e16:	e0d8      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e18:	4b6f      	ldr	r3, [pc, #444]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e22:	4b6d      	ldr	r3, [pc, #436]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d063      	beq.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2e:	4b6a      	ldr	r3, [pc, #424]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	099b      	lsrs	r3, r3, #6
 8004e34:	2200      	movs	r2, #0
 8004e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e40:	633b      	str	r3, [r7, #48]	; 0x30
 8004e42:	2300      	movs	r3, #0
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
 8004e46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	462b      	mov	r3, r5
 8004e4e:	f04f 0000 	mov.w	r0, #0
 8004e52:	f04f 0100 	mov.w	r1, #0
 8004e56:	0159      	lsls	r1, r3, #5
 8004e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e5c:	0150      	lsls	r0, r2, #5
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4621      	mov	r1, r4
 8004e64:	1a51      	subs	r1, r2, r1
 8004e66:	6139      	str	r1, [r7, #16]
 8004e68:	4629      	mov	r1, r5
 8004e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	018b      	lsls	r3, r1, #6
 8004e80:	4651      	mov	r1, sl
 8004e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e86:	4651      	mov	r1, sl
 8004e88:	018a      	lsls	r2, r1, #6
 8004e8a:	4651      	mov	r1, sl
 8004e8c:	ebb2 0801 	subs.w	r8, r2, r1
 8004e90:	4659      	mov	r1, fp
 8004e92:	eb63 0901 	sbc.w	r9, r3, r1
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eaa:	4690      	mov	r8, r2
 8004eac:	4699      	mov	r9, r3
 8004eae:	4623      	mov	r3, r4
 8004eb0:	eb18 0303 	adds.w	r3, r8, r3
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	462b      	mov	r3, r5
 8004eb8:	eb49 0303 	adc.w	r3, r9, r3
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eca:	4629      	mov	r1, r5
 8004ecc:	024b      	lsls	r3, r1, #9
 8004ece:	4621      	mov	r1, r4
 8004ed0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	024a      	lsls	r2, r1, #9
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ede:	2200      	movs	r2, #0
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ee4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ee8:	f7fb f976 	bl	80001d8 <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ef4:	e058      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef6:	4b38      	ldr	r3, [pc, #224]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	099b      	lsrs	r3, r3, #6
 8004efc:	2200      	movs	r2, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	4611      	mov	r1, r2
 8004f02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f06:	623b      	str	r3, [r7, #32]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f10:	4642      	mov	r2, r8
 8004f12:	464b      	mov	r3, r9
 8004f14:	f04f 0000 	mov.w	r0, #0
 8004f18:	f04f 0100 	mov.w	r1, #0
 8004f1c:	0159      	lsls	r1, r3, #5
 8004f1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f22:	0150      	lsls	r0, r2, #5
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4641      	mov	r1, r8
 8004f2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f2e:	4649      	mov	r1, r9
 8004f30:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f48:	ebb2 040a 	subs.w	r4, r2, sl
 8004f4c:	eb63 050b 	sbc.w	r5, r3, fp
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	00eb      	lsls	r3, r5, #3
 8004f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f5e:	00e2      	lsls	r2, r4, #3
 8004f60:	4614      	mov	r4, r2
 8004f62:	461d      	mov	r5, r3
 8004f64:	4643      	mov	r3, r8
 8004f66:	18e3      	adds	r3, r4, r3
 8004f68:	603b      	str	r3, [r7, #0]
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	eb45 0303 	adc.w	r3, r5, r3
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f7e:	4629      	mov	r1, r5
 8004f80:	028b      	lsls	r3, r1, #10
 8004f82:	4621      	mov	r1, r4
 8004f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f88:	4621      	mov	r1, r4
 8004f8a:	028a      	lsls	r2, r1, #10
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f92:	2200      	movs	r2, #0
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	61fa      	str	r2, [r7, #28]
 8004f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f9c:	f7fb f91c 	bl	80001d8 <__aeabi_uldivmod>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	0c1b      	lsrs	r3, r3, #16
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004fb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc2:	e002      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8004fc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3750      	adds	r7, #80	; 0x50
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	00f42400 	.word	0x00f42400
 8004fe0:	007a1200 	.word	0x007a1200

08004fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20000008 	.word	0x20000008

08004ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005000:	f7ff fff0 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	0a9b      	lsrs	r3, r3, #10
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4903      	ldr	r1, [pc, #12]	; (8005020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40023800 	.word	0x40023800
 8005020:	080096b0 	.word	0x080096b0

08005024 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e07b      	b.n	800512e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	2b00      	cmp	r3, #0
 800503c:	d108      	bne.n	8005050 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005046:	d009      	beq.n	800505c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	61da      	str	r2, [r3, #28]
 800504e:	e005      	b.n	800505c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fd fd74 	bl	8002b64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005092:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e0:	ea42 0103 	orr.w	r1, r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	0c1b      	lsrs	r3, r3, #16
 80050fa:	f003 0104 	and.w	r1, r3, #4
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	f003 0210 	and.w	r2, r3, #16
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69da      	ldr	r2, [r3, #28]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800511c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b088      	sub	sp, #32
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	603b      	str	r3, [r7, #0]
 8005142:	4613      	mov	r3, r2
 8005144:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005150:	2b01      	cmp	r3, #1
 8005152:	d101      	bne.n	8005158 <HAL_SPI_Transmit+0x22>
 8005154:	2302      	movs	r3, #2
 8005156:	e126      	b.n	80053a6 <HAL_SPI_Transmit+0x270>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005160:	f7fd fef6 	bl	8002f50 <HAL_GetTick>
 8005164:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b01      	cmp	r3, #1
 8005174:	d002      	beq.n	800517c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005176:	2302      	movs	r3, #2
 8005178:	77fb      	strb	r3, [r7, #31]
    goto error;
 800517a:	e10b      	b.n	8005394 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_SPI_Transmit+0x52>
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d102      	bne.n	800518e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800518c:	e102      	b.n	8005394 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2203      	movs	r2, #3
 8005192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	88fa      	ldrh	r2, [r7, #6]
 80051a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	88fa      	ldrh	r2, [r7, #6]
 80051ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d4:	d10f      	bne.n	80051f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b40      	cmp	r3, #64	; 0x40
 8005202:	d007      	beq.n	8005214 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005212:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800521c:	d14b      	bne.n	80052b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <HAL_SPI_Transmit+0xf6>
 8005226:	8afb      	ldrh	r3, [r7, #22]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d13e      	bne.n	80052aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	881a      	ldrh	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	1c9a      	adds	r2, r3, #2
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005250:	e02b      	b.n	80052aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b02      	cmp	r3, #2
 800525e:	d112      	bne.n	8005286 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	881a      	ldrh	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005270:	1c9a      	adds	r2, r3, #2
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	86da      	strh	r2, [r3, #54]	; 0x36
 8005284:	e011      	b.n	80052aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005286:	f7fd fe63 	bl	8002f50 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d803      	bhi.n	800529e <HAL_SPI_Transmit+0x168>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529c:	d102      	bne.n	80052a4 <HAL_SPI_Transmit+0x16e>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052a8:	e074      	b.n	8005394 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1ce      	bne.n	8005252 <HAL_SPI_Transmit+0x11c>
 80052b4:	e04c      	b.n	8005350 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <HAL_SPI_Transmit+0x18e>
 80052be:	8afb      	ldrh	r3, [r7, #22]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d140      	bne.n	8005346 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	330c      	adds	r3, #12
 80052ce:	7812      	ldrb	r2, [r2, #0]
 80052d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052ea:	e02c      	b.n	8005346 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d113      	bne.n	8005322 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	330c      	adds	r3, #12
 8005304:	7812      	ldrb	r2, [r2, #0]
 8005306:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005320:	e011      	b.n	8005346 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005322:	f7fd fe15 	bl	8002f50 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d803      	bhi.n	800533a <HAL_SPI_Transmit+0x204>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d102      	bne.n	8005340 <HAL_SPI_Transmit+0x20a>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d102      	bne.n	8005346 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005344:	e026      	b.n	8005394 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1cd      	bne.n	80052ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	6839      	ldr	r1, [r7, #0]
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 fbcb 	bl	8005af0 <SPI_EndRxTxTransaction>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800536e:	2300      	movs	r3, #0
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	77fb      	strb	r3, [r7, #31]
 8005390:	e000      	b.n	8005394 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005392:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3720      	adds	r7, #32
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b088      	sub	sp, #32
 80053b2:	af02      	add	r7, sp, #8
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	603b      	str	r3, [r7, #0]
 80053ba:	4613      	mov	r3, r2
 80053bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ca:	d112      	bne.n	80053f2 <HAL_SPI_Receive+0x44>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10e      	bne.n	80053f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2204      	movs	r2, #4
 80053d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80053dc:	88fa      	ldrh	r2, [r7, #6]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	4613      	mov	r3, r2
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f8f1 	bl	80055d0 <HAL_SPI_TransmitReceive>
 80053ee:	4603      	mov	r3, r0
 80053f0:	e0ea      	b.n	80055c8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_SPI_Receive+0x52>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e0e3      	b.n	80055c8 <HAL_SPI_Receive+0x21a>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005408:	f7fd fda2 	bl	8002f50 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b01      	cmp	r3, #1
 8005418:	d002      	beq.n	8005420 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800541a:	2302      	movs	r3, #2
 800541c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800541e:	e0ca      	b.n	80055b6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <HAL_SPI_Receive+0x7e>
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005430:	e0c1      	b.n	80055b6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2204      	movs	r2, #4
 8005436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	88fa      	ldrh	r2, [r7, #6]
 800544a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	88fa      	ldrh	r2, [r7, #6]
 8005450:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005478:	d10f      	bne.n	800549a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005488:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005498:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	d007      	beq.n	80054b8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d162      	bne.n	8005586 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80054c0:	e02e      	b.n	8005520 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d115      	bne.n	80054fc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f103 020c 	add.w	r2, r3, #12
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	7812      	ldrb	r2, [r2, #0]
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054fa:	e011      	b.n	8005520 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054fc:	f7fd fd28 	bl	8002f50 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d803      	bhi.n	8005514 <HAL_SPI_Receive+0x166>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005512:	d102      	bne.n	800551a <HAL_SPI_Receive+0x16c>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800551e:	e04a      	b.n	80055b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1cb      	bne.n	80054c2 <HAL_SPI_Receive+0x114>
 800552a:	e031      	b.n	8005590 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b01      	cmp	r3, #1
 8005538:	d113      	bne.n	8005562 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	b292      	uxth	r2, r2
 8005546:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	1c9a      	adds	r2, r3, #2
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005560:	e011      	b.n	8005586 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005562:	f7fd fcf5 	bl	8002f50 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d803      	bhi.n	800557a <HAL_SPI_Receive+0x1cc>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d102      	bne.n	8005580 <HAL_SPI_Receive+0x1d2>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d102      	bne.n	8005586 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005584:	e017      	b.n	80055b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1cd      	bne.n	800552c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fa45 	bl	8005a24 <SPI_EndRxTransaction>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
 80055b2:	e000      	b.n	80055b6 <HAL_SPI_Receive+0x208>
  }

error :
 80055b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08c      	sub	sp, #48	; 0x30
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055de:	2301      	movs	r3, #1
 80055e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x26>
 80055f2:	2302      	movs	r3, #2
 80055f4:	e18a      	b.n	800590c <HAL_SPI_TransmitReceive+0x33c>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055fe:	f7fd fca7 	bl	8002f50 <HAL_GetTick>
 8005602:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800560a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005614:	887b      	ldrh	r3, [r7, #2]
 8005616:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005618:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800561c:	2b01      	cmp	r3, #1
 800561e:	d00f      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x70>
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005626:	d107      	bne.n	8005638 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d103      	bne.n	8005638 <HAL_SPI_TransmitReceive+0x68>
 8005630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005634:	2b04      	cmp	r3, #4
 8005636:	d003      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005638:	2302      	movs	r3, #2
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800563e:	e15b      	b.n	80058f8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d005      	beq.n	8005652 <HAL_SPI_TransmitReceive+0x82>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_SPI_TransmitReceive+0x82>
 800564c:	887b      	ldrh	r3, [r7, #2]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005658:	e14e      	b.n	80058f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b04      	cmp	r3, #4
 8005664:	d003      	beq.n	800566e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2205      	movs	r2, #5
 800566a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	887a      	ldrh	r2, [r7, #2]
 800567e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	887a      	ldrh	r2, [r7, #2]
 8005684:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	887a      	ldrh	r2, [r7, #2]
 8005690:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	887a      	ldrh	r2, [r7, #2]
 8005696:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d007      	beq.n	80056c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ca:	d178      	bne.n	80057be <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <HAL_SPI_TransmitReceive+0x10a>
 80056d4:	8b7b      	ldrh	r3, [r7, #26]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d166      	bne.n	80057a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	881a      	ldrh	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	1c9a      	adds	r2, r3, #2
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056fe:	e053      	b.n	80057a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b02      	cmp	r3, #2
 800570c:	d11b      	bne.n	8005746 <HAL_SPI_TransmitReceive+0x176>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d016      	beq.n	8005746 <HAL_SPI_TransmitReceive+0x176>
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d113      	bne.n	8005746 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005722:	881a      	ldrh	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	1c9a      	adds	r2, r3, #2
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b01      	cmp	r3, #1
 8005752:	d119      	bne.n	8005788 <HAL_SPI_TransmitReceive+0x1b8>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d014      	beq.n	8005788 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	b292      	uxth	r2, r2
 800576a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	1c9a      	adds	r2, r3, #2
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005784:	2301      	movs	r3, #1
 8005786:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005788:	f7fd fbe2 	bl	8002f50 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005794:	429a      	cmp	r2, r3
 8005796:	d807      	bhi.n	80057a8 <HAL_SPI_TransmitReceive+0x1d8>
 8005798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579e:	d003      	beq.n	80057a8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057a6:	e0a7      	b.n	80058f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1a6      	bne.n	8005700 <HAL_SPI_TransmitReceive+0x130>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1a1      	bne.n	8005700 <HAL_SPI_TransmitReceive+0x130>
 80057bc:	e07c      	b.n	80058b8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <HAL_SPI_TransmitReceive+0x1fc>
 80057c6:	8b7b      	ldrh	r3, [r7, #26]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d16b      	bne.n	80058a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	7812      	ldrb	r2, [r2, #0]
 80057d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057f2:	e057      	b.n	80058a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d11c      	bne.n	800583c <HAL_SPI_TransmitReceive+0x26c>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005806:	b29b      	uxth	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d017      	beq.n	800583c <HAL_SPI_TransmitReceive+0x26c>
 800580c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580e:	2b01      	cmp	r3, #1
 8005810:	d114      	bne.n	800583c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	330c      	adds	r3, #12
 800581c:	7812      	ldrb	r2, [r2, #0]
 800581e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b01      	cmp	r3, #1
 8005848:	d119      	bne.n	800587e <HAL_SPI_TransmitReceive+0x2ae>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d014      	beq.n	800587e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005870:	b29b      	uxth	r3, r3
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800587a:	2301      	movs	r3, #1
 800587c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800587e:	f7fd fb67 	bl	8002f50 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800588a:	429a      	cmp	r2, r3
 800588c:	d803      	bhi.n	8005896 <HAL_SPI_TransmitReceive+0x2c6>
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d102      	bne.n	800589c <HAL_SPI_TransmitReceive+0x2cc>
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	2b00      	cmp	r3, #0
 800589a:	d103      	bne.n	80058a4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80058a2:	e029      	b.n	80058f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1a2      	bne.n	80057f4 <HAL_SPI_TransmitReceive+0x224>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d19d      	bne.n	80057f4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 f917 	bl	8005af0 <SPI_EndRxTxTransaction>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d006      	beq.n	80058d6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80058d4:	e010      	b.n	80058f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10b      	bne.n	80058f6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	e000      	b.n	80058f8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80058f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005908:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800590c:	4618      	mov	r0, r3
 800590e:	3730      	adds	r7, #48	; 0x30
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	4613      	mov	r3, r2
 8005922:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005924:	f7fd fb14 	bl	8002f50 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	4413      	add	r3, r2
 8005932:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005934:	f7fd fb0c 	bl	8002f50 <HAL_GetTick>
 8005938:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800593a:	4b39      	ldr	r3, [pc, #228]	; (8005a20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	015b      	lsls	r3, r3, #5
 8005940:	0d1b      	lsrs	r3, r3, #20
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	fb02 f303 	mul.w	r3, r2, r3
 8005948:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800594a:	e054      	b.n	80059f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d050      	beq.n	80059f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005954:	f7fd fafc 	bl	8002f50 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	69fa      	ldr	r2, [r7, #28]
 8005960:	429a      	cmp	r2, r3
 8005962:	d902      	bls.n	800596a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d13d      	bne.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005978:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005982:	d111      	bne.n	80059a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800598c:	d004      	beq.n	8005998 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005996:	d107      	bne.n	80059a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b0:	d10f      	bne.n	80059d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e017      	b.n	8005a16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4013      	ands	r3, r2
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	bf0c      	ite	eq
 8005a06:	2301      	moveq	r3, #1
 8005a08:	2300      	movne	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d19b      	bne.n	800594c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3720      	adds	r7, #32
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000008 	.word	0x20000008

08005a24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a38:	d111      	bne.n	8005a5e <SPI_EndRxTransaction+0x3a>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a42:	d004      	beq.n	8005a4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a4c:	d107      	bne.n	8005a5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a5c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a66:	d12a      	bne.n	8005abe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a70:	d012      	beq.n	8005a98 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2180      	movs	r1, #128	; 0x80
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f7ff ff49 	bl	8005914 <SPI_WaitFlagStateUntilTimeout>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d02d      	beq.n	8005ae4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8c:	f043 0220 	orr.w	r2, r3, #32
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e026      	b.n	8005ae6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f7ff ff36 	bl	8005914 <SPI_WaitFlagStateUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d01a      	beq.n	8005ae4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab2:	f043 0220 	orr.w	r2, r3, #32
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e013      	b.n	8005ae6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f7ff ff23 	bl	8005914 <SPI_WaitFlagStateUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d007      	beq.n	8005ae4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad8:	f043 0220 	orr.w	r2, r3, #32
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e000      	b.n	8005ae6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005afc:	4b1b      	ldr	r3, [pc, #108]	; (8005b6c <SPI_EndRxTxTransaction+0x7c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a1b      	ldr	r2, [pc, #108]	; (8005b70 <SPI_EndRxTxTransaction+0x80>)
 8005b02:	fba2 2303 	umull	r2, r3, r2, r3
 8005b06:	0d5b      	lsrs	r3, r3, #21
 8005b08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b0c:	fb02 f303 	mul.w	r3, r2, r3
 8005b10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b1a:	d112      	bne.n	8005b42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2200      	movs	r2, #0
 8005b24:	2180      	movs	r1, #128	; 0x80
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7ff fef4 	bl	8005914 <SPI_WaitFlagStateUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d016      	beq.n	8005b60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b36:	f043 0220 	orr.w	r2, r3, #32
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e00f      	b.n	8005b62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b58:	2b80      	cmp	r3, #128	; 0x80
 8005b5a:	d0f2      	beq.n	8005b42 <SPI_EndRxTxTransaction+0x52>
 8005b5c:	e000      	b.n	8005b60 <SPI_EndRxTxTransaction+0x70>
        break;
 8005b5e:	bf00      	nop
  }

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000008 	.word	0x20000008
 8005b70:	165e9f81 	.word	0x165e9f81

08005b74 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e034      	b.n	8005bf4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f7fb fbae 	bl	8001300 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3308      	adds	r3, #8
 8005bac:	4619      	mov	r1, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	f000 fca6 	bl	8006500 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	f000 fcf0 	bl	80065a4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6858      	ldr	r0, [r3, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	f000 fd25 	bl	8006620 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	6892      	ldr	r2, [r2, #8]
 8005bde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	6892      	ldr	r2, [r2, #8]
 8005bea:	f041 0101 	orr.w	r1, r1, #1
 8005bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e041      	b.n	8005c92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fd f8a0 	bl	8002d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	f000 fa96 	bl	800616c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d001      	beq.n	8005cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e04e      	b.n	8005d52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a23      	ldr	r2, [pc, #140]	; (8005d60 <HAL_TIM_Base_Start_IT+0xc4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d022      	beq.n	8005d1c <HAL_TIM_Base_Start_IT+0x80>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cde:	d01d      	beq.n	8005d1c <HAL_TIM_Base_Start_IT+0x80>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a1f      	ldr	r2, [pc, #124]	; (8005d64 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d018      	beq.n	8005d1c <HAL_TIM_Base_Start_IT+0x80>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a1e      	ldr	r2, [pc, #120]	; (8005d68 <HAL_TIM_Base_Start_IT+0xcc>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d013      	beq.n	8005d1c <HAL_TIM_Base_Start_IT+0x80>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1c      	ldr	r2, [pc, #112]	; (8005d6c <HAL_TIM_Base_Start_IT+0xd0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00e      	beq.n	8005d1c <HAL_TIM_Base_Start_IT+0x80>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1b      	ldr	r2, [pc, #108]	; (8005d70 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d009      	beq.n	8005d1c <HAL_TIM_Base_Start_IT+0x80>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a19      	ldr	r2, [pc, #100]	; (8005d74 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d004      	beq.n	8005d1c <HAL_TIM_Base_Start_IT+0x80>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a18      	ldr	r2, [pc, #96]	; (8005d78 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d111      	bne.n	8005d40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b06      	cmp	r3, #6
 8005d2c:	d010      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 0201 	orr.w	r2, r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3e:	e007      	b.n	8005d50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0201 	orr.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40000800 	.word	0x40000800
 8005d6c:	40000c00 	.word	0x40000c00
 8005d70:	40010400 	.word	0x40010400
 8005d74:	40014000 	.word	0x40014000
 8005d78:	40001800 	.word	0x40001800

08005d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d122      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d11b      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f06f 0202 	mvn.w	r2, #2
 8005da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	f003 0303 	and.w	r3, r3, #3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f9b5 	bl	800612e <HAL_TIM_IC_CaptureCallback>
 8005dc4:	e005      	b.n	8005dd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f9a7 	bl	800611a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f9b8 	bl	8006142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d122      	bne.n	8005e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d11b      	bne.n	8005e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f06f 0204 	mvn.w	r2, #4
 8005dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2202      	movs	r2, #2
 8005e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f98b 	bl	800612e <HAL_TIM_IC_CaptureCallback>
 8005e18:	e005      	b.n	8005e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f97d 	bl	800611a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f98e 	bl	8006142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d122      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d11b      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f06f 0208 	mvn.w	r2, #8
 8005e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2204      	movs	r2, #4
 8005e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f961 	bl	800612e <HAL_TIM_IC_CaptureCallback>
 8005e6c:	e005      	b.n	8005e7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f953 	bl	800611a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f964 	bl	8006142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	2b10      	cmp	r3, #16
 8005e8c:	d122      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	2b10      	cmp	r3, #16
 8005e9a:	d11b      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0210 	mvn.w	r2, #16
 8005ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2208      	movs	r2, #8
 8005eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f937 	bl	800612e <HAL_TIM_IC_CaptureCallback>
 8005ec0:	e005      	b.n	8005ece <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f929 	bl	800611a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f93a 	bl	8006142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d10e      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d107      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f06f 0201 	mvn.w	r2, #1
 8005ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fc fdd2 	bl	8002aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0a:	2b80      	cmp	r3, #128	; 0x80
 8005f0c:	d10e      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f18:	2b80      	cmp	r3, #128	; 0x80
 8005f1a:	d107      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fae0 	bl	80064ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d10e      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f44:	2b40      	cmp	r3, #64	; 0x40
 8005f46:	d107      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f8ff 	bl	8006156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	d10e      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d107      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0220 	mvn.w	r2, #32
 8005f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 faaa 	bl	80064d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f84:	bf00      	nop
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d101      	bne.n	8005fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e0b4      	b.n	8006112 <HAL_TIM_ConfigClockSource+0x186>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe0:	d03e      	beq.n	8006060 <HAL_TIM_ConfigClockSource+0xd4>
 8005fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe6:	f200 8087 	bhi.w	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fee:	f000 8086 	beq.w	80060fe <HAL_TIM_ConfigClockSource+0x172>
 8005ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff6:	d87f      	bhi.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff8:	2b70      	cmp	r3, #112	; 0x70
 8005ffa:	d01a      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0xa6>
 8005ffc:	2b70      	cmp	r3, #112	; 0x70
 8005ffe:	d87b      	bhi.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006000:	2b60      	cmp	r3, #96	; 0x60
 8006002:	d050      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0x11a>
 8006004:	2b60      	cmp	r3, #96	; 0x60
 8006006:	d877      	bhi.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006008:	2b50      	cmp	r3, #80	; 0x50
 800600a:	d03c      	beq.n	8006086 <HAL_TIM_ConfigClockSource+0xfa>
 800600c:	2b50      	cmp	r3, #80	; 0x50
 800600e:	d873      	bhi.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006010:	2b40      	cmp	r3, #64	; 0x40
 8006012:	d058      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0x13a>
 8006014:	2b40      	cmp	r3, #64	; 0x40
 8006016:	d86f      	bhi.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006018:	2b30      	cmp	r3, #48	; 0x30
 800601a:	d064      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0x15a>
 800601c:	2b30      	cmp	r3, #48	; 0x30
 800601e:	d86b      	bhi.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006020:	2b20      	cmp	r3, #32
 8006022:	d060      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006024:	2b20      	cmp	r3, #32
 8006026:	d867      	bhi.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006028:	2b00      	cmp	r3, #0
 800602a:	d05c      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0x15a>
 800602c:	2b10      	cmp	r3, #16
 800602e:	d05a      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006030:	e062      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6818      	ldr	r0, [r3, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6899      	ldr	r1, [r3, #8]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f000 f9ad 	bl	80063a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	609a      	str	r2, [r3, #8]
      break;
 800605e:	e04f      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	6899      	ldr	r1, [r3, #8]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f000 f996 	bl	80063a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006082:	609a      	str	r2, [r3, #8]
      break;
 8006084:	e03c      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6818      	ldr	r0, [r3, #0]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	6859      	ldr	r1, [r3, #4]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	461a      	mov	r2, r3
 8006094:	f000 f90a 	bl	80062ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2150      	movs	r1, #80	; 0x50
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 f963 	bl	800636a <TIM_ITRx_SetConfig>
      break;
 80060a4:	e02c      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6859      	ldr	r1, [r3, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f000 f929 	bl	800630a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2160      	movs	r1, #96	; 0x60
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 f953 	bl	800636a <TIM_ITRx_SetConfig>
      break;
 80060c4:	e01c      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	6859      	ldr	r1, [r3, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f000 f8ea 	bl	80062ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2140      	movs	r1, #64	; 0x40
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 f943 	bl	800636a <TIM_ITRx_SetConfig>
      break;
 80060e4:	e00c      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4619      	mov	r1, r3
 80060f0:	4610      	mov	r0, r2
 80060f2:	f000 f93a 	bl	800636a <TIM_ITRx_SetConfig>
      break;
 80060f6:	e003      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	73fb      	strb	r3, [r7, #15]
      break;
 80060fc:	e000      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006110:	7bfb      	ldrb	r3, [r7, #15]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
	...

0800616c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a40      	ldr	r2, [pc, #256]	; (8006280 <TIM_Base_SetConfig+0x114>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d013      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800618a:	d00f      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a3d      	ldr	r2, [pc, #244]	; (8006284 <TIM_Base_SetConfig+0x118>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00b      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a3c      	ldr	r2, [pc, #240]	; (8006288 <TIM_Base_SetConfig+0x11c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d007      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a3b      	ldr	r2, [pc, #236]	; (800628c <TIM_Base_SetConfig+0x120>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a3a      	ldr	r2, [pc, #232]	; (8006290 <TIM_Base_SetConfig+0x124>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d108      	bne.n	80061be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a2f      	ldr	r2, [pc, #188]	; (8006280 <TIM_Base_SetConfig+0x114>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d02b      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061cc:	d027      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2c      	ldr	r2, [pc, #176]	; (8006284 <TIM_Base_SetConfig+0x118>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d023      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a2b      	ldr	r2, [pc, #172]	; (8006288 <TIM_Base_SetConfig+0x11c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d01f      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a2a      	ldr	r2, [pc, #168]	; (800628c <TIM_Base_SetConfig+0x120>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d01b      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a29      	ldr	r2, [pc, #164]	; (8006290 <TIM_Base_SetConfig+0x124>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d017      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a28      	ldr	r2, [pc, #160]	; (8006294 <TIM_Base_SetConfig+0x128>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d013      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a27      	ldr	r2, [pc, #156]	; (8006298 <TIM_Base_SetConfig+0x12c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00f      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a26      	ldr	r2, [pc, #152]	; (800629c <TIM_Base_SetConfig+0x130>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00b      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a25      	ldr	r2, [pc, #148]	; (80062a0 <TIM_Base_SetConfig+0x134>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d007      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a24      	ldr	r2, [pc, #144]	; (80062a4 <TIM_Base_SetConfig+0x138>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d003      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a23      	ldr	r2, [pc, #140]	; (80062a8 <TIM_Base_SetConfig+0x13c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d108      	bne.n	8006230 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <TIM_Base_SetConfig+0x114>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d003      	beq.n	8006264 <TIM_Base_SetConfig+0xf8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a0c      	ldr	r2, [pc, #48]	; (8006290 <TIM_Base_SetConfig+0x124>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d103      	bne.n	800626c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	615a      	str	r2, [r3, #20]
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40010000 	.word	0x40010000
 8006284:	40000400 	.word	0x40000400
 8006288:	40000800 	.word	0x40000800
 800628c:	40000c00 	.word	0x40000c00
 8006290:	40010400 	.word	0x40010400
 8006294:	40014000 	.word	0x40014000
 8006298:	40014400 	.word	0x40014400
 800629c:	40014800 	.word	0x40014800
 80062a0:	40001800 	.word	0x40001800
 80062a4:	40001c00 	.word	0x40001c00
 80062a8:	40002000 	.word	0x40002000

080062ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	f023 0201 	bic.w	r2, r3, #1
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f023 030a 	bic.w	r3, r3, #10
 80062e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	621a      	str	r2, [r3, #32]
}
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800630a:	b480      	push	{r7}
 800630c:	b087      	sub	sp, #28
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	f023 0210 	bic.w	r2, r3, #16
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006334:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	031b      	lsls	r3, r3, #12
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006346:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	621a      	str	r2, [r3, #32]
}
 800635e:	bf00      	nop
 8006360:	371c      	adds	r7, #28
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800636a:	b480      	push	{r7}
 800636c:	b085      	sub	sp, #20
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006380:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	f043 0307 	orr.w	r3, r3, #7
 800638c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	609a      	str	r2, [r3, #8]
}
 8006394:	bf00      	nop
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	021a      	lsls	r2, r3, #8
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	609a      	str	r2, [r3, #8]
}
 80063d4:	bf00      	nop
 80063d6:	371c      	adds	r7, #28
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063f4:	2302      	movs	r3, #2
 80063f6:	e05a      	b.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a21      	ldr	r2, [pc, #132]	; (80064bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d022      	beq.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006444:	d01d      	beq.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1d      	ldr	r2, [pc, #116]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d018      	beq.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a1b      	ldr	r2, [pc, #108]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1a      	ldr	r2, [pc, #104]	; (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00e      	beq.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a18      	ldr	r2, [pc, #96]	; (80064cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d009      	beq.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a17      	ldr	r2, [pc, #92]	; (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d004      	beq.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a15      	ldr	r2, [pc, #84]	; (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d10c      	bne.n	800649c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	4313      	orrs	r3, r2
 8006492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40010000 	.word	0x40010000
 80064c0:	40000400 	.word	0x40000400
 80064c4:	40000800 	.word	0x40000800
 80064c8:	40000c00 	.word	0x40000c00
 80064cc:	40010400 	.word	0x40010400
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40001800 	.word	0x40001800

080064d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006518:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4b20      	ldr	r3, [pc, #128]	; (80065a0 <FSMC_NORSRAM_Init+0xa0>)
 800651e:	4013      	ands	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800652a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006530:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006536:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800653c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006542:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006548:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800654e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006554:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800655a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006560:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006566:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800656c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	2b08      	cmp	r3, #8
 800657a:	d103      	bne.n	8006584 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006582:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	fff00080 	.word	0xfff00080

080065a4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065be:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80065c6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80065d2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80065da:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80065e2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80065ec:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	3b02      	subs	r3, #2
 80065f4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80065f6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80065fc:	4313      	orrs	r3, r2
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6979      	ldr	r1, [r7, #20]
 800660c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
	...

08006620 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006638:	d122      	bne.n	8006680 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006642:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4b15      	ldr	r3, [pc, #84]	; (800669c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006648:	4013      	ands	r3, r2
 800664a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006656:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800665e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006666:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800666c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6979      	ldr	r1, [r7, #20]
 800667a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800667e:	e005      	b.n	800668c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	cff00000 	.word	0xcff00000

080066a0 <__libc_init_array>:
 80066a0:	b570      	push	{r4, r5, r6, lr}
 80066a2:	4d0d      	ldr	r5, [pc, #52]	; (80066d8 <__libc_init_array+0x38>)
 80066a4:	4c0d      	ldr	r4, [pc, #52]	; (80066dc <__libc_init_array+0x3c>)
 80066a6:	1b64      	subs	r4, r4, r5
 80066a8:	10a4      	asrs	r4, r4, #2
 80066aa:	2600      	movs	r6, #0
 80066ac:	42a6      	cmp	r6, r4
 80066ae:	d109      	bne.n	80066c4 <__libc_init_array+0x24>
 80066b0:	4d0b      	ldr	r5, [pc, #44]	; (80066e0 <__libc_init_array+0x40>)
 80066b2:	4c0c      	ldr	r4, [pc, #48]	; (80066e4 <__libc_init_array+0x44>)
 80066b4:	f000 f820 	bl	80066f8 <_init>
 80066b8:	1b64      	subs	r4, r4, r5
 80066ba:	10a4      	asrs	r4, r4, #2
 80066bc:	2600      	movs	r6, #0
 80066be:	42a6      	cmp	r6, r4
 80066c0:	d105      	bne.n	80066ce <__libc_init_array+0x2e>
 80066c2:	bd70      	pop	{r4, r5, r6, pc}
 80066c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c8:	4798      	blx	r3
 80066ca:	3601      	adds	r6, #1
 80066cc:	e7ee      	b.n	80066ac <__libc_init_array+0xc>
 80066ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d2:	4798      	blx	r3
 80066d4:	3601      	adds	r6, #1
 80066d6:	e7f2      	b.n	80066be <__libc_init_array+0x1e>
 80066d8:	080096c0 	.word	0x080096c0
 80066dc:	080096c0 	.word	0x080096c0
 80066e0:	080096c0 	.word	0x080096c0
 80066e4:	080096c4 	.word	0x080096c4

080066e8 <memset>:
 80066e8:	4402      	add	r2, r0
 80066ea:	4603      	mov	r3, r0
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d100      	bne.n	80066f2 <memset+0xa>
 80066f0:	4770      	bx	lr
 80066f2:	f803 1b01 	strb.w	r1, [r3], #1
 80066f6:	e7f9      	b.n	80066ec <memset+0x4>

080066f8 <_init>:
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fa:	bf00      	nop
 80066fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fe:	bc08      	pop	{r3}
 8006700:	469e      	mov	lr, r3
 8006702:	4770      	bx	lr

08006704 <_fini>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	bf00      	nop
 8006708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670a:	bc08      	pop	{r3}
 800670c:	469e      	mov	lr, r3
 800670e:	4770      	bx	lr
