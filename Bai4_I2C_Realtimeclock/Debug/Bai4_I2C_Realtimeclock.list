
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005258  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f98  080053e0  080053e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008378  08008378  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08008378  08008378  00018378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008380  08008380  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008380  08008380  00018380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008384  08008384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08008388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000001b0  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001c4  200001c4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001343e  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030b1  00000000  00000000  00033482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  00036538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001080  00000000  00000000  00037728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230b2  00000000  00000000  000387a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016947  00000000  00000000  0005b85a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf3ae  00000000  00000000  000721a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014154f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049b8  00000000  00000000  001415a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053c8 	.word	0x080053c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080053c8 	.word	0x080053c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2108      	movs	r1, #8
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <button_init+0x14>)
 80004d6:	f001 fe81 	bl	80021dc <HAL_GPIO_WritePin>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40020c00 	.word	0x40020c00

080004e4 <button_Scan>:

void button_Scan(){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2108      	movs	r1, #8
 80004ee:	482f      	ldr	r0, [pc, #188]	; (80005ac <button_Scan+0xc8>)
 80004f0:	f001 fe74 	bl	80021dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2108      	movs	r1, #8
 80004f8:	482c      	ldr	r0, [pc, #176]	; (80005ac <button_Scan+0xc8>)
 80004fa:	f001 fe6f 	bl	80021dc <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004fe:	230a      	movs	r3, #10
 8000500:	2202      	movs	r2, #2
 8000502:	492b      	ldr	r1, [pc, #172]	; (80005b0 <button_Scan+0xcc>)
 8000504:	482b      	ldr	r0, [pc, #172]	; (80005b4 <button_Scan+0xd0>)
 8000506:	f003 fdba 	bl	800407e <HAL_SPI_Receive>
	  int button_index = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800050e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000512:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	e03f      	b.n	800059a <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b00      	cmp	r3, #0
 800051e:	db06      	blt.n	800052e <button_Scan+0x4a>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b03      	cmp	r3, #3
 8000524:	dc03      	bgt.n	800052e <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3304      	adds	r3, #4
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	e018      	b.n	8000560 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b03      	cmp	r3, #3
 8000532:	dd07      	ble.n	8000544 <button_Scan+0x60>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b07      	cmp	r3, #7
 8000538:	dc04      	bgt.n	8000544 <button_Scan+0x60>
			  button_index = 7 - i;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f1c3 0307 	rsb	r3, r3, #7
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	e00d      	b.n	8000560 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b07      	cmp	r3, #7
 8000548:	dd06      	ble.n	8000558 <button_Scan+0x74>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0b      	cmp	r3, #11
 800054e:	dc03      	bgt.n	8000558 <button_Scan+0x74>
			  button_index = i + 4;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3304      	adds	r3, #4
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	e003      	b.n	8000560 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f1c3 0317 	rsb	r3, r3, #23
 800055e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <button_Scan+0xcc>)
 8000562:	881a      	ldrh	r2, [r3, #0]
 8000564:	897b      	ldrh	r3, [r7, #10]
 8000566:	4013      	ands	r3, r2
 8000568:	b29b      	uxth	r3, r3
 800056a:	2b00      	cmp	r3, #0
 800056c:	d005      	beq.n	800057a <button_Scan+0x96>
 800056e:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <button_Scan+0xd4>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2100      	movs	r1, #0
 8000574:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000578:	e009      	b.n	800058e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800057a:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <button_Scan+0xd4>)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000582:	3301      	adds	r3, #1
 8000584:	b299      	uxth	r1, r3
 8000586:	4a0c      	ldr	r2, [pc, #48]	; (80005b8 <button_Scan+0xd4>)
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800058e:	897b      	ldrh	r3, [r7, #10]
 8000590:	085b      	lsrs	r3, r3, #1
 8000592:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3301      	adds	r3, #1
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b0f      	cmp	r3, #15
 800059e:	ddbc      	ble.n	800051a <button_Scan+0x36>
	  }
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40020c00 	.word	0x40020c00
 80005b0:	20000050 	.word	0x20000050
 80005b4:	20000120 	.word	0x20000120
 80005b8:	20000030 	.word	0x20000030

080005bc <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80005c0:	201e      	movs	r0, #30
 80005c2:	f001 fa79 	bl	8001ab8 <DEC2BCD>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <ds3231_init+0x80>)
 80005cc:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80005ce:	2016      	movs	r0, #22
 80005d0:	f001 fa72 	bl	8001ab8 <DEC2BCD>
 80005d4:	4603      	mov	r3, r0
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b18      	ldr	r3, [pc, #96]	; (800063c <ds3231_init+0x80>)
 80005da:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80005dc:	2015      	movs	r0, #21
 80005de:	f001 fa6b 	bl	8001ab8 <DEC2BCD>
 80005e2:	4603      	mov	r3, r0
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <ds3231_init+0x80>)
 80005e8:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005ea:	2006      	movs	r0, #6
 80005ec:	f001 fa64 	bl	8001ab8 <DEC2BCD>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <ds3231_init+0x80>)
 80005f6:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80005f8:	200f      	movs	r0, #15
 80005fa:	f001 fa5d 	bl	8001ab8 <DEC2BCD>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <ds3231_init+0x80>)
 8000604:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 8000606:	2009      	movs	r0, #9
 8000608:	f001 fa56 	bl	8001ab8 <DEC2BCD>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <ds3231_init+0x80>)
 8000612:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000614:	2017      	movs	r0, #23
 8000616:	f001 fa4f 	bl	8001ab8 <DEC2BCD>
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <ds3231_init+0x80>)
 8000620:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000622:	2332      	movs	r3, #50	; 0x32
 8000624:	2203      	movs	r2, #3
 8000626:	21d0      	movs	r1, #208	; 0xd0
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <ds3231_init+0x84>)
 800062a:	f002 fa55 	bl	8002ad8 <HAL_I2C_IsDeviceReady>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d000      	beq.n	8000636 <ds3231_init+0x7a>
		while(1);
 8000634:	e7fe      	b.n	8000634 <ds3231_init+0x78>
	};
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000054 	.word	0x20000054
 8000640:	200000b8 	.word	0x200000b8

08000644 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af04      	add	r7, sp, #16
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fa2e 	bl	8001ab8 <DEC2BCD>
 800065c:	4603      	mov	r3, r0
 800065e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	b29a      	uxth	r2, r3
 8000664:	230a      	movs	r3, #10
 8000666:	9302      	str	r3, [sp, #8]
 8000668:	2301      	movs	r3, #1
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	f107 030f 	add.w	r3, r7, #15
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2301      	movs	r3, #1
 8000674:	21d0      	movs	r1, #208	; 0xd0
 8000676:	4803      	ldr	r0, [pc, #12]	; (8000684 <ds3231_Write+0x40>)
 8000678:	f001 ff0e 	bl	8002498 <HAL_I2C_Mem_Write>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000b8 	.word	0x200000b8

08000688 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800068e:	230a      	movs	r3, #10
 8000690:	9302      	str	r3, [sp, #8]
 8000692:	2307      	movs	r3, #7
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	4b25      	ldr	r3, [pc, #148]	; (800072c <ds3231_ReadTime+0xa4>)
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2200      	movs	r2, #0
 800069e:	21d0      	movs	r1, #208	; 0xd0
 80006a0:	4823      	ldr	r0, [pc, #140]	; (8000730 <ds3231_ReadTime+0xa8>)
 80006a2:	f001 fff3 	bl	800268c <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80006a6:	4b21      	ldr	r3, [pc, #132]	; (800072c <ds3231_ReadTime+0xa4>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 f9ea 	bl	8001a84 <BCD2DEC>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <ds3231_ReadTime+0xac>)
 80006b6:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <ds3231_ReadTime+0xa4>)
 80006ba:	785b      	ldrb	r3, [r3, #1]
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 f9e1 	bl	8001a84 <BCD2DEC>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <ds3231_ReadTime+0xb0>)
 80006c8:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <ds3231_ReadTime+0xa4>)
 80006cc:	789b      	ldrb	r3, [r3, #2]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f9d8 	bl	8001a84 <BCD2DEC>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <ds3231_ReadTime+0xb4>)
 80006da:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <ds3231_ReadTime+0xa4>)
 80006de:	78db      	ldrb	r3, [r3, #3]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 f9cf 	bl	8001a84 <BCD2DEC>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <ds3231_ReadTime+0xb8>)
 80006ec:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <ds3231_ReadTime+0xa4>)
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 f9c6 	bl	8001a84 <BCD2DEC>
 80006f8:	4603      	mov	r3, r0
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <ds3231_ReadTime+0xbc>)
 80006fe:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <ds3231_ReadTime+0xa4>)
 8000702:	795b      	ldrb	r3, [r3, #5]
 8000704:	4618      	mov	r0, r3
 8000706:	f001 f9bd 	bl	8001a84 <BCD2DEC>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <ds3231_ReadTime+0xc0>)
 8000710:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <ds3231_ReadTime+0xa4>)
 8000714:	799b      	ldrb	r3, [r3, #6]
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f9b4 	bl	8001a84 <BCD2DEC>
 800071c:	4603      	mov	r3, r0
 800071e:	461a      	mov	r2, r3
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <ds3231_ReadTime+0xc4>)
 8000722:	701a      	strb	r2, [r3, #0]
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000054 	.word	0x20000054
 8000730:	200000b8 	.word	0x200000b8
 8000734:	2000005d 	.word	0x2000005d
 8000738:	2000005c 	.word	0x2000005c
 800073c:	2000005b 	.word	0x2000005b
 8000740:	2000005f 	.word	0x2000005f
 8000744:	2000005e 	.word	0x2000005e
 8000748:	20000060 	.word	0x20000060
 800074c:	20000061 	.word	0x20000061

08000750 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08e      	sub	sp, #56	; 0x38
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800077c:	4b2f      	ldr	r3, [pc, #188]	; (800083c <MX_FSMC_Init+0xec>)
 800077e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000782:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000784:	4b2d      	ldr	r3, [pc, #180]	; (800083c <MX_FSMC_Init+0xec>)
 8000786:	4a2e      	ldr	r2, [pc, #184]	; (8000840 <MX_FSMC_Init+0xf0>)
 8000788:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800078a:	4b2c      	ldr	r3, [pc, #176]	; (800083c <MX_FSMC_Init+0xec>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000790:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_FSMC_Init+0xec>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000796:	4b29      	ldr	r3, [pc, #164]	; (800083c <MX_FSMC_Init+0xec>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800079c:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_FSMC_Init+0xec>)
 800079e:	2210      	movs	r2, #16
 80007a0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_FSMC_Init+0xec>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80007a8:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_FSMC_Init+0xec>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_FSMC_Init+0xec>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_FSMC_Init+0xec>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_FSMC_Init+0xec>)
 80007bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_FSMC_Init+0xec>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_FSMC_Init+0xec>)
 80007ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ce:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_FSMC_Init+0xec>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_FSMC_Init+0xec>)
 80007d8:	2200      	movs	r2, #0
 80007da:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_FSMC_Init+0xec>)
 80007de:	2200      	movs	r2, #0
 80007e0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007e2:	230f      	movs	r3, #15
 80007e4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007e6:	230f      	movs	r3, #15
 80007e8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007ea:	233c      	movs	r3, #60	; 0x3c
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80007f2:	2310      	movs	r3, #16
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80007f6:	2311      	movs	r3, #17
 80007f8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007fa:	2300      	movs	r3, #0
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80007fe:	2308      	movs	r3, #8
 8000800:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000802:	230f      	movs	r3, #15
 8000804:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000806:	2309      	movs	r3, #9
 8000808:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800080e:	2310      	movs	r3, #16
 8000810:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000812:	2311      	movs	r3, #17
 8000814:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800081a:	463a      	mov	r2, r7
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <MX_FSMC_Init+0xec>)
 8000824:	f004 f80e 	bl	8004844 <HAL_SRAM_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800082e:	f000 ff75 	bl	800171c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000832:	bf00      	nop
 8000834:	3738      	adds	r7, #56	; 0x38
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000064 	.word	0x20000064
 8000840:	a0000104 	.word	0xa0000104

08000844 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <HAL_FSMC_MspInit+0x88>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d131      	bne.n	80008c4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <HAL_FSMC_MspInit+0x88>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_FSMC_MspInit+0x8c>)
 800086c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800086e:	4a18      	ldr	r2, [pc, #96]	; (80008d0 <HAL_FSMC_MspInit+0x8c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6393      	str	r3, [r2, #56]	; 0x38
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <HAL_FSMC_MspInit+0x8c>)
 8000878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000882:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000886:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000894:	230c      	movs	r3, #12
 8000896:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4619      	mov	r1, r3
 800089c:	480d      	ldr	r0, [pc, #52]	; (80008d4 <HAL_FSMC_MspInit+0x90>)
 800089e:	f001 fb01 	bl	8001ea4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80008a2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80008a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008b4:	230c      	movs	r3, #12
 80008b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <HAL_FSMC_MspInit+0x94>)
 80008be:	f001 faf1 	bl	8001ea4 <HAL_GPIO_Init>
 80008c2:	e000      	b.n	80008c6 <HAL_FSMC_MspInit+0x82>
    return;
 80008c4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000b4 	.word	0x200000b4
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40020c00 	.word	0x40020c00

080008dc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008e4:	f7ff ffae 	bl	8000844 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	4b6f      	ldr	r3, [pc, #444]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a6e      	ldr	r2, [pc, #440]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 8000910:	f043 0310 	orr.w	r3, r3, #16
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b6c      	ldr	r3, [pc, #432]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	4b68      	ldr	r3, [pc, #416]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a67      	ldr	r2, [pc, #412]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b65      	ldr	r3, [pc, #404]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b61      	ldr	r3, [pc, #388]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a60      	ldr	r2, [pc, #384]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b5e      	ldr	r3, [pc, #376]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b5a      	ldr	r3, [pc, #360]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a59      	ldr	r2, [pc, #356]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b57      	ldr	r3, [pc, #348]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b53      	ldr	r3, [pc, #332]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a52      	ldr	r2, [pc, #328]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b50      	ldr	r3, [pc, #320]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b4c      	ldr	r3, [pc, #304]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a4b      	ldr	r2, [pc, #300]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b49      	ldr	r3, [pc, #292]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b45      	ldr	r3, [pc, #276]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a44      	ldr	r2, [pc, #272]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b42      	ldr	r3, [pc, #264]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2170      	movs	r1, #112	; 0x70
 80009ce:	483f      	ldr	r0, [pc, #252]	; (8000acc <MX_GPIO_Init+0x1dc>)
 80009d0:	f001 fc04 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009da:	483d      	ldr	r0, [pc, #244]	; (8000ad0 <MX_GPIO_Init+0x1e0>)
 80009dc:	f001 fbfe 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2140      	movs	r1, #64	; 0x40
 80009e4:	483b      	ldr	r0, [pc, #236]	; (8000ad4 <MX_GPIO_Init+0x1e4>)
 80009e6:	f001 fbf9 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f0:	4839      	ldr	r0, [pc, #228]	; (8000ad8 <MX_GPIO_Init+0x1e8>)
 80009f2:	f001 fbf3 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2108      	movs	r1, #8
 80009fa:	4838      	ldr	r0, [pc, #224]	; (8000adc <MX_GPIO_Init+0x1ec>)
 80009fc:	f001 fbee 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000a00:	2370      	movs	r3, #112	; 0x70
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	482d      	ldr	r0, [pc, #180]	; (8000acc <MX_GPIO_Init+0x1dc>)
 8000a18:	f001 fa44 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4826      	ldr	r0, [pc, #152]	; (8000ad0 <MX_GPIO_Init+0x1e0>)
 8000a36:	f001 fa35 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a3a:	23c0      	movs	r3, #192	; 0xc0
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4822      	ldr	r0, [pc, #136]	; (8000ad8 <MX_GPIO_Init+0x1e8>)
 8000a4e:	f001 fa29 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a52:	2330      	movs	r3, #48	; 0x30
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	481a      	ldr	r0, [pc, #104]	; (8000ad0 <MX_GPIO_Init+0x1e0>)
 8000a66:	f001 fa1d 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <MX_GPIO_Init+0x1e4>)
 8000a82:	f001 fa0f 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <MX_GPIO_Init+0x1e8>)
 8000aa0:	f001 fa00 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4808      	ldr	r0, [pc, #32]	; (8000adc <MX_GPIO_Init+0x1ec>)
 8000abc:	f001 f9f2 	bl	8001ea4 <HAL_GPIO_Init>

}
 8000ac0:	bf00      	nop
 8000ac2:	3730      	adds	r7, #48	; 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40021800 	.word	0x40021800
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020c00 	.word	0x40020c00

08000ae0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000ae6:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <MX_I2C1_Init+0x54>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000aec:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <MX_I2C1_Init+0x58>)
 8000aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_I2C1_Init+0x50>)
 8000b1e:	f001 fb77 	bl	8002210 <HAL_I2C_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b28:	f000 fdf8 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200000b8 	.word	0x200000b8
 8000b34:	40005400 	.word	0x40005400
 8000b38:	000186a0 	.word	0x000186a0

08000b3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_I2C_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12b      	bne.n	8000bb6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b7a:	23c0      	movs	r3, #192	; 0xc0
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7e:	2312      	movs	r3, #18
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <HAL_I2C_MspInit+0x8c>)
 8000b96:	f001 f985 	bl	8001ea4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000ba4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	; 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020400 	.word	0x40020400

08000bcc <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <LCD_WR_REG+0x1c>)
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	8013      	strh	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	600ffffe 	.word	0x600ffffe

08000bec <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <LCD_WR_DATA+0x1c>)
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	8053      	strh	r3, [r2, #2]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	600ffffe 	.word	0x600ffffe

08000c0c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <LCD_RD_DATA+0x20>)
 8000c14:	885b      	ldrh	r3, [r3, #2]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	b29b      	uxth	r3, r3
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	600ffffe 	.word	0x600ffffe

08000c30 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4604      	mov	r4, r0
 8000c38:	4608      	mov	r0, r1
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4623      	mov	r3, r4
 8000c40:	80fb      	strh	r3, [r7, #6]
 8000c42:	4603      	mov	r3, r0
 8000c44:	80bb      	strh	r3, [r7, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	807b      	strh	r3, [r7, #2]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000c4e:	202a      	movs	r0, #42	; 0x2a
 8000c50:	f7ff ffbc 	bl	8000bcc <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ffc6 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ffc0 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	0a1b      	lsrs	r3, r3, #8
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ffba 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c78:	887b      	ldrh	r3, [r7, #2]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ffb4 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000c84:	202b      	movs	r0, #43	; 0x2b
 8000c86:	f7ff ffa1 	bl	8000bcc <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000c8a:	88bb      	ldrh	r3, [r7, #4]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ffab 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000c96:	88bb      	ldrh	r3, [r7, #4]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ffa5 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000ca2:	883b      	ldrh	r3, [r7, #0]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff9f 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000cae:	883b      	ldrh	r3, [r7, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff99 	bl	8000bec <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000cba:	202c      	movs	r0, #44	; 0x2c
 8000cbc:	f7ff ff86 	bl	8000bcc <LCD_WR_REG>
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd90      	pop	{r4, r7, pc}

08000cc8 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <lcd_Clear+0x70>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <lcd_Clear+0x70>)
 8000cec:	885b      	ldrh	r3, [r3, #2]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff ff9b 	bl	8000c30 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	81fb      	strh	r3, [r7, #14]
 8000cfe:	e011      	b.n	8000d24 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	81bb      	strh	r3, [r7, #12]
 8000d04:	e006      	b.n	8000d14 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff6f 	bl	8000bec <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000d0e:	89bb      	ldrh	r3, [r7, #12]
 8000d10:	3301      	adds	r3, #1
 8000d12:	81bb      	strh	r3, [r7, #12]
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <lcd_Clear+0x70>)
 8000d16:	885b      	ldrh	r3, [r3, #2]
 8000d18:	89ba      	ldrh	r2, [r7, #12]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d3f3      	bcc.n	8000d06 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000d1e:	89fb      	ldrh	r3, [r7, #14]
 8000d20:	3301      	adds	r3, #1
 8000d22:	81fb      	strh	r3, [r7, #14]
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <lcd_Clear+0x70>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	89fa      	ldrh	r2, [r7, #14]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d3e8      	bcc.n	8000d00 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2000010c 	.word	0x2000010c

08000d3c <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
 8000d46:	460b      	mov	r3, r1
 8000d48:	80bb      	strh	r3, [r7, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000d4e:	88bb      	ldrh	r3, [r7, #4]
 8000d50:	88fa      	ldrh	r2, [r7, #6]
 8000d52:	88b9      	ldrh	r1, [r7, #4]
 8000d54:	88f8      	ldrh	r0, [r7, #6]
 8000d56:	f7ff ff6b 	bl	8000c30 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000d5a:	887b      	ldrh	r3, [r7, #2]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff45 	bl	8000bec <LCD_WR_DATA>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	4608      	mov	r0, r1
 8000d76:	4611      	mov	r1, r2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	80fb      	strh	r3, [r7, #6]
 8000d7e:	4603      	mov	r3, r0
 8000d80:	80bb      	strh	r3, [r7, #4]
 8000d82:	460b      	mov	r3, r1
 8000d84:	70fb      	strb	r3, [r7, #3]
 8000d86:	4613      	mov	r3, r2
 8000d88:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000d92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d96:	085b      	lsrs	r3, r3, #1
 8000d98:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	08db      	lsrs	r3, r3, #3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	461a      	mov	r2, r3
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bf14      	ite	ne
 8000dae:	2301      	movne	r3, #1
 8000db0:	2300      	moveq	r3, #0
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	4413      	add	r3, r2
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	fb12 f303 	smulbb	r3, r2, r3
 8000dc2:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000dc4:	78fb      	ldrb	r3, [r7, #3]
 8000dc6:	3b20      	subs	r3, #32
 8000dc8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	b29c      	uxth	r4, r3
 8000dd8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	3b01      	subs	r3, #1
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	88b9      	ldrh	r1, [r7, #4]
 8000dea:	88f8      	ldrh	r0, [r7, #6]
 8000dec:	4622      	mov	r2, r4
 8000dee:	f7ff ff1f 	bl	8000c30 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	827b      	strh	r3, [r7, #18]
 8000df6:	e07a      	b.n	8000eee <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000df8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dfc:	2b0c      	cmp	r3, #12
 8000dfe:	d028      	beq.n	8000e52 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000e00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e04:	2b10      	cmp	r3, #16
 8000e06:	d108      	bne.n	8000e1a <lcd_ShowChar+0xae>
 8000e08:	78fa      	ldrb	r2, [r7, #3]
 8000e0a:	8a7b      	ldrh	r3, [r7, #18]
 8000e0c:	493c      	ldr	r1, [pc, #240]	; (8000f00 <lcd_ShowChar+0x194>)
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	440a      	add	r2, r1
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	75fb      	strb	r3, [r7, #23]
 8000e18:	e01b      	b.n	8000e52 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000e1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e1e:	2b18      	cmp	r3, #24
 8000e20:	d10b      	bne.n	8000e3a <lcd_ShowChar+0xce>
 8000e22:	78fa      	ldrb	r2, [r7, #3]
 8000e24:	8a79      	ldrh	r1, [r7, #18]
 8000e26:	4837      	ldr	r0, [pc, #220]	; (8000f04 <lcd_ShowChar+0x198>)
 8000e28:	4613      	mov	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	4413      	add	r3, r2
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	4403      	add	r3, r0
 8000e32:	440b      	add	r3, r1
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	75fb      	strb	r3, [r7, #23]
 8000e38:	e00b      	b.n	8000e52 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000e3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e3e:	2b20      	cmp	r3, #32
 8000e40:	d15a      	bne.n	8000ef8 <lcd_ShowChar+0x18c>
 8000e42:	78fa      	ldrb	r2, [r7, #3]
 8000e44:	8a7b      	ldrh	r3, [r7, #18]
 8000e46:	4930      	ldr	r1, [pc, #192]	; (8000f08 <lcd_ShowChar+0x19c>)
 8000e48:	0192      	lsls	r2, r2, #6
 8000e4a:	440a      	add	r2, r1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	75bb      	strb	r3, [r7, #22]
 8000e56:	e044      	b.n	8000ee2 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000e58:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d120      	bne.n	8000ea2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000e60:	7dfa      	ldrb	r2, [r7, #23]
 8000e62:	7dbb      	ldrb	r3, [r7, #22]
 8000e64:	fa42 f303 	asr.w	r3, r2, r3
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d004      	beq.n	8000e7a <lcd_ShowChar+0x10e>
 8000e70:	883b      	ldrh	r3, [r7, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff feba 	bl	8000bec <LCD_WR_DATA>
 8000e78:	e003      	b.n	8000e82 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000e7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff feb5 	bl	8000bec <LCD_WR_DATA>
				m++;
 8000e82:	7d7b      	ldrb	r3, [r7, #21]
 8000e84:	3301      	adds	r3, #1
 8000e86:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000e88:	7d7b      	ldrb	r3, [r7, #21]
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e90:	fb01 f202 	mul.w	r2, r1, r2
 8000e94:	1a9b      	subs	r3, r3, r2
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d11f      	bne.n	8000edc <lcd_ShowChar+0x170>
				{
					m=0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	757b      	strb	r3, [r7, #21]
					break;
 8000ea0:	e022      	b.n	8000ee8 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000ea2:	7dfa      	ldrb	r2, [r7, #23]
 8000ea4:	7dbb      	ldrb	r3, [r7, #22]
 8000ea6:	fa42 f303 	asr.w	r3, r2, r3
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d005      	beq.n	8000ebe <lcd_ShowChar+0x152>
 8000eb2:	883a      	ldrh	r2, [r7, #0]
 8000eb4:	88b9      	ldrh	r1, [r7, #4]
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff3f 	bl	8000d3c <lcd_DrawPoint>
				x++;
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000ec4:	88fa      	ldrh	r2, [r7, #6]
 8000ec6:	8a3b      	ldrh	r3, [r7, #16]
 8000ec8:	1ad2      	subs	r2, r2, r3
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d105      	bne.n	8000edc <lcd_ShowChar+0x170>
				{
					x=x0;
 8000ed0:	8a3b      	ldrh	r3, [r7, #16]
 8000ed2:	80fb      	strh	r3, [r7, #6]
					y++;
 8000ed4:	88bb      	ldrh	r3, [r7, #4]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	80bb      	strh	r3, [r7, #4]
					break;
 8000eda:	e005      	b.n	8000ee8 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000edc:	7dbb      	ldrb	r3, [r7, #22]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	75bb      	strb	r3, [r7, #22]
 8000ee2:	7dbb      	ldrb	r3, [r7, #22]
 8000ee4:	2b07      	cmp	r3, #7
 8000ee6:	d9b7      	bls.n	8000e58 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000ee8:	8a7b      	ldrh	r3, [r7, #18]
 8000eea:	3301      	adds	r3, #1
 8000eec:	827b      	strh	r3, [r7, #18]
 8000eee:	8a7a      	ldrh	r2, [r7, #18]
 8000ef0:	89bb      	ldrh	r3, [r7, #12]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d380      	bcc.n	8000df8 <lcd_ShowChar+0x8c>
 8000ef6:	e000      	b.n	8000efa <lcd_ShowChar+0x18e>
		else return;
 8000ef8:	bf00      	nop
				}
			}
		}
	}
}
 8000efa:	371c      	adds	r7, #28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd90      	pop	{r4, r7, pc}
 8000f00:	080053e0 	.word	0x080053e0
 8000f04:	080059d0 	.word	0x080059d0
 8000f08:	08006ba0 	.word	0x08006ba0

08000f0c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	460a      	mov	r2, r1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000f20:	e004      	b.n	8000f2c <mypow+0x20>
 8000f22:	79fa      	ldrb	r2, [r7, #7]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	79bb      	ldrb	r3, [r7, #6]
 8000f2e:	1e5a      	subs	r2, r3, #1
 8000f30:	71ba      	strb	r2, [r7, #6]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f5      	bne.n	8000f22 <mypow+0x16>
	return result;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af04      	add	r7, sp, #16
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	4611      	mov	r1, r2
 8000f50:	461a      	mov	r2, r3
 8000f52:	4623      	mov	r3, r4
 8000f54:	80fb      	strh	r3, [r7, #6]
 8000f56:	4603      	mov	r3, r0
 8000f58:	80bb      	strh	r3, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	807b      	strh	r3, [r7, #2]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000f66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f6a:	085b      	lsrs	r3, r3, #1
 8000f6c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	e059      	b.n	8001028 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000f74:	887c      	ldrh	r4, [r7, #2]
 8000f76:	787a      	ldrb	r2, [r7, #1]
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4619      	mov	r1, r3
 8000f84:	200a      	movs	r0, #10
 8000f86:	f7ff ffc1 	bl	8000f0c <mypow>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	fbb4 f1f3 	udiv	r1, r4, r3
 8000f90:	4b2a      	ldr	r3, [pc, #168]	; (800103c <lcd_ShowIntNum+0xf8>)
 8000f92:	fba3 2301 	umull	r2, r3, r3, r1
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	1aca      	subs	r2, r1, r3
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000fa6:	7bbb      	ldrb	r3, [r7, #14]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d121      	bne.n	8000ff0 <lcd_ShowIntNum+0xac>
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	787b      	ldrb	r3, [r7, #1]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	da1c      	bge.n	8000ff0 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000fb6:	7b3b      	ldrb	r3, [r7, #12]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d117      	bne.n	8000fec <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	7b7b      	ldrb	r3, [r7, #13]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	fb12 f303 	smulbb	r3, r2, r3
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	4413      	add	r3, r2
 8000fce:	b298      	uxth	r0, r3
 8000fd0:	8c3a      	ldrh	r2, [r7, #32]
 8000fd2:	88b9      	ldrh	r1, [r7, #4]
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	f7ff fec1 	bl	8000d6c <lcd_ShowChar>
				continue;
 8000fea:	e01a      	b.n	8001022 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	7b7b      	ldrb	r3, [r7, #13]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	fb12 f303 	smulbb	r3, r2, r3
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	4413      	add	r3, r2
 8001002:	b298      	uxth	r0, r3
 8001004:	7b3b      	ldrb	r3, [r7, #12]
 8001006:	3330      	adds	r3, #48	; 0x30
 8001008:	b2da      	uxtb	r2, r3
 800100a:	8c3c      	ldrh	r4, [r7, #32]
 800100c:	88b9      	ldrh	r1, [r7, #4]
 800100e:	2300      	movs	r3, #0
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	4623      	mov	r3, r4
 800101e:	f7ff fea5 	bl	8000d6c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	3301      	adds	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	787b      	ldrb	r3, [r7, #1]
 800102c:	429a      	cmp	r2, r3
 800102e:	d3a1      	bcc.n	8000f74 <lcd_ShowIntNum+0x30>
	}
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	bf00      	nop
 800103c:	cccccccd 	.word	0xcccccccd

08001040 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	091b      	lsrs	r3, r3, #4
 800104e:	b2db      	uxtb	r3, r3
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <lcd_SetDir+0x44>)
 800105c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001060:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <lcd_SetDir+0x44>)
 8001064:	22f0      	movs	r2, #240	; 0xf0
 8001066:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001068:	e006      	b.n	8001078 <lcd_SetDir+0x38>
		lcddev.width=240;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <lcd_SetDir+0x44>)
 800106c:	22f0      	movs	r2, #240	; 0xf0
 800106e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <lcd_SetDir+0x44>)
 8001072:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001076:	805a      	strh	r2, [r3, #2]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	2000010c 	.word	0x2000010c

08001088 <lcd_init>:


void lcd_init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001092:	48aa      	ldr	r0, [pc, #680]	; (800133c <lcd_init+0x2b4>)
 8001094:	f001 f8a2 	bl	80021dc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001098:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800109c:	f000 fdcc 	bl	8001c38 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a6:	48a5      	ldr	r0, [pc, #660]	; (800133c <lcd_init+0x2b4>)
 80010a8:	f001 f898 	bl	80021dc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b0:	f000 fdc2 	bl	8001c38 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff ffc3 	bl	8001040 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80010ba:	20d3      	movs	r0, #211	; 0xd3
 80010bc:	f7ff fd86 	bl	8000bcc <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80010c0:	f7ff fda4 	bl	8000c0c <LCD_RD_DATA>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b9d      	ldr	r3, [pc, #628]	; (8001340 <lcd_init+0x2b8>)
 80010ca:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010cc:	f7ff fd9e 	bl	8000c0c <LCD_RD_DATA>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b9a      	ldr	r3, [pc, #616]	; (8001340 <lcd_init+0x2b8>)
 80010d6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010d8:	f7ff fd98 	bl	8000c0c <LCD_RD_DATA>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	4b97      	ldr	r3, [pc, #604]	; (8001340 <lcd_init+0x2b8>)
 80010e2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80010e4:	4b96      	ldr	r3, [pc, #600]	; (8001340 <lcd_init+0x2b8>)
 80010e6:	889b      	ldrh	r3, [r3, #4]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	4b94      	ldr	r3, [pc, #592]	; (8001340 <lcd_init+0x2b8>)
 80010ee:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80010f0:	f7ff fd8c 	bl	8000c0c <LCD_RD_DATA>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b91      	ldr	r3, [pc, #580]	; (8001340 <lcd_init+0x2b8>)
 80010fa:	889b      	ldrh	r3, [r3, #4]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4b8f      	ldr	r3, [pc, #572]	; (8001340 <lcd_init+0x2b8>)
 8001102:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001104:	20cf      	movs	r0, #207	; 0xcf
 8001106:	f7ff fd61 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff fd6e 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001110:	20c1      	movs	r0, #193	; 0xc1
 8001112:	f7ff fd6b 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001116:	2030      	movs	r0, #48	; 0x30
 8001118:	f7ff fd68 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800111c:	20ed      	movs	r0, #237	; 0xed
 800111e:	f7ff fd55 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001122:	2064      	movs	r0, #100	; 0x64
 8001124:	f7ff fd62 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001128:	2003      	movs	r0, #3
 800112a:	f7ff fd5f 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800112e:	2012      	movs	r0, #18
 8001130:	f7ff fd5c 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001134:	2081      	movs	r0, #129	; 0x81
 8001136:	f7ff fd59 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800113a:	20e8      	movs	r0, #232	; 0xe8
 800113c:	f7ff fd46 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001140:	2085      	movs	r0, #133	; 0x85
 8001142:	f7ff fd53 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001146:	2010      	movs	r0, #16
 8001148:	f7ff fd50 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 800114c:	207a      	movs	r0, #122	; 0x7a
 800114e:	f7ff fd4d 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001152:	20cb      	movs	r0, #203	; 0xcb
 8001154:	f7ff fd3a 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001158:	2039      	movs	r0, #57	; 0x39
 800115a:	f7ff fd47 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800115e:	202c      	movs	r0, #44	; 0x2c
 8001160:	f7ff fd44 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff fd41 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800116a:	2034      	movs	r0, #52	; 0x34
 800116c:	f7ff fd3e 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001170:	2002      	movs	r0, #2
 8001172:	f7ff fd3b 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001176:	20f7      	movs	r0, #247	; 0xf7
 8001178:	f7ff fd28 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800117c:	2020      	movs	r0, #32
 800117e:	f7ff fd35 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001182:	20ea      	movs	r0, #234	; 0xea
 8001184:	f7ff fd22 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fd2f 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800118e:	2000      	movs	r0, #0
 8001190:	f7ff fd2c 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001194:	20c0      	movs	r0, #192	; 0xc0
 8001196:	f7ff fd19 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800119a:	201b      	movs	r0, #27
 800119c:	f7ff fd26 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80011a0:	20c1      	movs	r0, #193	; 0xc1
 80011a2:	f7ff fd13 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff fd20 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80011ac:	20c5      	movs	r0, #197	; 0xc5
 80011ae:	f7ff fd0d 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80011b2:	2030      	movs	r0, #48	; 0x30
 80011b4:	f7ff fd1a 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80011b8:	2030      	movs	r0, #48	; 0x30
 80011ba:	f7ff fd17 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80011be:	20c7      	movs	r0, #199	; 0xc7
 80011c0:	f7ff fd04 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80011c4:	20b7      	movs	r0, #183	; 0xb7
 80011c6:	f7ff fd11 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80011ca:	2036      	movs	r0, #54	; 0x36
 80011cc:	f7ff fcfe 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80011d0:	2008      	movs	r0, #8
 80011d2:	f7ff fd0b 	bl	8000bec <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80011d6:	203a      	movs	r0, #58	; 0x3a
 80011d8:	f7ff fcf8 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80011dc:	2055      	movs	r0, #85	; 0x55
 80011de:	f7ff fd05 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80011e2:	20b1      	movs	r0, #177	; 0xb1
 80011e4:	f7ff fcf2 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fcff 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80011ee:	201a      	movs	r0, #26
 80011f0:	f7ff fcfc 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80011f4:	20b6      	movs	r0, #182	; 0xb6
 80011f6:	f7ff fce9 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80011fa:	200a      	movs	r0, #10
 80011fc:	f7ff fcf6 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001200:	20a2      	movs	r0, #162	; 0xa2
 8001202:	f7ff fcf3 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001206:	20f2      	movs	r0, #242	; 0xf2
 8001208:	f7ff fce0 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fced 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001212:	2026      	movs	r0, #38	; 0x26
 8001214:	f7ff fcda 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff fce7 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800121e:	20e0      	movs	r0, #224	; 0xe0
 8001220:	f7ff fcd4 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001224:	200f      	movs	r0, #15
 8001226:	f7ff fce1 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800122a:	202a      	movs	r0, #42	; 0x2a
 800122c:	f7ff fcde 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001230:	2028      	movs	r0, #40	; 0x28
 8001232:	f7ff fcdb 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001236:	2008      	movs	r0, #8
 8001238:	f7ff fcd8 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800123c:	200e      	movs	r0, #14
 800123e:	f7ff fcd5 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001242:	2008      	movs	r0, #8
 8001244:	f7ff fcd2 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001248:	2054      	movs	r0, #84	; 0x54
 800124a:	f7ff fccf 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800124e:	20a9      	movs	r0, #169	; 0xa9
 8001250:	f7ff fccc 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001254:	2043      	movs	r0, #67	; 0x43
 8001256:	f7ff fcc9 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800125a:	200a      	movs	r0, #10
 800125c:	f7ff fcc6 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001260:	200f      	movs	r0, #15
 8001262:	f7ff fcc3 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fcc0 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff fcbd 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff fcba 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001278:	2000      	movs	r0, #0
 800127a:	f7ff fcb7 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800127e:	20e1      	movs	r0, #225	; 0xe1
 8001280:	f7ff fca4 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff fcb1 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800128a:	2015      	movs	r0, #21
 800128c:	f7ff fcae 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001290:	2017      	movs	r0, #23
 8001292:	f7ff fcab 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001296:	2007      	movs	r0, #7
 8001298:	f7ff fca8 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800129c:	2011      	movs	r0, #17
 800129e:	f7ff fca5 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80012a2:	2006      	movs	r0, #6
 80012a4:	f7ff fca2 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80012a8:	202b      	movs	r0, #43	; 0x2b
 80012aa:	f7ff fc9f 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80012ae:	2056      	movs	r0, #86	; 0x56
 80012b0:	f7ff fc9c 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80012b4:	203c      	movs	r0, #60	; 0x3c
 80012b6:	f7ff fc99 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80012ba:	2005      	movs	r0, #5
 80012bc:	f7ff fc96 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012c0:	2010      	movs	r0, #16
 80012c2:	f7ff fc93 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012c6:	200f      	movs	r0, #15
 80012c8:	f7ff fc90 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012cc:	203f      	movs	r0, #63	; 0x3f
 80012ce:	f7ff fc8d 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012d2:	203f      	movs	r0, #63	; 0x3f
 80012d4:	f7ff fc8a 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012d8:	200f      	movs	r0, #15
 80012da:	f7ff fc87 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80012de:	202b      	movs	r0, #43	; 0x2b
 80012e0:	f7ff fc74 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fc81 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff fc7e 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff fc7b 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80012f6:	203f      	movs	r0, #63	; 0x3f
 80012f8:	f7ff fc78 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80012fc:	202a      	movs	r0, #42	; 0x2a
 80012fe:	f7ff fc65 	bl	8000bcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff fc72 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001308:	2000      	movs	r0, #0
 800130a:	f7ff fc6f 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff fc6c 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001314:	20ef      	movs	r0, #239	; 0xef
 8001316:	f7ff fc69 	bl	8000bec <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800131a:	2011      	movs	r0, #17
 800131c:	f7ff fc56 	bl	8000bcc <LCD_WR_REG>
	HAL_Delay(120);
 8001320:	2078      	movs	r0, #120	; 0x78
 8001322:	f000 fc89 	bl	8001c38 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001326:	2029      	movs	r0, #41	; 0x29
 8001328:	f7ff fc50 	bl	8000bcc <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <lcd_init+0x2bc>)
 8001334:	f000 ff52 	bl	80021dc <HAL_GPIO_WritePin>
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40020800 	.word	0x40020800
 8001340:	2000010c 	.word	0x2000010c
 8001344:	40020000 	.word	0x40020000

08001348 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800134c:	2201      	movs	r2, #1
 800134e:	2140      	movs	r1, #64	; 0x40
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <led7_init+0x14>)
 8001352:	f000 ff43 	bl	80021dc <HAL_GPIO_WritePin>
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40021800 	.word	0x40021800

08001360 <led7_Scan>:

void led7_Scan(){
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001364:	4b3f      	ldr	r3, [pc, #252]	; (8001464 <led7_Scan+0x104>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <led7_Scan+0x104>)
 800136e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001370:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <led7_Scan+0x108>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a3d      	ldr	r2, [pc, #244]	; (800146c <led7_Scan+0x10c>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b39      	ldr	r3, [pc, #228]	; (8001464 <led7_Scan+0x104>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21b      	sxth	r3, r3
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <led7_Scan+0x104>)
 800138a:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800138c:	4b36      	ldr	r3, [pc, #216]	; (8001468 <led7_Scan+0x108>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b03      	cmp	r3, #3
 8001392:	d847      	bhi.n	8001424 <led7_Scan+0xc4>
 8001394:	a201      	add	r2, pc, #4	; (adr r2, 800139c <led7_Scan+0x3c>)
 8001396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139a:	bf00      	nop
 800139c:	080013ad 	.word	0x080013ad
 80013a0:	080013cb 	.word	0x080013cb
 80013a4:	080013e9 	.word	0x080013e9
 80013a8:	08001407 	.word	0x08001407
	case 0:
		spi_buffer |= 0x00b0;
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <led7_Scan+0x104>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <led7_Scan+0x104>)
 80013b8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <led7_Scan+0x104>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b27      	ldr	r3, [pc, #156]	; (8001464 <led7_Scan+0x104>)
 80013c6:	801a      	strh	r2, [r3, #0]
		break;
 80013c8:	e02d      	b.n	8001426 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <led7_Scan+0x104>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <led7_Scan+0x104>)
 80013d6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <led7_Scan+0x104>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	f023 0320 	bic.w	r3, r3, #32
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <led7_Scan+0x104>)
 80013e4:	801a      	strh	r2, [r3, #0]
		break;
 80013e6:	e01e      	b.n	8001426 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <led7_Scan+0x104>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <led7_Scan+0x104>)
 80013f4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <led7_Scan+0x104>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	f023 0310 	bic.w	r3, r3, #16
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <led7_Scan+0x104>)
 8001402:	801a      	strh	r2, [r3, #0]
		break;
 8001404:	e00f      	b.n	8001426 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <led7_Scan+0x104>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <led7_Scan+0x104>)
 8001412:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <led7_Scan+0x104>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800141c:	b29a      	uxth	r2, r3
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <led7_Scan+0x104>)
 8001420:	801a      	strh	r2, [r3, #0]
		break;
 8001422:	e000      	b.n	8001426 <led7_Scan+0xc6>
	default:
		break;
 8001424:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <led7_Scan+0x108>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	425a      	negs	r2, r3
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	f002 0203 	and.w	r2, r2, #3
 8001436:	bf58      	it	pl
 8001438:	4253      	negpl	r3, r2
 800143a:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <led7_Scan+0x108>)
 800143c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2140      	movs	r1, #64	; 0x40
 8001442:	480b      	ldr	r0, [pc, #44]	; (8001470 <led7_Scan+0x110>)
 8001444:	f000 feca 	bl	80021dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001448:	2301      	movs	r3, #1
 800144a:	2202      	movs	r2, #2
 800144c:	4905      	ldr	r1, [pc, #20]	; (8001464 <led7_Scan+0x104>)
 800144e:	4809      	ldr	r0, [pc, #36]	; (8001474 <led7_Scan+0x114>)
 8001450:	f002 fcd9 	bl	8003e06 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001454:	2201      	movs	r2, #1
 8001456:	2140      	movs	r1, #64	; 0x40
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <led7_Scan+0x110>)
 800145a:	f000 febf 	bl	80021dc <HAL_GPIO_WritePin>
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000004 	.word	0x20000004
 8001468:	20000114 	.word	0x20000114
 800146c:	20000000 	.word	0x20000000
 8001470:	40021800 	.word	0x40021800
 8001474:	20000120 	.word	0x20000120

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147c:	f000 fb6a 	bl	8001b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001480:	f000 f822 	bl	80014c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001484:	f7ff fa34 	bl	80008f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001488:	f000 fa8a 	bl	80019a0 <MX_TIM2_Init>
  MX_SPI1_Init();
 800148c:	f000 f99c 	bl	80017c8 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001490:	f7ff f95e 	bl	8000750 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001494:	f7ff fb24 	bl	8000ae0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001498:	f000 f880 	bl	800159c <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff fc13 	bl	8000cc8 <lcd_Clear>
 updateTime();
 80014a2:	f000 f89d 	bl	80015e0 <updateTime>
  while (1)
  {
	  while(!flag_timer2);
 80014a6:	bf00      	nop
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <main+0x4c>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0fb      	beq.n	80014a8 <main+0x30>
	  flag_timer2 = 0;
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <main+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 80014b6:	f7ff f815 	bl	80004e4 <button_Scan>
	  ds3231_ReadTime();
 80014ba:	f7ff f8e5 	bl	8000688 <ds3231_ReadTime>
	  displayTime();
 80014be:	f000 f8af 	bl	8001620 <displayTime>
	  while(!flag_timer2);
 80014c2:	e7f0      	b.n	80014a6 <main+0x2e>
 80014c4:	20000118 	.word	0x20000118

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b094      	sub	sp, #80	; 0x50
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	2230      	movs	r2, #48	; 0x30
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 ff6e 	bl	80053b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <SystemClock_Config+0xcc>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	4a27      	ldr	r2, [pc, #156]	; (8001594 <SystemClock_Config+0xcc>)
 80014f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fa:	6413      	str	r3, [r2, #64]	; 0x40
 80014fc:	4b25      	ldr	r3, [pc, #148]	; (8001594 <SystemClock_Config+0xcc>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <SystemClock_Config+0xd0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a21      	ldr	r2, [pc, #132]	; (8001598 <SystemClock_Config+0xd0>)
 8001512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <SystemClock_Config+0xd0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001524:	2302      	movs	r3, #2
 8001526:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001528:	2301      	movs	r3, #1
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800152c:	2310      	movs	r3, #16
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001530:	2302      	movs	r3, #2
 8001532:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001534:	2300      	movs	r3, #0
 8001536:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001538:	2308      	movs	r3, #8
 800153a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800153c:	23a8      	movs	r3, #168	; 0xa8
 800153e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001540:	2302      	movs	r3, #2
 8001542:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001544:	2304      	movs	r3, #4
 8001546:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001548:	f107 0320 	add.w	r3, r7, #32
 800154c:	4618      	mov	r0, r3
 800154e:	f001 ff4d 	bl	80033ec <HAL_RCC_OscConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001558:	f000 f8e0 	bl	800171c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155c:	230f      	movs	r3, #15
 800155e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001560:	2302      	movs	r3, #2
 8001562:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001568:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800156c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800156e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001572:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	2105      	movs	r1, #5
 800157a:	4618      	mov	r0, r3
 800157c:	f002 f9ae 	bl	80038dc <HAL_RCC_ClockConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001586:	f000 f8c9 	bl	800171c <Error_Handler>
  }
}
 800158a:	bf00      	nop
 800158c:	3750      	adds	r7, #80	; 0x50
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000

0800159c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2120      	movs	r1, #32
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <system_init+0x40>)
 80015a6:	f000 fe19 	bl	80021dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2140      	movs	r1, #64	; 0x40
 80015ae:	480b      	ldr	r0, [pc, #44]	; (80015dc <system_init+0x40>)
 80015b0:	f000 fe14 	bl	80021dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2110      	movs	r1, #16
 80015b8:	4808      	ldr	r0, [pc, #32]	; (80015dc <system_init+0x40>)
 80015ba:	f000 fe0f 	bl	80021dc <HAL_GPIO_WritePin>
	  timer_init();
 80015be:	f000 f8b3 	bl	8001728 <timer_init>
	  led7_init();
 80015c2:	f7ff fec1 	bl	8001348 <led7_init>
	  button_init();
 80015c6:	f7fe ff81 	bl	80004cc <button_init>
	  lcd_init();
 80015ca:	f7ff fd5d 	bl	8001088 <lcd_init>
	  ds3231_init();
 80015ce:	f7fe fff5 	bl	80005bc <ds3231_init>
	  setTimer2(50);
 80015d2:	2032      	movs	r0, #50	; 0x32
 80015d4:	f000 f8b2 	bl	800173c <setTimer2>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40021000 	.word	0x40021000

080015e0 <updateTime>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void updateTime(){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 80015e4:	2117      	movs	r1, #23
 80015e6:	2006      	movs	r0, #6
 80015e8:	f7ff f82c 	bl	8000644 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 10);
 80015ec:	210a      	movs	r1, #10
 80015ee:	2005      	movs	r0, #5
 80015f0:	f7ff f828 	bl	8000644 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 20);
 80015f4:	2114      	movs	r1, #20
 80015f6:	2004      	movs	r0, #4
 80015f8:	f7ff f824 	bl	8000644 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 80015fc:	2106      	movs	r1, #6
 80015fe:	2003      	movs	r0, #3
 8001600:	f7ff f820 	bl	8000644 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 20);
 8001604:	2114      	movs	r1, #20
 8001606:	2002      	movs	r0, #2
 8001608:	f7ff f81c 	bl	8000644 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 11);
 800160c:	210b      	movs	r1, #11
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff f818 	bl	8000644 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 23);
 8001614:	2117      	movs	r1, #23
 8001616:	2000      	movs	r0, #0
 8001618:	f7ff f814 	bl	8000644 <ds3231_Write>
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <displayTime>:
    if (button_count[7] == 1)
        return 1;
    else
        return 0;
}
void displayTime(){
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001626:	4b36      	ldr	r3, [pc, #216]	; (8001700 <displayTime+0xe0>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	b29a      	uxth	r2, r3
 800162c:	2318      	movs	r3, #24
 800162e:	9302      	str	r3, [sp, #8]
 8001630:	2300      	movs	r3, #0
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2302      	movs	r3, #2
 800163c:	2164      	movs	r1, #100	; 0x64
 800163e:	2046      	movs	r0, #70	; 0x46
 8001640:	f7ff fc80 	bl	8000f44 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001644:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <displayTime+0xe4>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b29a      	uxth	r2, r3
 800164a:	2318      	movs	r3, #24
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	2300      	movs	r3, #0
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2302      	movs	r3, #2
 800165a:	2164      	movs	r1, #100	; 0x64
 800165c:	206e      	movs	r0, #110	; 0x6e
 800165e:	f7ff fc71 	bl	8000f44 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001662:	4b29      	ldr	r3, [pc, #164]	; (8001708 <displayTime+0xe8>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b29a      	uxth	r2, r3
 8001668:	2318      	movs	r3, #24
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	2300      	movs	r3, #0
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2302      	movs	r3, #2
 8001678:	2164      	movs	r1, #100	; 0x64
 800167a:	2096      	movs	r0, #150	; 0x96
 800167c:	f7ff fc62 	bl	8000f44 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <displayTime+0xec>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b29a      	uxth	r2, r3
 8001686:	2318      	movs	r3, #24
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	2300      	movs	r3, #0
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2302      	movs	r3, #2
 8001696:	2182      	movs	r1, #130	; 0x82
 8001698:	2014      	movs	r0, #20
 800169a:	f7ff fc53 	bl	8000f44 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <displayTime+0xf0>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	2318      	movs	r3, #24
 80016a6:	9302      	str	r3, [sp, #8]
 80016a8:	2300      	movs	r3, #0
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2302      	movs	r3, #2
 80016b4:	2182      	movs	r1, #130	; 0x82
 80016b6:	2046      	movs	r0, #70	; 0x46
 80016b8:	f7ff fc44 	bl	8000f44 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <displayTime+0xf4>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	2318      	movs	r3, #24
 80016c4:	9302      	str	r3, [sp, #8]
 80016c6:	2300      	movs	r3, #0
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2302      	movs	r3, #2
 80016d2:	2182      	movs	r1, #130	; 0x82
 80016d4:	206e      	movs	r0, #110	; 0x6e
 80016d6:	f7ff fc35 	bl	8000f44 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <displayTime+0xf8>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	2318      	movs	r3, #24
 80016e2:	9302      	str	r3, [sp, #8]
 80016e4:	2300      	movs	r3, #0
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2302      	movs	r3, #2
 80016f0:	2182      	movs	r1, #130	; 0x82
 80016f2:	2096      	movs	r0, #150	; 0x96
 80016f4:	f7ff fc26 	bl	8000f44 <lcd_ShowIntNum>
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000005b 	.word	0x2000005b
 8001704:	2000005c 	.word	0x2000005c
 8001708:	2000005d 	.word	0x2000005d
 800170c:	2000005f 	.word	0x2000005f
 8001710:	2000005e 	.word	0x2000005e
 8001714:	20000060 	.word	0x20000060
 8001718:	20000061 	.word	0x20000061

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	e7fe      	b.n	8001724 <Error_Handler+0x8>
	...

08001728 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <timer_init+0x10>)
 800172e:	f003 f91d 	bl	800496c <HAL_TIM_Base_Start_IT>
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000178 	.word	0x20000178

0800173c <setTimer2>:

void setTimer2(uint16_t duration){
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <setTimer2+0x2c>)
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <setTimer2+0x2c>)
 800174e:	881a      	ldrh	r2, [r3, #0]
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <setTimer2+0x30>)
 8001752:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <setTimer2+0x34>)
 8001756:	2200      	movs	r2, #0
 8001758:	801a      	strh	r2, [r3, #0]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	2000011c 	.word	0x2000011c
 800176c:	2000011a 	.word	0x2000011a
 8001770:	20000118 	.word	0x20000118

08001774 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001784:	d116      	bne.n	80017b4 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d010      	beq.n	80017b0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001798:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d106      	bne.n	80017b0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017aa:	881a      	ldrh	r2, [r3, #0]
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017ae:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80017b0:	f7ff fdd6 	bl	8001360 <led7_Scan>
	}
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2000011a 	.word	0x2000011a
 80017c0:	20000118 	.word	0x20000118
 80017c4:	2000011c 	.word	0x2000011c

080017c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <MX_SPI1_Init+0x64>)
 80017ce:	4a18      	ldr	r2, [pc, #96]	; (8001830 <MX_SPI1_Init+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_SPI1_Init+0x64>)
 80017d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_SPI1_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <MX_SPI1_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_SPI1_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_SPI1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_SPI1_Init+0x64>)
 80017f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_SPI1_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <MX_SPI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_SPI1_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <MX_SPI1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_SPI1_Init+0x64>)
 8001814:	220a      	movs	r2, #10
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <MX_SPI1_Init+0x64>)
 800181a:	f002 fa6b 	bl	8003cf4 <HAL_SPI_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001824:	f7ff ff7a 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000120 	.word	0x20000120
 8001830:	40013000 	.word	0x40013000

08001834 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <HAL_SPI_MspInit+0x84>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d12b      	bne.n	80018ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_SPI_MspInit+0x88>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a17      	ldr	r2, [pc, #92]	; (80018bc <HAL_SPI_MspInit+0x88>)
 8001860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_SPI_MspInit+0x88>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_SPI_MspInit+0x88>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a10      	ldr	r2, [pc, #64]	; (80018bc <HAL_SPI_MspInit+0x88>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_SPI_MspInit+0x88>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800188e:	2338      	movs	r3, #56	; 0x38
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800189e:	2305      	movs	r3, #5
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <HAL_SPI_MspInit+0x8c>)
 80018aa:	f000 fafb 	bl	8001ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40013000 	.word	0x40013000
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020400 	.word	0x40020400

080018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_MspInit+0x4c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_MspInit+0x4c>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a08      	ldr	r2, [pc, #32]	; (8001910 <HAL_MspInit+0x4c>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <NMI_Handler+0x4>

0800191a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <HardFault_Handler+0x4>

08001920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <MemManage_Handler+0x4>

08001926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <BusFault_Handler+0x4>

0800192c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <UsageFault_Handler+0x4>

08001932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001960:	f000 f94a 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <TIM2_IRQHandler+0x10>)
 800196e:	f003 f86d 	bl	8004a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000178 	.word	0x20000178

0800197c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b4:	463b      	mov	r3, r7
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <MX_TIM2_Init+0x94>)
 80019be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <MX_TIM2_Init+0x94>)
 80019c6:	f240 3247 	movw	r2, #839	; 0x347
 80019ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <MX_TIM2_Init+0x94>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <MX_TIM2_Init+0x94>)
 80019d4:	2263      	movs	r2, #99	; 0x63
 80019d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <MX_TIM2_Init+0x94>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_TIM2_Init+0x94>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019e4:	4813      	ldr	r0, [pc, #76]	; (8001a34 <MX_TIM2_Init+0x94>)
 80019e6:	f002 ff71 	bl	80048cc <HAL_TIM_Base_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019f0:	f7ff fe94 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019fa:	f107 0308 	add.w	r3, r7, #8
 80019fe:	4619      	mov	r1, r3
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <MX_TIM2_Init+0x94>)
 8001a02:	f003 f92b 	bl	8004c5c <HAL_TIM_ConfigClockSource>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a0c:	f7ff fe86 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a18:	463b      	mov	r3, r7
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_TIM2_Init+0x94>)
 8001a1e:	f003 fb47 	bl	80050b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a28:	f7ff fe78 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000178 	.word	0x20000178

08001a38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a48:	d115      	bne.n	8001a76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <HAL_TIM_Base_MspInit+0x48>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <HAL_TIM_Base_MspInit+0x48>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_TIM_Base_MspInit+0x48>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	201c      	movs	r0, #28
 8001a6c:	f000 f9e3 	bl	8001e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a70:	201c      	movs	r0, #28
 8001a72:	f000 f9fc 	bl	8001e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800

08001a84 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b2db      	uxtb	r3, r3
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <DEC2BCD+0x44>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	08db      	lsrs	r3, r3, #3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	b258      	sxtb	r0, r3
 8001ad2:	79fa      	ldrb	r2, [r7, #7]
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <DEC2BCD+0x44>)
 8001ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8001ada:	08d9      	lsrs	r1, r3, #3
 8001adc:	460b      	mov	r3, r1
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	4303      	orrs	r3, r0
 8001aec:	b25b      	sxtb	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	cccccccd 	.word	0xcccccccd

08001b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b06:	490e      	ldr	r1, [pc, #56]	; (8001b40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b08:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b1c:	4c0b      	ldr	r4, [pc, #44]	; (8001b4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b2a:	f7ff ff27 	bl	800197c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f003 fc1f 	bl	8005370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b32:	f7ff fca1 	bl	8001478 <main>
  bx  lr    
 8001b36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001b44:	08008388 	.word	0x08008388
  ldr r2, =_sbss
 8001b48:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001b4c:	200001c4 	.word	0x200001c4

08001b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC_IRQHandler>
	...

08001b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <HAL_Init+0x40>)
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_Init+0x40>)
 8001b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_Init+0x40>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f000 f94f 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b82:	200f      	movs	r0, #15
 8001b84:	f000 f808 	bl	8001b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b88:	f7ff fe9c 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x54>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x58>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f967 	bl	8001e8a <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00e      	b.n	8001be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b0f      	cmp	r3, #15
 8001bca:	d80a      	bhi.n	8001be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f000 f92f 	bl	8001e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <HAL_InitTick+0x5c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	20000010 	.word	0x20000010
 8001bf4:	2000000c 	.word	0x2000000c

08001bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x20>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x24>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <HAL_IncTick+0x24>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000010 	.word	0x20000010
 8001c1c:	200001c0 	.word	0x200001c0

08001c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <HAL_GetTick+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	200001c0 	.word	0x200001c0

08001c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff ffee 	bl	8001c20 <HAL_GetTick>
 8001c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c50:	d005      	beq.n	8001c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_Delay+0x44>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c5e:	bf00      	nop
 8001c60:	f7ff ffde 	bl	8001c20 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d8f7      	bhi.n	8001c60 <HAL_Delay+0x28>
  {
  }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000010 	.word	0x20000010

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb2:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60d3      	str	r3, [r2, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db0b      	blt.n	8001d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	4907      	ldr	r1, [pc, #28]	; (8001d1c <__NVIC_EnableIRQ+0x38>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2001      	movs	r0, #1
 8001d06:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000e100 	.word	0xe000e100

08001d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db0a      	blt.n	8001d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	490c      	ldr	r1, [pc, #48]	; (8001d6c <__NVIC_SetPriority+0x4c>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	0112      	lsls	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	440b      	add	r3, r1
 8001d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d48:	e00a      	b.n	8001d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4908      	ldr	r1, [pc, #32]	; (8001d70 <__NVIC_SetPriority+0x50>)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	3b04      	subs	r3, #4
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	761a      	strb	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f1c3 0307 	rsb	r3, r3, #7
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	bf28      	it	cs
 8001d92:	2304      	movcs	r3, #4
 8001d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d902      	bls.n	8001da4 <NVIC_EncodePriority+0x30>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3b03      	subs	r3, #3
 8001da2:	e000      	b.n	8001da6 <NVIC_EncodePriority+0x32>
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	4313      	orrs	r3, r2
         );
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dec:	d301      	bcc.n	8001df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00f      	b.n	8001e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <SysTick_Config+0x40>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfa:	210f      	movs	r1, #15
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f7ff ff8e 	bl	8001d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <SysTick_Config+0x40>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <SysTick_Config+0x40>)
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	e000e010 	.word	0xe000e010

08001e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff29 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e48:	f7ff ff3e 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	6978      	ldr	r0, [r7, #20]
 8001e54:	f7ff ff8e 	bl	8001d74 <NVIC_EncodePriority>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff5d 	bl	8001d20 <__NVIC_SetPriority>
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff31 	bl	8001ce4 <__NVIC_EnableIRQ>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ffa2 	bl	8001ddc <SysTick_Config>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	e16b      	b.n	8002198 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	f040 815a 	bne.w	8002192 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d005      	beq.n	8001ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d130      	bne.n	8001f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	2203      	movs	r2, #3
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 0201 	and.w	r2, r3, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d017      	beq.n	8001f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d123      	bne.n	8001fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	08da      	lsrs	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3208      	adds	r2, #8
 8001fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	08da      	lsrs	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3208      	adds	r2, #8
 8001fe2:	69b9      	ldr	r1, [r7, #24]
 8001fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0203 	and.w	r2, r3, #3
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80b4 	beq.w	8002192 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b60      	ldr	r3, [pc, #384]	; (80021b0 <HAL_GPIO_Init+0x30c>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a5f      	ldr	r2, [pc, #380]	; (80021b0 <HAL_GPIO_Init+0x30c>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b5d      	ldr	r3, [pc, #372]	; (80021b0 <HAL_GPIO_Init+0x30c>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002046:	4a5b      	ldr	r2, [pc, #364]	; (80021b4 <HAL_GPIO_Init+0x310>)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_GPIO_Init+0x314>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d02b      	beq.n	80020ca <HAL_GPIO_Init+0x226>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a51      	ldr	r2, [pc, #324]	; (80021bc <HAL_GPIO_Init+0x318>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d025      	beq.n	80020c6 <HAL_GPIO_Init+0x222>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a50      	ldr	r2, [pc, #320]	; (80021c0 <HAL_GPIO_Init+0x31c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d01f      	beq.n	80020c2 <HAL_GPIO_Init+0x21e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4f      	ldr	r2, [pc, #316]	; (80021c4 <HAL_GPIO_Init+0x320>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d019      	beq.n	80020be <HAL_GPIO_Init+0x21a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4e      	ldr	r2, [pc, #312]	; (80021c8 <HAL_GPIO_Init+0x324>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_GPIO_Init+0x216>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4d      	ldr	r2, [pc, #308]	; (80021cc <HAL_GPIO_Init+0x328>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00d      	beq.n	80020b6 <HAL_GPIO_Init+0x212>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4c      	ldr	r2, [pc, #304]	; (80021d0 <HAL_GPIO_Init+0x32c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <HAL_GPIO_Init+0x20e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4b      	ldr	r2, [pc, #300]	; (80021d4 <HAL_GPIO_Init+0x330>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d101      	bne.n	80020ae <HAL_GPIO_Init+0x20a>
 80020aa:	2307      	movs	r3, #7
 80020ac:	e00e      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020ae:	2308      	movs	r3, #8
 80020b0:	e00c      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020b2:	2306      	movs	r3, #6
 80020b4:	e00a      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020b6:	2305      	movs	r3, #5
 80020b8:	e008      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020ba:	2304      	movs	r3, #4
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020be:	2303      	movs	r3, #3
 80020c0:	e004      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e002      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020ca:	2300      	movs	r3, #0
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	f002 0203 	and.w	r2, r2, #3
 80020d2:	0092      	lsls	r2, r2, #2
 80020d4:	4093      	lsls	r3, r2
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020dc:	4935      	ldr	r1, [pc, #212]	; (80021b4 <HAL_GPIO_Init+0x310>)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <HAL_GPIO_Init+0x334>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800210e:	4a32      	ldr	r2, [pc, #200]	; (80021d8 <HAL_GPIO_Init+0x334>)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002114:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <HAL_GPIO_Init+0x334>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002138:	4a27      	ldr	r2, [pc, #156]	; (80021d8 <HAL_GPIO_Init+0x334>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800213e:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <HAL_GPIO_Init+0x334>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002162:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <HAL_GPIO_Init+0x334>)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_GPIO_Init+0x334>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800218c:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <HAL_GPIO_Init+0x334>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3301      	adds	r3, #1
 8002196:	61fb      	str	r3, [r7, #28]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	2b0f      	cmp	r3, #15
 800219c:	f67f ae90 	bls.w	8001ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3724      	adds	r7, #36	; 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40013800 	.word	0x40013800
 80021b8:	40020000 	.word	0x40020000
 80021bc:	40020400 	.word	0x40020400
 80021c0:	40020800 	.word	0x40020800
 80021c4:	40020c00 	.word	0x40020c00
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40021400 	.word	0x40021400
 80021d0:	40021800 	.word	0x40021800
 80021d4:	40021c00 	.word	0x40021c00
 80021d8:	40013c00 	.word	0x40013c00

080021dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	807b      	strh	r3, [r7, #2]
 80021e8:	4613      	mov	r3, r2
 80021ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ec:	787b      	ldrb	r3, [r7, #1]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f8:	e003      	b.n	8002202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021fa:	887b      	ldrh	r3, [r7, #2]
 80021fc:	041a      	lsls	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	619a      	str	r2, [r3, #24]
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e12b      	b.n	800247a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fc80 	bl	8000b3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2224      	movs	r2, #36	; 0x24
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002262:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002272:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002274:	f001 fd2a 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 8002278:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4a81      	ldr	r2, [pc, #516]	; (8002484 <HAL_I2C_Init+0x274>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d807      	bhi.n	8002294 <HAL_I2C_Init+0x84>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4a80      	ldr	r2, [pc, #512]	; (8002488 <HAL_I2C_Init+0x278>)
 8002288:	4293      	cmp	r3, r2
 800228a:	bf94      	ite	ls
 800228c:	2301      	movls	r3, #1
 800228e:	2300      	movhi	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	e006      	b.n	80022a2 <HAL_I2C_Init+0x92>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4a7d      	ldr	r2, [pc, #500]	; (800248c <HAL_I2C_Init+0x27c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	bf94      	ite	ls
 800229c:	2301      	movls	r3, #1
 800229e:	2300      	movhi	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0e7      	b.n	800247a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4a78      	ldr	r2, [pc, #480]	; (8002490 <HAL_I2C_Init+0x280>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	0c9b      	lsrs	r3, r3, #18
 80022b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4a6a      	ldr	r2, [pc, #424]	; (8002484 <HAL_I2C_Init+0x274>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d802      	bhi.n	80022e4 <HAL_I2C_Init+0xd4>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3301      	adds	r3, #1
 80022e2:	e009      	b.n	80022f8 <HAL_I2C_Init+0xe8>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	4a69      	ldr	r2, [pc, #420]	; (8002494 <HAL_I2C_Init+0x284>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	099b      	lsrs	r3, r3, #6
 80022f6:	3301      	adds	r3, #1
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	430b      	orrs	r3, r1
 80022fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800230a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	495c      	ldr	r1, [pc, #368]	; (8002484 <HAL_I2C_Init+0x274>)
 8002314:	428b      	cmp	r3, r1
 8002316:	d819      	bhi.n	800234c <HAL_I2C_Init+0x13c>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1e59      	subs	r1, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fbb1 f3f3 	udiv	r3, r1, r3
 8002326:	1c59      	adds	r1, r3, #1
 8002328:	f640 73fc 	movw	r3, #4092	; 0xffc
 800232c:	400b      	ands	r3, r1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_I2C_Init+0x138>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1e59      	subs	r1, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002340:	3301      	adds	r3, #1
 8002342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002346:	e051      	b.n	80023ec <HAL_I2C_Init+0x1dc>
 8002348:	2304      	movs	r3, #4
 800234a:	e04f      	b.n	80023ec <HAL_I2C_Init+0x1dc>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d111      	bne.n	8002378 <HAL_I2C_Init+0x168>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1e58      	subs	r0, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	440b      	add	r3, r1
 8002362:	fbb0 f3f3 	udiv	r3, r0, r3
 8002366:	3301      	adds	r3, #1
 8002368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	e012      	b.n	800239e <HAL_I2C_Init+0x18e>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e58      	subs	r0, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	0099      	lsls	r1, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	fbb0 f3f3 	udiv	r3, r0, r3
 800238e:	3301      	adds	r3, #1
 8002390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002394:	2b00      	cmp	r3, #0
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_Init+0x196>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e022      	b.n	80023ec <HAL_I2C_Init+0x1dc>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10e      	bne.n	80023cc <HAL_I2C_Init+0x1bc>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1e58      	subs	r0, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6859      	ldr	r1, [r3, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	440b      	add	r3, r1
 80023bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c0:	3301      	adds	r3, #1
 80023c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ca:	e00f      	b.n	80023ec <HAL_I2C_Init+0x1dc>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1e58      	subs	r0, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	0099      	lsls	r1, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	6809      	ldr	r1, [r1, #0]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69da      	ldr	r2, [r3, #28]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800241a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6911      	ldr	r1, [r2, #16]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68d2      	ldr	r2, [r2, #12]
 8002426:	4311      	orrs	r1, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	430b      	orrs	r3, r1
 800242e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	000186a0 	.word	0x000186a0
 8002488:	001e847f 	.word	0x001e847f
 800248c:	003d08ff 	.word	0x003d08ff
 8002490:	431bde83 	.word	0x431bde83
 8002494:	10624dd3 	.word	0x10624dd3

08002498 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	4608      	mov	r0, r1
 80024a2:	4611      	mov	r1, r2
 80024a4:	461a      	mov	r2, r3
 80024a6:	4603      	mov	r3, r0
 80024a8:	817b      	strh	r3, [r7, #10]
 80024aa:	460b      	mov	r3, r1
 80024ac:	813b      	strh	r3, [r7, #8]
 80024ae:	4613      	mov	r3, r2
 80024b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024b2:	f7ff fbb5 	bl	8001c20 <HAL_GetTick>
 80024b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	f040 80d9 	bne.w	8002678 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	2319      	movs	r3, #25
 80024cc:	2201      	movs	r2, #1
 80024ce:	496d      	ldr	r1, [pc, #436]	; (8002684 <HAL_I2C_Mem_Write+0x1ec>)
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fdad 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
 80024de:	e0cc      	b.n	800267a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_I2C_Mem_Write+0x56>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e0c5      	b.n	800267a <HAL_I2C_Mem_Write+0x1e2>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	d007      	beq.n	8002514 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002522:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2221      	movs	r2, #33	; 0x21
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2240      	movs	r2, #64	; 0x40
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a3a      	ldr	r2, [r7, #32]
 800253e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002544:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a4d      	ldr	r2, [pc, #308]	; (8002688 <HAL_I2C_Mem_Write+0x1f0>)
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002556:	88f8      	ldrh	r0, [r7, #6]
 8002558:	893a      	ldrh	r2, [r7, #8]
 800255a:	8979      	ldrh	r1, [r7, #10]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	4603      	mov	r3, r0
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fbe4 	bl	8002d34 <I2C_RequestMemoryWrite>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d052      	beq.n	8002618 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e081      	b.n	800267a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fe2e 	bl	80031dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00d      	beq.n	80025a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	2b04      	cmp	r3, #4
 800258c:	d107      	bne.n	800259e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e06b      	b.n	800267a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d11b      	bne.n	8002618 <HAL_I2C_Mem_Write+0x180>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d017      	beq.n	8002618 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260e:	b29b      	uxth	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1aa      	bne.n	8002576 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fe1a 	bl	800325e <I2C_WaitOnBTFFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00d      	beq.n	800264c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	2b04      	cmp	r3, #4
 8002636:	d107      	bne.n	8002648 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002646:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e016      	b.n	800267a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	e000      	b.n	800267a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
  }
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	00100002 	.word	0x00100002
 8002688:	ffff0000 	.word	0xffff0000

0800268c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	; 0x30
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	4608      	mov	r0, r1
 8002696:	4611      	mov	r1, r2
 8002698:	461a      	mov	r2, r3
 800269a:	4603      	mov	r3, r0
 800269c:	817b      	strh	r3, [r7, #10]
 800269e:	460b      	mov	r3, r1
 80026a0:	813b      	strh	r3, [r7, #8]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026a6:	f7ff fabb 	bl	8001c20 <HAL_GetTick>
 80026aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	f040 8208 	bne.w	8002aca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2319      	movs	r3, #25
 80026c0:	2201      	movs	r2, #1
 80026c2:	497b      	ldr	r1, [pc, #492]	; (80028b0 <HAL_I2C_Mem_Read+0x224>)
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fcb3 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
 80026d2:	e1fb      	b.n	8002acc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_I2C_Mem_Read+0x56>
 80026de:	2302      	movs	r3, #2
 80026e0:	e1f4      	b.n	8002acc <HAL_I2C_Mem_Read+0x440>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d007      	beq.n	8002708 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002716:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2222      	movs	r2, #34	; 0x22
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002732:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002738:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4a5b      	ldr	r2, [pc, #364]	; (80028b4 <HAL_I2C_Mem_Read+0x228>)
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800274a:	88f8      	ldrh	r0, [r7, #6]
 800274c:	893a      	ldrh	r2, [r7, #8]
 800274e:	8979      	ldrh	r1, [r7, #10]
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	4603      	mov	r3, r0
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fb80 	bl	8002e60 <I2C_RequestMemoryRead>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1b0      	b.n	8002acc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276e:	2b00      	cmp	r3, #0
 8002770:	d113      	bne.n	800279a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	623b      	str	r3, [r7, #32]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	623b      	str	r3, [r7, #32]
 8002786:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e184      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d11b      	bne.n	80027da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	e164      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d11b      	bne.n	800281a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002800:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	e144      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002830:	e138      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	2b03      	cmp	r3, #3
 8002838:	f200 80f1 	bhi.w	8002a1e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002840:	2b01      	cmp	r3, #1
 8002842:	d123      	bne.n	800288c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002846:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fd49 	bl	80032e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e139      	b.n	8002acc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	855a      	strh	r2, [r3, #42]	; 0x2a
 800288a:	e10b      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002890:	2b02      	cmp	r3, #2
 8002892:	d14e      	bne.n	8002932 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289a:	2200      	movs	r2, #0
 800289c:	4906      	ldr	r1, [pc, #24]	; (80028b8 <HAL_I2C_Mem_Read+0x22c>)
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 fbc6 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e10e      	b.n	8002acc <HAL_I2C_Mem_Read+0x440>
 80028ae:	bf00      	nop
 80028b0:	00100002 	.word	0x00100002
 80028b4:	ffff0000 	.word	0xffff0000
 80028b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002930:	e0b8      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002938:	2200      	movs	r2, #0
 800293a:	4966      	ldr	r1, [pc, #408]	; (8002ad4 <HAL_I2C_Mem_Read+0x448>)
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fb77 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0bf      	b.n	8002acc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002994:	2200      	movs	r2, #0
 8002996:	494f      	ldr	r1, [pc, #316]	; (8002ad4 <HAL_I2C_Mem_Read+0x448>)
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fb49 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e091      	b.n	8002acc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a1c:	e042      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fc5c 	bl	80032e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e04c      	b.n	8002acc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d118      	bne.n	8002aa4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f47f aec2 	bne.w	8002832 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e000      	b.n	8002acc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
  }
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3728      	adds	r7, #40	; 0x28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	00010004 	.word	0x00010004

08002ad8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ae8:	f7ff f89a 	bl	8001c20 <HAL_GetTick>
 8002aec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	f040 8111 	bne.w	8002d22 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2319      	movs	r3, #25
 8002b06:	2201      	movs	r2, #1
 8002b08:	4988      	ldr	r1, [pc, #544]	; (8002d2c <HAL_I2C_IsDeviceReady+0x254>)
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fa90 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b16:	2302      	movs	r3, #2
 8002b18:	e104      	b.n	8002d24 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_I2C_IsDeviceReady+0x50>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e0fd      	b.n	8002d24 <HAL_I2C_IsDeviceReady+0x24c>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d007      	beq.n	8002b4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2224      	movs	r2, #36	; 0x24
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a70      	ldr	r2, [pc, #448]	; (8002d30 <HAL_I2C_IsDeviceReady+0x258>)
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fa4e 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00d      	beq.n	8002bb6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba8:	d103      	bne.n	8002bb2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e0b6      	b.n	8002d24 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bb6:	897b      	ldrh	r3, [r7, #10]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bc4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002bc6:	f7ff f82b 	bl	8001c20 <HAL_GetTick>
 8002bca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	bf0c      	ite	eq
 8002bda:	2301      	moveq	r3, #1
 8002bdc:	2300      	movne	r3, #0
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf0:	bf0c      	ite	eq
 8002bf2:	2301      	moveq	r3, #1
 8002bf4:	2300      	movne	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bfa:	e025      	b.n	8002c48 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bfc:	f7ff f810 	bl	8001c20 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d302      	bcc.n	8002c12 <HAL_I2C_IsDeviceReady+0x13a>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d103      	bne.n	8002c1a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	22a0      	movs	r2, #160	; 0xa0
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2ba0      	cmp	r3, #160	; 0xa0
 8002c52:	d005      	beq.n	8002c60 <HAL_I2C_IsDeviceReady+0x188>
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d102      	bne.n	8002c60 <HAL_I2C_IsDeviceReady+0x188>
 8002c5a:	7dbb      	ldrb	r3, [r7, #22]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0cd      	beq.n	8002bfc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d129      	bne.n	8002cca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c84:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2319      	movs	r3, #25
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4921      	ldr	r1, [pc, #132]	; (8002d2c <HAL_I2C_IsDeviceReady+0x254>)
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f9c2 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e036      	b.n	8002d24 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e02c      	b.n	8002d24 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ce2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	2319      	movs	r3, #25
 8002cea:	2201      	movs	r2, #1
 8002cec:	490f      	ldr	r1, [pc, #60]	; (8002d2c <HAL_I2C_IsDeviceReady+0x254>)
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f99e 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e012      	b.n	8002d24 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	3301      	adds	r3, #1
 8002d02:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	f4ff af32 	bcc.w	8002b72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
  }
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	00100002 	.word	0x00100002
 8002d30:	ffff0000 	.word	0xffff0000

08002d34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	4608      	mov	r0, r1
 8002d3e:	4611      	mov	r1, r2
 8002d40:	461a      	mov	r2, r3
 8002d42:	4603      	mov	r3, r0
 8002d44:	817b      	strh	r3, [r7, #10]
 8002d46:	460b      	mov	r3, r1
 8002d48:	813b      	strh	r3, [r7, #8]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f960 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00d      	beq.n	8002d92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d84:	d103      	bne.n	8002d8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e05f      	b.n	8002e52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d92:	897b      	ldrh	r3, [r7, #10]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002da0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	492d      	ldr	r1, [pc, #180]	; (8002e5c <I2C_RequestMemoryWrite+0x128>)
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f998 	bl	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e04c      	b.n	8002e52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd0:	6a39      	ldr	r1, [r7, #32]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fa02 	bl	80031dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d107      	bne.n	8002df6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e02b      	b.n	8002e52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d105      	bne.n	8002e0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e00:	893b      	ldrh	r3, [r7, #8]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	611a      	str	r2, [r3, #16]
 8002e0a:	e021      	b.n	8002e50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e0c:	893b      	ldrh	r3, [r7, #8]
 8002e0e:	0a1b      	lsrs	r3, r3, #8
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1c:	6a39      	ldr	r1, [r7, #32]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f9dc 	bl	80031dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00d      	beq.n	8002e46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d107      	bne.n	8002e42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e005      	b.n	8002e52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e46:	893b      	ldrh	r3, [r7, #8]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	00010002 	.word	0x00010002

08002e60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	4608      	mov	r0, r1
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	817b      	strh	r3, [r7, #10]
 8002e72:	460b      	mov	r3, r1
 8002e74:	813b      	strh	r3, [r7, #8]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f8c2 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00d      	beq.n	8002ece <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec0:	d103      	bne.n	8002eca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e0aa      	b.n	8003024 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ece:	897b      	ldrh	r3, [r7, #10]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002edc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	6a3a      	ldr	r2, [r7, #32]
 8002ee2:	4952      	ldr	r1, [pc, #328]	; (800302c <I2C_RequestMemoryRead+0x1cc>)
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f8fa 	bl	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e097      	b.n	8003024 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	6a39      	ldr	r1, [r7, #32]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f964 	bl	80031dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00d      	beq.n	8002f36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d107      	bne.n	8002f32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e076      	b.n	8003024 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f3c:	893b      	ldrh	r3, [r7, #8]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	611a      	str	r2, [r3, #16]
 8002f46:	e021      	b.n	8002f8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f48:	893b      	ldrh	r3, [r7, #8]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f58:	6a39      	ldr	r1, [r7, #32]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f93e 	bl	80031dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00d      	beq.n	8002f82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d107      	bne.n	8002f7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e050      	b.n	8003024 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f82:	893b      	ldrh	r3, [r7, #8]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8e:	6a39      	ldr	r1, [r7, #32]
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f923 	bl	80031dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00d      	beq.n	8002fb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d107      	bne.n	8002fb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e035      	b.n	8003024 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 f82b 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00d      	beq.n	8002ffc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fee:	d103      	bne.n	8002ff8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e013      	b.n	8003024 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ffc:	897b      	ldrh	r3, [r7, #10]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	b2da      	uxtb	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	6a3a      	ldr	r2, [r7, #32]
 8003010:	4906      	ldr	r1, [pc, #24]	; (800302c <I2C_RequestMemoryRead+0x1cc>)
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f863 	bl	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	00010002 	.word	0x00010002

08003030 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003040:	e025      	b.n	800308e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d021      	beq.n	800308e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304a:	f7fe fde9 	bl	8001c20 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <I2C_WaitOnFlagUntilTimeout+0x30>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d116      	bne.n	800308e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f043 0220 	orr.w	r2, r3, #32
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e023      	b.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d10d      	bne.n	80030b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	43da      	mvns	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bf0c      	ite	eq
 80030aa:	2301      	moveq	r3, #1
 80030ac:	2300      	movne	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	e00c      	b.n	80030ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4013      	ands	r3, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d0b6      	beq.n	8003042 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ec:	e051      	b.n	8003192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fc:	d123      	bne.n	8003146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003116:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f043 0204 	orr.w	r2, r3, #4
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e046      	b.n	80031d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d021      	beq.n	8003192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314e:	f7fe fd67 	bl	8001c20 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	429a      	cmp	r2, r3
 800315c:	d302      	bcc.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d116      	bne.n	8003192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f043 0220 	orr.w	r2, r3, #32
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e020      	b.n	80031d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	0c1b      	lsrs	r3, r3, #16
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d10c      	bne.n	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4013      	ands	r3, r2
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf14      	ite	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	2300      	moveq	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	e00b      	b.n	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	43da      	mvns	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4013      	ands	r3, r2
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d18d      	bne.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e8:	e02d      	b.n	8003246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f8ce 	bl	800338c <I2C_IsAcknowledgeFailed>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e02d      	b.n	8003256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d021      	beq.n	8003246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003202:	f7fe fd0d 	bl	8001c20 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	d302      	bcc.n	8003218 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d116      	bne.n	8003246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f043 0220 	orr.w	r2, r3, #32
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e007      	b.n	8003256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003250:	2b80      	cmp	r3, #128	; 0x80
 8003252:	d1ca      	bne.n	80031ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800326a:	e02d      	b.n	80032c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f88d 	bl	800338c <I2C_IsAcknowledgeFailed>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e02d      	b.n	80032d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003282:	d021      	beq.n	80032c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003284:	f7fe fccc 	bl	8001c20 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	429a      	cmp	r2, r3
 8003292:	d302      	bcc.n	800329a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d116      	bne.n	80032c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e007      	b.n	80032d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d1ca      	bne.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032ec:	e042      	b.n	8003374 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d119      	bne.n	8003330 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0210 	mvn.w	r2, #16
 8003304:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e029      	b.n	8003384 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003330:	f7fe fc76 	bl	8001c20 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	429a      	cmp	r2, r3
 800333e:	d302      	bcc.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d116      	bne.n	8003374 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f043 0220 	orr.w	r2, r3, #32
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e007      	b.n	8003384 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337e:	2b40      	cmp	r3, #64	; 0x40
 8003380:	d1b5      	bne.n	80032ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a2:	d11b      	bne.n	80033dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f043 0204 	orr.w	r2, r3, #4
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
	...

080033ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e267      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d075      	beq.n	80034f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800340a:	4b88      	ldr	r3, [pc, #544]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b04      	cmp	r3, #4
 8003414:	d00c      	beq.n	8003430 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003416:	4b85      	ldr	r3, [pc, #532]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800341e:	2b08      	cmp	r3, #8
 8003420:	d112      	bne.n	8003448 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003422:	4b82      	ldr	r3, [pc, #520]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800342e:	d10b      	bne.n	8003448 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003430:	4b7e      	ldr	r3, [pc, #504]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d05b      	beq.n	80034f4 <HAL_RCC_OscConfig+0x108>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d157      	bne.n	80034f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e242      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003450:	d106      	bne.n	8003460 <HAL_RCC_OscConfig+0x74>
 8003452:	4b76      	ldr	r3, [pc, #472]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a75      	ldr	r2, [pc, #468]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	e01d      	b.n	800349c <HAL_RCC_OscConfig+0xb0>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0x98>
 800346a:	4b70      	ldr	r3, [pc, #448]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a6f      	ldr	r2, [pc, #444]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4b6d      	ldr	r3, [pc, #436]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a6c      	ldr	r2, [pc, #432]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0xb0>
 8003484:	4b69      	ldr	r3, [pc, #420]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a68      	ldr	r2, [pc, #416]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800348a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	4b66      	ldr	r3, [pc, #408]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a65      	ldr	r2, [pc, #404]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800349a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d013      	beq.n	80034cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe fbbc 	bl	8001c20 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ac:	f7fe fbb8 	bl	8001c20 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e207      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	4b5b      	ldr	r3, [pc, #364]	; (800362c <HAL_RCC_OscConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0xc0>
 80034ca:	e014      	b.n	80034f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fe fba8 	bl	8001c20 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d4:	f7fe fba4 	bl	8001c20 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e1f3      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e6:	4b51      	ldr	r3, [pc, #324]	; (800362c <HAL_RCC_OscConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0xe8>
 80034f2:	e000      	b.n	80034f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d063      	beq.n	80035ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003502:	4b4a      	ldr	r3, [pc, #296]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00b      	beq.n	8003526 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350e:	4b47      	ldr	r3, [pc, #284]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003516:	2b08      	cmp	r3, #8
 8003518:	d11c      	bne.n	8003554 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800351a:	4b44      	ldr	r3, [pc, #272]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d116      	bne.n	8003554 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003526:	4b41      	ldr	r3, [pc, #260]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_RCC_OscConfig+0x152>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d001      	beq.n	800353e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e1c7      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353e:	4b3b      	ldr	r3, [pc, #236]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4937      	ldr	r1, [pc, #220]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003552:	e03a      	b.n	80035ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d020      	beq.n	800359e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800355c:	4b34      	ldr	r3, [pc, #208]	; (8003630 <HAL_RCC_OscConfig+0x244>)
 800355e:	2201      	movs	r2, #1
 8003560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003562:	f7fe fb5d 	bl	8001c20 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800356a:	f7fe fb59 	bl	8001c20 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e1a8      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357c:	4b2b      	ldr	r3, [pc, #172]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003588:	4b28      	ldr	r3, [pc, #160]	; (800362c <HAL_RCC_OscConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4925      	ldr	r1, [pc, #148]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003598:	4313      	orrs	r3, r2
 800359a:	600b      	str	r3, [r1, #0]
 800359c:	e015      	b.n	80035ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359e:	4b24      	ldr	r3, [pc, #144]	; (8003630 <HAL_RCC_OscConfig+0x244>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe fb3c 	bl	8001c20 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ac:	f7fe fb38 	bl	8001c20 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e187      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035be:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d036      	beq.n	8003644 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d016      	beq.n	800360c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035de:	4b15      	ldr	r3, [pc, #84]	; (8003634 <HAL_RCC_OscConfig+0x248>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e4:	f7fe fb1c 	bl	8001c20 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ec:	f7fe fb18 	bl	8001c20 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e167      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_RCC_OscConfig+0x240>)
 8003600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x200>
 800360a:	e01b      	b.n	8003644 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_RCC_OscConfig+0x248>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003612:	f7fe fb05 	bl	8001c20 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003618:	e00e      	b.n	8003638 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800361a:	f7fe fb01 	bl	8001c20 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d907      	bls.n	8003638 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e150      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
 800362c:	40023800 	.word	0x40023800
 8003630:	42470000 	.word	0x42470000
 8003634:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003638:	4b88      	ldr	r3, [pc, #544]	; (800385c <HAL_RCC_OscConfig+0x470>)
 800363a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1ea      	bne.n	800361a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8097 	beq.w	8003780 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003656:	4b81      	ldr	r3, [pc, #516]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10f      	bne.n	8003682 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	4b7d      	ldr	r3, [pc, #500]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	4a7c      	ldr	r2, [pc, #496]	; (800385c <HAL_RCC_OscConfig+0x470>)
 800366c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003670:	6413      	str	r3, [r2, #64]	; 0x40
 8003672:	4b7a      	ldr	r3, [pc, #488]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367e:	2301      	movs	r3, #1
 8003680:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003682:	4b77      	ldr	r3, [pc, #476]	; (8003860 <HAL_RCC_OscConfig+0x474>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d118      	bne.n	80036c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800368e:	4b74      	ldr	r3, [pc, #464]	; (8003860 <HAL_RCC_OscConfig+0x474>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a73      	ldr	r2, [pc, #460]	; (8003860 <HAL_RCC_OscConfig+0x474>)
 8003694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369a:	f7fe fac1 	bl	8001c20 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a2:	f7fe fabd 	bl	8001c20 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e10c      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b4:	4b6a      	ldr	r3, [pc, #424]	; (8003860 <HAL_RCC_OscConfig+0x474>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d106      	bne.n	80036d6 <HAL_RCC_OscConfig+0x2ea>
 80036c8:	4b64      	ldr	r3, [pc, #400]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	4a63      	ldr	r2, [pc, #396]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	6713      	str	r3, [r2, #112]	; 0x70
 80036d4:	e01c      	b.n	8003710 <HAL_RCC_OscConfig+0x324>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b05      	cmp	r3, #5
 80036dc:	d10c      	bne.n	80036f8 <HAL_RCC_OscConfig+0x30c>
 80036de:	4b5f      	ldr	r3, [pc, #380]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	4a5e      	ldr	r2, [pc, #376]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036e4:	f043 0304 	orr.w	r3, r3, #4
 80036e8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ea:	4b5c      	ldr	r3, [pc, #368]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	4a5b      	ldr	r2, [pc, #364]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70
 80036f6:	e00b      	b.n	8003710 <HAL_RCC_OscConfig+0x324>
 80036f8:	4b58      	ldr	r3, [pc, #352]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	4a57      	ldr	r2, [pc, #348]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	6713      	str	r3, [r2, #112]	; 0x70
 8003704:	4b55      	ldr	r3, [pc, #340]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4a54      	ldr	r2, [pc, #336]	; (800385c <HAL_RCC_OscConfig+0x470>)
 800370a:	f023 0304 	bic.w	r3, r3, #4
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d015      	beq.n	8003744 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fe fa82 	bl	8001c20 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371e:	e00a      	b.n	8003736 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003720:	f7fe fa7e 	bl	8001c20 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	; 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e0cb      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003736:	4b49      	ldr	r3, [pc, #292]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0ee      	beq.n	8003720 <HAL_RCC_OscConfig+0x334>
 8003742:	e014      	b.n	800376e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003744:	f7fe fa6c 	bl	8001c20 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374a:	e00a      	b.n	8003762 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800374c:	f7fe fa68 	bl	8001c20 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	; 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e0b5      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003762:	4b3e      	ldr	r3, [pc, #248]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1ee      	bne.n	800374c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800376e:	7dfb      	ldrb	r3, [r7, #23]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d105      	bne.n	8003780 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003774:	4b39      	ldr	r3, [pc, #228]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	4a38      	ldr	r2, [pc, #224]	; (800385c <HAL_RCC_OscConfig+0x470>)
 800377a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80a1 	beq.w	80038cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800378a:	4b34      	ldr	r3, [pc, #208]	; (800385c <HAL_RCC_OscConfig+0x470>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b08      	cmp	r3, #8
 8003794:	d05c      	beq.n	8003850 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d141      	bne.n	8003822 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379e:	4b31      	ldr	r3, [pc, #196]	; (8003864 <HAL_RCC_OscConfig+0x478>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fe fa3c 	bl	8001c20 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fe fa38 	bl	8001c20 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e087      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	4b27      	ldr	r3, [pc, #156]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69da      	ldr	r2, [r3, #28]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	019b      	lsls	r3, r3, #6
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	3b01      	subs	r3, #1
 80037e4:	041b      	lsls	r3, r3, #16
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	061b      	lsls	r3, r3, #24
 80037ee:	491b      	ldr	r1, [pc, #108]	; (800385c <HAL_RCC_OscConfig+0x470>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f4:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <HAL_RCC_OscConfig+0x478>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fa:	f7fe fa11 	bl	8001c20 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003802:	f7fe fa0d 	bl	8001c20 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e05c      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x416>
 8003820:	e054      	b.n	80038cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_RCC_OscConfig+0x478>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7fe f9fa 	bl	8001c20 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003830:	f7fe f9f6 	bl	8001c20 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e045      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_RCC_OscConfig+0x470>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x444>
 800384e:	e03d      	b.n	80038cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e038      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
 800385c:	40023800 	.word	0x40023800
 8003860:	40007000 	.word	0x40007000
 8003864:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <HAL_RCC_OscConfig+0x4ec>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d028      	beq.n	80038c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003880:	429a      	cmp	r2, r3
 8003882:	d121      	bne.n	80038c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d11a      	bne.n	80038c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003898:	4013      	ands	r3, r2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800389e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d111      	bne.n	80038c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	085b      	lsrs	r3, r3, #1
 80038b0:	3b01      	subs	r3, #1
 80038b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d107      	bne.n	80038c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800

080038dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0cc      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f0:	4b68      	ldr	r3, [pc, #416]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d90c      	bls.n	8003918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fe:	4b65      	ldr	r3, [pc, #404]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	4b63      	ldr	r3, [pc, #396]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d001      	beq.n	8003918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0b8      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d020      	beq.n	8003966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003930:	4b59      	ldr	r3, [pc, #356]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4a58      	ldr	r2, [pc, #352]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800393a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003948:	4b53      	ldr	r3, [pc, #332]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	4a52      	ldr	r2, [pc, #328]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003954:	4b50      	ldr	r3, [pc, #320]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	494d      	ldr	r1, [pc, #308]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	4313      	orrs	r3, r2
 8003964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d044      	beq.n	80039fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d107      	bne.n	800398a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	4b47      	ldr	r3, [pc, #284]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d119      	bne.n	80039ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e07f      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d003      	beq.n	800399a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003996:	2b03      	cmp	r3, #3
 8003998:	d107      	bne.n	80039aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399a:	4b3f      	ldr	r3, [pc, #252]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e06f      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039aa:	4b3b      	ldr	r3, [pc, #236]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e067      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ba:	4b37      	ldr	r3, [pc, #220]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 0203 	bic.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4934      	ldr	r1, [pc, #208]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039cc:	f7fe f928 	bl	8001c20 <HAL_GetTick>
 80039d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d4:	f7fe f924 	bl	8001c20 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e04f      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 020c 	and.w	r2, r3, #12
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d1eb      	bne.n	80039d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039fc:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d20c      	bcs.n	8003a24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e032      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a30:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	4916      	ldr	r1, [pc, #88]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	490e      	ldr	r1, [pc, #56]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a62:	f000 f821 	bl	8003aa8 <HAL_RCC_GetSysClockFreq>
 8003a66:	4602      	mov	r2, r0
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	490a      	ldr	r1, [pc, #40]	; (8003a9c <HAL_RCC_ClockConfig+0x1c0>)
 8003a74:	5ccb      	ldrb	r3, [r1, r3]
 8003a76:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7a:	4a09      	ldr	r2, [pc, #36]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a7e:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe f888 	bl	8001b98 <HAL_InitTick>

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40023c00 	.word	0x40023c00
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	08008360 	.word	0x08008360
 8003aa0:	20000008 	.word	0x20000008
 8003aa4:	2000000c 	.word	0x2000000c

08003aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aac:	b094      	sub	sp, #80	; 0x50
 8003aae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab8:	2300      	movs	r3, #0
 8003aba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ac0:	4b79      	ldr	r3, [pc, #484]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 030c 	and.w	r3, r3, #12
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d00d      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	f200 80e1 	bhi.w	8003c94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0x34>
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d003      	beq.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ada:	e0db      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003adc:	4b73      	ldr	r3, [pc, #460]	; (8003cac <HAL_RCC_GetSysClockFreq+0x204>)
 8003ade:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ae0:	e0db      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ae2:	4b73      	ldr	r3, [pc, #460]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ae4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ae6:	e0d8      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae8:	4b6f      	ldr	r3, [pc, #444]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003af2:	4b6d      	ldr	r3, [pc, #436]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d063      	beq.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003afe:	4b6a      	ldr	r3, [pc, #424]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	099b      	lsrs	r3, r3, #6
 8003b04:	2200      	movs	r2, #0
 8003b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b10:	633b      	str	r3, [r7, #48]	; 0x30
 8003b12:	2300      	movs	r3, #0
 8003b14:	637b      	str	r3, [r7, #52]	; 0x34
 8003b16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b1a:	4622      	mov	r2, r4
 8003b1c:	462b      	mov	r3, r5
 8003b1e:	f04f 0000 	mov.w	r0, #0
 8003b22:	f04f 0100 	mov.w	r1, #0
 8003b26:	0159      	lsls	r1, r3, #5
 8003b28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b2c:	0150      	lsls	r0, r2, #5
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4621      	mov	r1, r4
 8003b34:	1a51      	subs	r1, r2, r1
 8003b36:	6139      	str	r1, [r7, #16]
 8003b38:	4629      	mov	r1, r5
 8003b3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b4c:	4659      	mov	r1, fp
 8003b4e:	018b      	lsls	r3, r1, #6
 8003b50:	4651      	mov	r1, sl
 8003b52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b56:	4651      	mov	r1, sl
 8003b58:	018a      	lsls	r2, r1, #6
 8003b5a:	4651      	mov	r1, sl
 8003b5c:	ebb2 0801 	subs.w	r8, r2, r1
 8003b60:	4659      	mov	r1, fp
 8003b62:	eb63 0901 	sbc.w	r9, r3, r1
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b7a:	4690      	mov	r8, r2
 8003b7c:	4699      	mov	r9, r3
 8003b7e:	4623      	mov	r3, r4
 8003b80:	eb18 0303 	adds.w	r3, r8, r3
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	462b      	mov	r3, r5
 8003b88:	eb49 0303 	adc.w	r3, r9, r3
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	024b      	lsls	r3, r1, #9
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	024a      	lsls	r2, r1, #9
 8003ba8:	4610      	mov	r0, r2
 8003baa:	4619      	mov	r1, r3
 8003bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bae:	2200      	movs	r2, #0
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bb8:	f7fc fb06 	bl	80001c8 <__aeabi_uldivmod>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc4:	e058      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc6:	4b38      	ldr	r3, [pc, #224]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	099b      	lsrs	r3, r3, #6
 8003bcc:	2200      	movs	r2, #0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bd6:	623b      	str	r3, [r7, #32]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
 8003bdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003be0:	4642      	mov	r2, r8
 8003be2:	464b      	mov	r3, r9
 8003be4:	f04f 0000 	mov.w	r0, #0
 8003be8:	f04f 0100 	mov.w	r1, #0
 8003bec:	0159      	lsls	r1, r3, #5
 8003bee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bf2:	0150      	lsls	r0, r2, #5
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4641      	mov	r1, r8
 8003bfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bfe:	4649      	mov	r1, r9
 8003c00:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c18:	ebb2 040a 	subs.w	r4, r2, sl
 8003c1c:	eb63 050b 	sbc.w	r5, r3, fp
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	00eb      	lsls	r3, r5, #3
 8003c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c2e:	00e2      	lsls	r2, r4, #3
 8003c30:	4614      	mov	r4, r2
 8003c32:	461d      	mov	r5, r3
 8003c34:	4643      	mov	r3, r8
 8003c36:	18e3      	adds	r3, r4, r3
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	464b      	mov	r3, r9
 8003c3c:	eb45 0303 	adc.w	r3, r5, r3
 8003c40:	607b      	str	r3, [r7, #4]
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c4e:	4629      	mov	r1, r5
 8003c50:	028b      	lsls	r3, r1, #10
 8003c52:	4621      	mov	r1, r4
 8003c54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c58:	4621      	mov	r1, r4
 8003c5a:	028a      	lsls	r2, r1, #10
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c62:	2200      	movs	r2, #0
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	61fa      	str	r2, [r7, #28]
 8003c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c6c:	f7fc faac 	bl	80001c8 <__aeabi_uldivmod>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4613      	mov	r3, r2
 8003c76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c78:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	3301      	adds	r3, #1
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c92:	e002      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetSysClockFreq+0x204>)
 8003c96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3750      	adds	r7, #80	; 0x50
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	00f42400 	.word	0x00f42400
 8003cb0:	007a1200 	.word	0x007a1200

08003cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb8:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cba:	681b      	ldr	r3, [r3, #0]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20000008 	.word	0x20000008

08003ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cd0:	f7ff fff0 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	0a9b      	lsrs	r3, r3, #10
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	4903      	ldr	r1, [pc, #12]	; (8003cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ce2:	5ccb      	ldrb	r3, [r1, r3]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	08008370 	.word	0x08008370

08003cf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e07b      	b.n	8003dfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d108      	bne.n	8003d20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d16:	d009      	beq.n	8003d2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	61da      	str	r2, [r3, #28]
 8003d1e:	e005      	b.n	8003d2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fd fd74 	bl	8001834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db0:	ea42 0103 	orr.w	r1, r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	0c1b      	lsrs	r3, r3, #16
 8003dca:	f003 0104 	and.w	r1, r3, #4
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f003 0210 	and.w	r2, r3, #16
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b088      	sub	sp, #32
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_SPI_Transmit+0x22>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e126      	b.n	8004076 <HAL_SPI_Transmit+0x270>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e30:	f7fd fef6 	bl	8001c20 <HAL_GetTick>
 8003e34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d002      	beq.n	8003e4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e46:	2302      	movs	r3, #2
 8003e48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e4a:	e10b      	b.n	8004064 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_SPI_Transmit+0x52>
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e5c:	e102      	b.n	8004064 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2203      	movs	r2, #3
 8003e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	88fa      	ldrh	r2, [r7, #6]
 8003e76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	88fa      	ldrh	r2, [r7, #6]
 8003e7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea4:	d10f      	bne.n	8003ec6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ec4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed0:	2b40      	cmp	r3, #64	; 0x40
 8003ed2:	d007      	beq.n	8003ee4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eec:	d14b      	bne.n	8003f86 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_SPI_Transmit+0xf6>
 8003ef6:	8afb      	ldrh	r3, [r7, #22]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d13e      	bne.n	8003f7a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	881a      	ldrh	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	1c9a      	adds	r2, r3, #2
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f20:	e02b      	b.n	8003f7a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d112      	bne.n	8003f56 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	1c9a      	adds	r2, r3, #2
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f54:	e011      	b.n	8003f7a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f56:	f7fd fe63 	bl	8001c20 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d803      	bhi.n	8003f6e <HAL_SPI_Transmit+0x168>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d102      	bne.n	8003f74 <HAL_SPI_Transmit+0x16e>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d102      	bne.n	8003f7a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f78:	e074      	b.n	8004064 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1ce      	bne.n	8003f22 <HAL_SPI_Transmit+0x11c>
 8003f84:	e04c      	b.n	8004020 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_SPI_Transmit+0x18e>
 8003f8e:	8afb      	ldrh	r3, [r7, #22]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d140      	bne.n	8004016 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	7812      	ldrb	r2, [r2, #0]
 8003fa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fba:	e02c      	b.n	8004016 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d113      	bne.n	8003ff2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	330c      	adds	r3, #12
 8003fd4:	7812      	ldrb	r2, [r2, #0]
 8003fd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ff0:	e011      	b.n	8004016 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ff2:	f7fd fe15 	bl	8001c20 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d803      	bhi.n	800400a <HAL_SPI_Transmit+0x204>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d102      	bne.n	8004010 <HAL_SPI_Transmit+0x20a>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d102      	bne.n	8004016 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004014:	e026      	b.n	8004064 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1cd      	bne.n	8003fbc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	6839      	ldr	r1, [r7, #0]
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fbcb 	bl	80047c0 <SPI_EndRxTxTransaction>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e000      	b.n	8004064 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004062:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004074:	7ffb      	ldrb	r3, [r7, #31]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b088      	sub	sp, #32
 8004082:	af02      	add	r7, sp, #8
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	603b      	str	r3, [r7, #0]
 800408a:	4613      	mov	r3, r2
 800408c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800409a:	d112      	bne.n	80040c2 <HAL_SPI_Receive+0x44>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10e      	bne.n	80040c2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2204      	movs	r2, #4
 80040a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80040ac:	88fa      	ldrh	r2, [r7, #6]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	4613      	mov	r3, r2
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f8f1 	bl	80042a0 <HAL_SPI_TransmitReceive>
 80040be:	4603      	mov	r3, r0
 80040c0:	e0ea      	b.n	8004298 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_SPI_Receive+0x52>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e0e3      	b.n	8004298 <HAL_SPI_Receive+0x21a>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040d8:	f7fd fda2 	bl	8001c20 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d002      	beq.n	80040f0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80040ea:	2302      	movs	r3, #2
 80040ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040ee:	e0ca      	b.n	8004286 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_SPI_Receive+0x7e>
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d102      	bne.n	8004102 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004100:	e0c1      	b.n	8004286 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2204      	movs	r2, #4
 8004106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	88fa      	ldrh	r2, [r7, #6]
 800411a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	88fa      	ldrh	r2, [r7, #6]
 8004120:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004148:	d10f      	bne.n	800416a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004158:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004168:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b40      	cmp	r3, #64	; 0x40
 8004176:	d007      	beq.n	8004188 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004186:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d162      	bne.n	8004256 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004190:	e02e      	b.n	80041f0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b01      	cmp	r3, #1
 800419e:	d115      	bne.n	80041cc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f103 020c 	add.w	r2, r3, #12
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	7812      	ldrb	r2, [r2, #0]
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041ca:	e011      	b.n	80041f0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041cc:	f7fd fd28 	bl	8001c20 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d803      	bhi.n	80041e4 <HAL_SPI_Receive+0x166>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e2:	d102      	bne.n	80041ea <HAL_SPI_Receive+0x16c>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d102      	bne.n	80041f0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041ee:	e04a      	b.n	8004286 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1cb      	bne.n	8004192 <HAL_SPI_Receive+0x114>
 80041fa:	e031      	b.n	8004260 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b01      	cmp	r3, #1
 8004208:	d113      	bne.n	8004232 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	b292      	uxth	r2, r2
 8004216:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	1c9a      	adds	r2, r3, #2
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004230:	e011      	b.n	8004256 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004232:	f7fd fcf5 	bl	8001c20 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d803      	bhi.n	800424a <HAL_SPI_Receive+0x1cc>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d102      	bne.n	8004250 <HAL_SPI_Receive+0x1d2>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d102      	bne.n	8004256 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004254:	e017      	b.n	8004286 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1cd      	bne.n	80041fc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	6839      	ldr	r1, [r7, #0]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fa45 	bl	80046f4 <SPI_EndRxTransaction>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	75fb      	strb	r3, [r7, #23]
 8004282:	e000      	b.n	8004286 <HAL_SPI_Receive+0x208>
  }

error :
 8004284:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004296:	7dfb      	ldrb	r3, [r7, #23]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08c      	sub	sp, #48	; 0x30
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042ae:	2301      	movs	r3, #1
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x26>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e18a      	b.n	80045dc <HAL_SPI_TransmitReceive+0x33c>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042ce:	f7fd fca7 	bl	8001c20 <HAL_GetTick>
 80042d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80042e4:	887b      	ldrh	r3, [r7, #2]
 80042e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d00f      	beq.n	8004310 <HAL_SPI_TransmitReceive+0x70>
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f6:	d107      	bne.n	8004308 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d103      	bne.n	8004308 <HAL_SPI_TransmitReceive+0x68>
 8004300:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004304:	2b04      	cmp	r3, #4
 8004306:	d003      	beq.n	8004310 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004308:	2302      	movs	r3, #2
 800430a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800430e:	e15b      	b.n	80045c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_SPI_TransmitReceive+0x82>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <HAL_SPI_TransmitReceive+0x82>
 800431c:	887b      	ldrh	r3, [r7, #2]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d103      	bne.n	800432a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004328:	e14e      	b.n	80045c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b04      	cmp	r3, #4
 8004334:	d003      	beq.n	800433e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2205      	movs	r2, #5
 800433a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	887a      	ldrh	r2, [r7, #2]
 800434e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	887a      	ldrh	r2, [r7, #2]
 8004354:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	887a      	ldrh	r2, [r7, #2]
 8004360:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	887a      	ldrh	r2, [r7, #2]
 8004366:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	2b40      	cmp	r3, #64	; 0x40
 8004380:	d007      	beq.n	8004392 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004390:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439a:	d178      	bne.n	800448e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_SPI_TransmitReceive+0x10a>
 80043a4:	8b7b      	ldrh	r3, [r7, #26]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d166      	bne.n	8004478 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	881a      	ldrh	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	1c9a      	adds	r2, r3, #2
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ce:	e053      	b.n	8004478 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d11b      	bne.n	8004416 <HAL_SPI_TransmitReceive+0x176>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d016      	beq.n	8004416 <HAL_SPI_TransmitReceive+0x176>
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d113      	bne.n	8004416 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	881a      	ldrh	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	1c9a      	adds	r2, r3, #2
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b01      	cmp	r3, #1
 8004422:	d119      	bne.n	8004458 <HAL_SPI_TransmitReceive+0x1b8>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d014      	beq.n	8004458 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	b292      	uxth	r2, r2
 800443a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	1c9a      	adds	r2, r3, #2
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004454:	2301      	movs	r3, #1
 8004456:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004458:	f7fd fbe2 	bl	8001c20 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004464:	429a      	cmp	r2, r3
 8004466:	d807      	bhi.n	8004478 <HAL_SPI_TransmitReceive+0x1d8>
 8004468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446e:	d003      	beq.n	8004478 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004476:	e0a7      	b.n	80045c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1a6      	bne.n	80043d0 <HAL_SPI_TransmitReceive+0x130>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1a1      	bne.n	80043d0 <HAL_SPI_TransmitReceive+0x130>
 800448c:	e07c      	b.n	8004588 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_SPI_TransmitReceive+0x1fc>
 8004496:	8b7b      	ldrh	r3, [r7, #26]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d16b      	bne.n	8004574 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	7812      	ldrb	r2, [r2, #0]
 80044a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044c2:	e057      	b.n	8004574 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d11c      	bne.n	800450c <HAL_SPI_TransmitReceive+0x26c>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d017      	beq.n	800450c <HAL_SPI_TransmitReceive+0x26c>
 80044dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d114      	bne.n	800450c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	330c      	adds	r3, #12
 80044ec:	7812      	ldrb	r2, [r2, #0]
 80044ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b01      	cmp	r3, #1
 8004518:	d119      	bne.n	800454e <HAL_SPI_TransmitReceive+0x2ae>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d014      	beq.n	800454e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004540:	b29b      	uxth	r3, r3
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800454a:	2301      	movs	r3, #1
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800454e:	f7fd fb67 	bl	8001c20 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800455a:	429a      	cmp	r2, r3
 800455c:	d803      	bhi.n	8004566 <HAL_SPI_TransmitReceive+0x2c6>
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d102      	bne.n	800456c <HAL_SPI_TransmitReceive+0x2cc>
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	2b00      	cmp	r3, #0
 800456a:	d103      	bne.n	8004574 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004572:	e029      	b.n	80045c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1a2      	bne.n	80044c4 <HAL_SPI_TransmitReceive+0x224>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d19d      	bne.n	80044c4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f917 	bl	80047c0 <SPI_EndRxTxTransaction>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d006      	beq.n	80045a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80045a4:	e010      	b.n	80045c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10b      	bne.n	80045c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	e000      	b.n	80045c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80045c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3730      	adds	r7, #48	; 0x30
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	4613      	mov	r3, r2
 80045f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045f4:	f7fd fb14 	bl	8001c20 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	4413      	add	r3, r2
 8004602:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004604:	f7fd fb0c 	bl	8001c20 <HAL_GetTick>
 8004608:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800460a:	4b39      	ldr	r3, [pc, #228]	; (80046f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	015b      	lsls	r3, r3, #5
 8004610:	0d1b      	lsrs	r3, r3, #20
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	fb02 f303 	mul.w	r3, r2, r3
 8004618:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800461a:	e054      	b.n	80046c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d050      	beq.n	80046c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004624:	f7fd fafc 	bl	8001c20 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	429a      	cmp	r2, r3
 8004632:	d902      	bls.n	800463a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d13d      	bne.n	80046b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004648:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004652:	d111      	bne.n	8004678 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800465c:	d004      	beq.n	8004668 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004666:	d107      	bne.n	8004678 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004676:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004680:	d10f      	bne.n	80046a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e017      	b.n	80046e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4013      	ands	r3, r2
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	bf0c      	ite	eq
 80046d6:	2301      	moveq	r3, #1
 80046d8:	2300      	movne	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d19b      	bne.n	800461c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3720      	adds	r7, #32
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000008 	.word	0x20000008

080046f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004708:	d111      	bne.n	800472e <SPI_EndRxTransaction+0x3a>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004712:	d004      	beq.n	800471e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471c:	d107      	bne.n	800472e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004736:	d12a      	bne.n	800478e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004740:	d012      	beq.n	8004768 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2200      	movs	r2, #0
 800474a:	2180      	movs	r1, #128	; 0x80
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7ff ff49 	bl	80045e4 <SPI_WaitFlagStateUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d02d      	beq.n	80047b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	f043 0220 	orr.w	r2, r3, #32
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e026      	b.n	80047b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2200      	movs	r2, #0
 8004770:	2101      	movs	r1, #1
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f7ff ff36 	bl	80045e4 <SPI_WaitFlagStateUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01a      	beq.n	80047b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	f043 0220 	orr.w	r2, r3, #32
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e013      	b.n	80047b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2200      	movs	r2, #0
 8004796:	2101      	movs	r1, #1
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff ff23 	bl	80045e4 <SPI_WaitFlagStateUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d007      	beq.n	80047b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	f043 0220 	orr.w	r2, r3, #32
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e000      	b.n	80047b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047cc:	4b1b      	ldr	r3, [pc, #108]	; (800483c <SPI_EndRxTxTransaction+0x7c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1b      	ldr	r2, [pc, #108]	; (8004840 <SPI_EndRxTxTransaction+0x80>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	0d5b      	lsrs	r3, r3, #21
 80047d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047dc:	fb02 f303 	mul.w	r3, r2, r3
 80047e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ea:	d112      	bne.n	8004812 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2200      	movs	r2, #0
 80047f4:	2180      	movs	r1, #128	; 0x80
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f7ff fef4 	bl	80045e4 <SPI_WaitFlagStateUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d016      	beq.n	8004830 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004806:	f043 0220 	orr.w	r2, r3, #32
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e00f      	b.n	8004832 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	3b01      	subs	r3, #1
 800481c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004828:	2b80      	cmp	r3, #128	; 0x80
 800482a:	d0f2      	beq.n	8004812 <SPI_EndRxTxTransaction+0x52>
 800482c:	e000      	b.n	8004830 <SPI_EndRxTxTransaction+0x70>
        break;
 800482e:	bf00      	nop
  }

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000008 	.word	0x20000008
 8004840:	165e9f81 	.word	0x165e9f81

08004844 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e034      	b.n	80048c4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7fc f834 	bl	80008dc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3308      	adds	r3, #8
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f000 fca6 	bl	80051d0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	461a      	mov	r2, r3
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	f000 fcf0 	bl	8005274 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6858      	ldr	r0, [r3, #4]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	f000 fd25 	bl	80052f0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	6892      	ldr	r2, [r2, #8]
 80048ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	6892      	ldr	r2, [r2, #8]
 80048ba:	f041 0101 	orr.w	r1, r1, #1
 80048be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e041      	b.n	8004962 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fd f8a0 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3304      	adds	r3, #4
 8004908:	4619      	mov	r1, r3
 800490a:	4610      	mov	r0, r2
 800490c:	f000 fa96 	bl	8004e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d001      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e04e      	b.n	8004a22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a23      	ldr	r2, [pc, #140]	; (8004a30 <HAL_TIM_Base_Start_IT+0xc4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d022      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x80>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ae:	d01d      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x80>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <HAL_TIM_Base_Start_IT+0xc8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d018      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x80>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1e      	ldr	r2, [pc, #120]	; (8004a38 <HAL_TIM_Base_Start_IT+0xcc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d013      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x80>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <HAL_TIM_Base_Start_IT+0xd0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00e      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x80>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1b      	ldr	r2, [pc, #108]	; (8004a40 <HAL_TIM_Base_Start_IT+0xd4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d009      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x80>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a19      	ldr	r2, [pc, #100]	; (8004a44 <HAL_TIM_Base_Start_IT+0xd8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x80>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <HAL_TIM_Base_Start_IT+0xdc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d111      	bne.n	8004a10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d010      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0e:	e007      	b.n	8004a20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40010000 	.word	0x40010000
 8004a34:	40000400 	.word	0x40000400
 8004a38:	40000800 	.word	0x40000800
 8004a3c:	40000c00 	.word	0x40000c00
 8004a40:	40010400 	.word	0x40010400
 8004a44:	40014000 	.word	0x40014000
 8004a48:	40001800 	.word	0x40001800

08004a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d122      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d11b      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0202 	mvn.w	r2, #2
 8004a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f9b5 	bl	8004dfe <HAL_TIM_IC_CaptureCallback>
 8004a94:	e005      	b.n	8004aa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f9a7 	bl	8004dea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f9b8 	bl	8004e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d122      	bne.n	8004afc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d11b      	bne.n	8004afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0204 	mvn.w	r2, #4
 8004acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f98b 	bl	8004dfe <HAL_TIM_IC_CaptureCallback>
 8004ae8:	e005      	b.n	8004af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f97d 	bl	8004dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f98e 	bl	8004e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d122      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d11b      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0208 	mvn.w	r2, #8
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2204      	movs	r2, #4
 8004b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f961 	bl	8004dfe <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f953 	bl	8004dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f964 	bl	8004e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0310 	and.w	r3, r3, #16
 8004b5a:	2b10      	cmp	r3, #16
 8004b5c:	d122      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d11b      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0210 	mvn.w	r2, #16
 8004b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2208      	movs	r2, #8
 8004b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f937 	bl	8004dfe <HAL_TIM_IC_CaptureCallback>
 8004b90:	e005      	b.n	8004b9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f929 	bl	8004dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f93a 	bl	8004e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d107      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0201 	mvn.w	r2, #1
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fc fdd2 	bl	8001774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b80      	cmp	r3, #128	; 0x80
 8004bdc:	d10e      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be8:	2b80      	cmp	r3, #128	; 0x80
 8004bea:	d107      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fae0 	bl	80051bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c06:	2b40      	cmp	r3, #64	; 0x40
 8004c08:	d10e      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d107      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f8ff 	bl	8004e26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d10e      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d107      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f06f 0220 	mvn.w	r2, #32
 8004c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 faaa 	bl	80051a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c54:	bf00      	nop
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_TIM_ConfigClockSource+0x1c>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e0b4      	b.n	8004de2 <HAL_TIM_ConfigClockSource+0x186>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb0:	d03e      	beq.n	8004d30 <HAL_TIM_ConfigClockSource+0xd4>
 8004cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb6:	f200 8087 	bhi.w	8004dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbe:	f000 8086 	beq.w	8004dce <HAL_TIM_ConfigClockSource+0x172>
 8004cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc6:	d87f      	bhi.n	8004dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc8:	2b70      	cmp	r3, #112	; 0x70
 8004cca:	d01a      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0xa6>
 8004ccc:	2b70      	cmp	r3, #112	; 0x70
 8004cce:	d87b      	bhi.n	8004dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd0:	2b60      	cmp	r3, #96	; 0x60
 8004cd2:	d050      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x11a>
 8004cd4:	2b60      	cmp	r3, #96	; 0x60
 8004cd6:	d877      	bhi.n	8004dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd8:	2b50      	cmp	r3, #80	; 0x50
 8004cda:	d03c      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0xfa>
 8004cdc:	2b50      	cmp	r3, #80	; 0x50
 8004cde:	d873      	bhi.n	8004dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce0:	2b40      	cmp	r3, #64	; 0x40
 8004ce2:	d058      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x13a>
 8004ce4:	2b40      	cmp	r3, #64	; 0x40
 8004ce6:	d86f      	bhi.n	8004dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce8:	2b30      	cmp	r3, #48	; 0x30
 8004cea:	d064      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0x15a>
 8004cec:	2b30      	cmp	r3, #48	; 0x30
 8004cee:	d86b      	bhi.n	8004dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d060      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0x15a>
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d867      	bhi.n	8004dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d05c      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0x15a>
 8004cfc:	2b10      	cmp	r3, #16
 8004cfe:	d05a      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d00:	e062      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6899      	ldr	r1, [r3, #8]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f000 f9ad 	bl	8005070 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	609a      	str	r2, [r3, #8]
      break;
 8004d2e:	e04f      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	6899      	ldr	r1, [r3, #8]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f000 f996 	bl	8005070 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d52:	609a      	str	r2, [r3, #8]
      break;
 8004d54:	e03c      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6859      	ldr	r1, [r3, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f000 f90a 	bl	8004f7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2150      	movs	r1, #80	; 0x50
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f963 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004d74:	e02c      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6859      	ldr	r1, [r3, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	461a      	mov	r2, r3
 8004d84:	f000 f929 	bl	8004fda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2160      	movs	r1, #96	; 0x60
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f953 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004d94:	e01c      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6859      	ldr	r1, [r3, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	461a      	mov	r2, r3
 8004da4:	f000 f8ea 	bl	8004f7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2140      	movs	r1, #64	; 0x40
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 f943 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004db4:	e00c      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	f000 f93a 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004dc6:	e003      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
      break;
 8004dcc:	e000      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a40      	ldr	r2, [pc, #256]	; (8004f50 <TIM_Base_SetConfig+0x114>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d013      	beq.n	8004e7c <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5a:	d00f      	beq.n	8004e7c <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a3d      	ldr	r2, [pc, #244]	; (8004f54 <TIM_Base_SetConfig+0x118>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00b      	beq.n	8004e7c <TIM_Base_SetConfig+0x40>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a3c      	ldr	r2, [pc, #240]	; (8004f58 <TIM_Base_SetConfig+0x11c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d007      	beq.n	8004e7c <TIM_Base_SetConfig+0x40>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a3b      	ldr	r2, [pc, #236]	; (8004f5c <TIM_Base_SetConfig+0x120>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <TIM_Base_SetConfig+0x40>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a3a      	ldr	r2, [pc, #232]	; (8004f60 <TIM_Base_SetConfig+0x124>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d108      	bne.n	8004e8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2f      	ldr	r2, [pc, #188]	; (8004f50 <TIM_Base_SetConfig+0x114>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d02b      	beq.n	8004eee <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9c:	d027      	beq.n	8004eee <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a2c      	ldr	r2, [pc, #176]	; (8004f54 <TIM_Base_SetConfig+0x118>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d023      	beq.n	8004eee <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a2b      	ldr	r2, [pc, #172]	; (8004f58 <TIM_Base_SetConfig+0x11c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01f      	beq.n	8004eee <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a2a      	ldr	r2, [pc, #168]	; (8004f5c <TIM_Base_SetConfig+0x120>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01b      	beq.n	8004eee <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a29      	ldr	r2, [pc, #164]	; (8004f60 <TIM_Base_SetConfig+0x124>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d017      	beq.n	8004eee <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a28      	ldr	r2, [pc, #160]	; (8004f64 <TIM_Base_SetConfig+0x128>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a27      	ldr	r2, [pc, #156]	; (8004f68 <TIM_Base_SetConfig+0x12c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00f      	beq.n	8004eee <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a26      	ldr	r2, [pc, #152]	; (8004f6c <TIM_Base_SetConfig+0x130>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00b      	beq.n	8004eee <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a25      	ldr	r2, [pc, #148]	; (8004f70 <TIM_Base_SetConfig+0x134>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d007      	beq.n	8004eee <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a24      	ldr	r2, [pc, #144]	; (8004f74 <TIM_Base_SetConfig+0x138>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a23      	ldr	r2, [pc, #140]	; (8004f78 <TIM_Base_SetConfig+0x13c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d108      	bne.n	8004f00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a0a      	ldr	r2, [pc, #40]	; (8004f50 <TIM_Base_SetConfig+0x114>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_Base_SetConfig+0xf8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a0c      	ldr	r2, [pc, #48]	; (8004f60 <TIM_Base_SetConfig+0x124>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d103      	bne.n	8004f3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	615a      	str	r2, [r3, #20]
}
 8004f42:	bf00      	nop
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40010000 	.word	0x40010000
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800
 8004f5c:	40000c00 	.word	0x40000c00
 8004f60:	40010400 	.word	0x40010400
 8004f64:	40014000 	.word	0x40014000
 8004f68:	40014400 	.word	0x40014400
 8004f6c:	40014800 	.word	0x40014800
 8004f70:	40001800 	.word	0x40001800
 8004f74:	40001c00 	.word	0x40001c00
 8004f78:	40002000 	.word	0x40002000

08004f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f023 0201 	bic.w	r2, r3, #1
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f023 030a 	bic.w	r3, r3, #10
 8004fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b087      	sub	sp, #28
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f023 0210 	bic.w	r2, r3, #16
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	031b      	lsls	r3, r3, #12
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800503a:	b480      	push	{r7}
 800503c:	b085      	sub	sp, #20
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	f043 0307 	orr.w	r3, r3, #7
 800505c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	609a      	str	r2, [r3, #8]
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800508a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	021a      	lsls	r2, r3, #8
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	431a      	orrs	r2, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	4313      	orrs	r3, r2
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	609a      	str	r2, [r3, #8]
}
 80050a4:	bf00      	nop
 80050a6:	371c      	adds	r7, #28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e05a      	b.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a21      	ldr	r2, [pc, #132]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d022      	beq.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005114:	d01d      	beq.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1d      	ldr	r2, [pc, #116]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d018      	beq.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1b      	ldr	r2, [pc, #108]	; (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a1a      	ldr	r2, [pc, #104]	; (8005198 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00e      	beq.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a18      	ldr	r2, [pc, #96]	; (800519c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d009      	beq.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d004      	beq.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d10c      	bne.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	4313      	orrs	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40010000 	.word	0x40010000
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800
 8005198:	40000c00 	.word	0x40000c00
 800519c:	40010400 	.word	0x40010400
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40001800 	.word	0x40001800

080051a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4b20      	ldr	r3, [pc, #128]	; (8005270 <FSMC_NORSRAM_Init+0xa0>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80051fa:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005200:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005206:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800520c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005212:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005218:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800521e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005224:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800522a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8005230:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8005236:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800523c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b08      	cmp	r3, #8
 800524a:	d103      	bne.n	8005254 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005252:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	fff00080 	.word	0xfff00080

08005274 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800528e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005296:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80052a2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80052aa:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80052b2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80052bc:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	3b02      	subs	r3, #2
 80052c4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80052c6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80052cc:	4313      	orrs	r3, r2
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6979      	ldr	r1, [r7, #20]
 80052dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005308:	d122      	bne.n	8005350 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005312:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4b15      	ldr	r3, [pc, #84]	; (800536c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005318:	4013      	ands	r3, r2
 800531a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005326:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800532e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005336:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800533c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6979      	ldr	r1, [r7, #20]
 800534a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800534e:	e005      	b.n	800535c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	cff00000 	.word	0xcff00000

08005370 <__libc_init_array>:
 8005370:	b570      	push	{r4, r5, r6, lr}
 8005372:	4d0d      	ldr	r5, [pc, #52]	; (80053a8 <__libc_init_array+0x38>)
 8005374:	4c0d      	ldr	r4, [pc, #52]	; (80053ac <__libc_init_array+0x3c>)
 8005376:	1b64      	subs	r4, r4, r5
 8005378:	10a4      	asrs	r4, r4, #2
 800537a:	2600      	movs	r6, #0
 800537c:	42a6      	cmp	r6, r4
 800537e:	d109      	bne.n	8005394 <__libc_init_array+0x24>
 8005380:	4d0b      	ldr	r5, [pc, #44]	; (80053b0 <__libc_init_array+0x40>)
 8005382:	4c0c      	ldr	r4, [pc, #48]	; (80053b4 <__libc_init_array+0x44>)
 8005384:	f000 f820 	bl	80053c8 <_init>
 8005388:	1b64      	subs	r4, r4, r5
 800538a:	10a4      	asrs	r4, r4, #2
 800538c:	2600      	movs	r6, #0
 800538e:	42a6      	cmp	r6, r4
 8005390:	d105      	bne.n	800539e <__libc_init_array+0x2e>
 8005392:	bd70      	pop	{r4, r5, r6, pc}
 8005394:	f855 3b04 	ldr.w	r3, [r5], #4
 8005398:	4798      	blx	r3
 800539a:	3601      	adds	r6, #1
 800539c:	e7ee      	b.n	800537c <__libc_init_array+0xc>
 800539e:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a2:	4798      	blx	r3
 80053a4:	3601      	adds	r6, #1
 80053a6:	e7f2      	b.n	800538e <__libc_init_array+0x1e>
 80053a8:	08008380 	.word	0x08008380
 80053ac:	08008380 	.word	0x08008380
 80053b0:	08008380 	.word	0x08008380
 80053b4:	08008384 	.word	0x08008384

080053b8 <memset>:
 80053b8:	4402      	add	r2, r0
 80053ba:	4603      	mov	r3, r0
 80053bc:	4293      	cmp	r3, r2
 80053be:	d100      	bne.n	80053c2 <memset+0xa>
 80053c0:	4770      	bx	lr
 80053c2:	f803 1b01 	strb.w	r1, [r3], #1
 80053c6:	e7f9      	b.n	80053bc <memset+0x4>

080053c8 <_init>:
 80053c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ca:	bf00      	nop
 80053cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ce:	bc08      	pop	{r3}
 80053d0:	469e      	mov	lr, r3
 80053d2:	4770      	bx	lr

080053d4 <_fini>:
 80053d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d6:	bf00      	nop
 80053d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053da:	bc08      	pop	{r3}
 80053dc:	469e      	mov	lr, r3
 80053de:	4770      	bx	lr
